<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chronos VM</title>
    <url>/2024/03/03/Chronos-VM/</url>
    <content><![CDATA[<p>This virtual machine (VM) is custom-designed for a specific purpose. It includes standard instructions for data movement and arithmetic operations, along with unique jump instructions that extend the capabilities of typical jumping behavior. The VM also has a limited set of flags that can be expanded based on specific needs. </p>
<p>It operates using 32-bit opcodes and registers.<br>This VM is created as a part of a challenge for an International CTF, bi0s CTF 2024.</p>
<p>In that challenge, the VM performs bit manipulation on the user input which demands reversing the logic of the bit operations and retrieve back the original bytes.</p>
<p>The source code of the VM can be found <a href="/files/chronos/final_vm.c">here</a>.</p>
<h2 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a>Registers</h2><p>There are in total 8 General Purpose registers and 4 Special registers</p>
<h3 id="General-Registers"><a href="#General-Registers" class="headerlink" title="General Registers"></a>General Registers</h3><ul>
<li>700: S0</li>
<li>701: S1</li>
<li>702: S2</li>
<li>703: S3</li>
<li>704: S4</li>
<li>705: S5</li>
<li>706: S6</li>
<li>707: S7</li>
</ul>
<h3 id="Special-Registers"><a href="#Special-Registers" class="headerlink" title="Special Registers"></a>Special Registers</h3><ul>
<li>708: MP - Memory pointer</li>
<li>PC - Program counter</li>
<li>SP - Stack pointer</li>
<li>BP - Base pointer</li>
</ul>
<h4 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h4><ul>
<li>EF - Exit Flag</li>
<li>ZF - Zero Flag</li>
</ul>
<h2 id="Instruction-Set"><a href="#Instruction-Set" class="headerlink" title="Instruction Set"></a>Instruction Set</h2><table>
<thead>
<tr>
<th>Opcodes</th>
<th>Mnemonic</th>
<th>Description</th>
<th>Use Case of  Opcodes</th>
</tr>
</thead>
<tbody><tr>
<td>1200 (10)</td>
<td>MOVR</td>
<td>“Moves” a value from one register to another (It does not copy the value but actually moves it)</td>
<td>MOVR S0, S1<br>S1 –&gt; S0</td>
</tr>
<tr>
<td>1201 (8)</td>
<td>COPI</td>
<td>Typical ‘mov’ operation from x86 with an immediate value</td>
<td>COPI S0, 4<br>4 –&gt; S0</td>
</tr>
<tr>
<td>1202 (10)</td>
<td>COPR</td>
<td>Typical mov operation from x86</td>
<td>COPR S0, S1<br></td>
</tr>
<tr>
<td>1203 (8)</td>
<td>ADDI</td>
<td>Add the values of the register and the immediate value and store it in first operand</td>
<td>ADDI S0, 4<br>S0 +&#x3D;  4</td>
</tr>
<tr>
<td>1204 (10)</td>
<td>ADDR</td>
<td>Add the values of the 2 register and save the result in the first register</td>
<td>ADDR S0, S1<br>S0 &#x3D; S0 + S1</td>
</tr>
<tr>
<td>1205 (8)</td>
<td>SUBI</td>
<td>Subtract the values of the register and the immediate value and store it in first operand</td>
<td>SUBI S0, 4<br>S0 -&#x3D;  4</td>
</tr>
<tr>
<td>1206 (10)</td>
<td>SUBR</td>
<td>Subtract the values of the 2 register and save the result in the first register</td>
<td>SUBR S0, S1<br>S0 &#x3D; S0 - S1</td>
</tr>
<tr>
<td>1207 (8)</td>
<td>XORI</td>
<td>Xor the values of the register and the immediate value and store it in first operand</td>
<td>XORI S0, 4<br>S0 ^&#x3D;  4</td>
</tr>
<tr>
<td>1208 (10)</td>
<td>XORR</td>
<td>Xor the values of the 2 register and save the result in the first register</td>
<td>XORR S0, S1<br>S0 &#x3D; S0 ^ S1</td>
</tr>
<tr>
<td>1209 (8)</td>
<td>DIVI</td>
<td>Divide the value of the register by the immediate value and store it in first operand</td>
<td>DIVI S0, 4<br>S0 &#x2F;&#x3D;  4</td>
</tr>
<tr>
<td>1210 (10)</td>
<td>DIVR</td>
<td>Divide the value of the 1st register by 2nd register and save the result in the first register</td>
<td>DIVR S0, S1<br>S0 &#x3D; S0 &#x2F; S1</td>
</tr>
<tr>
<td>1211 (8)</td>
<td>MULI</td>
<td>Multiply the values of the register and the immediate value and store it in first operand</td>
<td>MULI S0, 4<br>S0 *&#x3D;  4</td>
</tr>
<tr>
<td>1212 (10)</td>
<td>MULR</td>
<td>Multiply the values of the 2 register and save the result in the first register</td>
<td>MULR S0, S1<br>S0 &#x3D; S0 * S1</td>
</tr>
<tr>
<td>1213 (7)</td>
<td>POPA</td>
<td>Pops the top value of the stack and stores it in the given register. SP –&gt; SP + 1</td>
<td>POPA S0<br>[SP] –&gt; S0</td>
</tr>
<tr>
<td>1214 (7)</td>
<td>PUSH</td>
<td>The value in the register is pushed on the top of the stack. SP –&gt; SP - 1</td>
<td>PUSH S0<br>S0 –&gt; [SP-1]</td>
</tr>
<tr>
<td>1215 (8)</td>
<td>LOAD</td>
<td>Load the data from the memory to register. The offset of the MP is given as the 2nd argument</td>
<td>LOAD S0, 1<br>[MP+1] –&gt;S0</td>
</tr>
<tr>
<td>1216 (7)</td>
<td>STOR</td>
<td>Store the data from register to memory. <br>MP –&gt; MP + 1</td>
<td>STOR S0<br>S0 –&gt; [MP]</td>
</tr>
<tr>
<td>1217 (~)</td>
<td>CALL</td>
<td>Calls the function given, the length of the function name and then the function name is provided</td>
<td>CALL 5 func0</td>
</tr>
<tr>
<td>1218 (7)</td>
<td>INCR</td>
<td>Increments the value of the register by 1 and store it in the same register</td>
<td>INCR S0<br>S0 +&#x3D; 1</td>
</tr>
<tr>
<td>1219 (7)</td>
<td>DECR</td>
<td>Decrements the value of the register by 1 and store it in the same register</td>
<td>DECR S0<br>S0  -&#x3D; 1</td>
</tr>
<tr>
<td>1220 (8)</td>
<td>LD_D</td>
<td>Another version of Load, where the value from the memory is deleted when it’s loaded into the register</td>
<td>LD_D S1, 1<br>[MP+1] –&gt;S1</td>
</tr>
<tr>
<td>1221 (8)</td>
<td>SHRI</td>
<td>Shift Right the value of the register by the given value</td>
<td>SHRI S0, 1<br>S0 &#x3D; S0 &gt;&gt;1</td>
</tr>
<tr>
<td>1222 (10)</td>
<td>SHRR</td>
<td>Shift Right the value of the register by the given value within a register</td>
<td>SHRR S0, S1<br>S0 &#x3D; S0 &gt;&gt;S1</td>
</tr>
<tr>
<td>1223 (8)</td>
<td>SHLI</td>
<td>Shift Left the value of the register by the given value</td>
<td>SHLI S0, 1<br>S0 &#x3D; S0 &lt;&lt; 1</td>
</tr>
<tr>
<td>1224 (10)</td>
<td>SHLR</td>
<td>Shift Left the value of the register by the given value within a register</td>
<td>SHLR S0, S1<br>S0 &#x3D; S0 &lt;&lt; S1</td>
</tr>
<tr>
<td>1225 (~)</td>
<td>PRIM</td>
<td>Print the message, the length of the message and the message is given</td>
<td>PRIM 5 Hello</td>
</tr>
<tr>
<td>1226 (7)</td>
<td>PRIR</td>
<td>Prints the value of the register</td>
<td>PRIR S0</td>
</tr>
<tr>
<td>1227 (8)</td>
<td>COPS</td>
<td>Copies the value from the stack to the register given</td>
<td>COPS S0,4<br>[SP+4] –&gt; S0</td>
</tr>
<tr>
<td>1228 (~)</td>
<td>JZD</td>
<td>Increment the PC by the value given if the ZF is set to 1</td>
<td>JZD 4<br>PC +&#x3D; 4</td>
</tr>
<tr>
<td>1229 (~)</td>
<td>JNZD</td>
<td>Increment the PC by the value given if the ZF is set to 0</td>
<td>JNZD 4<br>PC +&#x3D; 4</td>
</tr>
<tr>
<td>1230 (~)</td>
<td>JMPD</td>
<td>Increment the PC by the value given</td>
<td>JMPD 4<br>PC +&#x3D; 4</td>
</tr>
<tr>
<td>1231 (~)</td>
<td>SCAN</td>
<td>Takes input in 3 forms, integer, character and string<br>The type of data needs to be specified as ‘i’ for integer, ‘c’ for character and ‘s’ for string<br>Integer input is stored in the register specified<br>Character input is stored directly in the memory<br>String input is converted to it’s base64 form and then stored in the memory</td>
<td>SCAN i S0<br>input –&gt; S0</td>
</tr>
<tr>
<td>1232 (8)</td>
<td>CMPI</td>
<td>Compares the value in the register with the immediate value and sets the zero flag accordingly</td>
<td>CMPI S0, 3</td>
</tr>
<tr>
<td>1233 (10)</td>
<td>CMPR</td>
<td>Compares the values in the 2 registers and sets the zero flag accordingly</td>
<td>CMPI S0, S1</td>
</tr>
<tr>
<td>1234 (4)</td>
<td>EXIT</td>
<td>Sets the Exit flag as 1</td>
<td>EXIT</td>
</tr>
<tr>
<td>1235 (8)</td>
<td>ANDI</td>
<td>Bitwise And operation is performed on the value of the register and the immediate value and is stored it in the first operand</td>
<td>ANDI S0, 4<br>S0 &amp;&#x3D;  4<br></td>
</tr>
<tr>
<td>1236 (10)</td>
<td>ANDR</td>
<td>Bitwise And operation is performed on the values of the 2 registers and result is stored in the first operand</td>
<td>ANDR S0, S1<br>S0 &#x3D; S0 &amp; S1</td>
</tr>
<tr>
<td>1237 (8)</td>
<td>ORRI</td>
<td>Bitwise Or operation is performed on the value of the register and the immediate value and is stored it in the first operand</td>
<td>ANDI S0, 4<br>S0 |&#x3D;  4</td>
</tr>
<tr>
<td>1238 (10)</td>
<td>ORRR</td>
<td>Bitwise Or operation is performed on the values of the 2 registers and result is stored in the first operand</td>
<td>ORRR S0, S1<br>S0 &#x3D; S0 | S1</td>
</tr>
<tr>
<td>1239 (~)</td>
<td>JZU</td>
<td>Decrement the PC by the value given if the ZF is set to 1</td>
<td>JZU 4<br>PC -&#x3D; 4</td>
</tr>
<tr>
<td>1240 (~)</td>
<td>JNZU</td>
<td>Decrement the PC by the value given if the ZF is set to 0</td>
<td>JNZU 4<br>PC -&#x3D; 4</td>
</tr>
<tr>
<td>1241 (~)</td>
<td>JMPU</td>
<td>Decrement the PC by the value given</td>
<td>JMPD 4<br>PC -&#x3D; 4</td>
</tr>
<tr>
<td>1242 (~)</td>
<td>JNZ</td>
<td>Place the PC at the offset mentioned if the zero flag is set to 0</td>
<td>JNZ 4<br>PC &#x3D; 4</td>
</tr>
<tr>
<td>1243 (~)</td>
<td>JZ</td>
<td>Place the PC at the offset mentioned if the zero flag is set to 1</td>
<td>JZ 4<br>PC &#x3D; 4</td>
</tr>
</tbody></table>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>This VM is created as a part of a challenge for an International CTF, bi0s CTF 2024<br>In that challenge, the VM performs bit manipulation on the user input which demands reversing the logic of the bit operations and retrieve back the original bytes.</p>
<p>You can download the source code of the VM here.</p>
<h3 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h3><ol>
<li>Prompt for input</li>
<li>Take input and format it</li>
<li>Store the modified input in memory</li>
<li>Store the same in the stack</li>
<li>Convert into binary and store it in stack and remove the input from memory</li>
<li>Classified array is computed and stored in memory</li>
</ol>
<h3 id="Disassembly"><a href="#Disassembly" class="headerlink" title="Disassembly"></a>Disassembly</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">;S0 has the modified input length</span><br><span class="line"></span><br><span class="line">		COPI 	MP, 0</span><br><span class="line">		PRIM 16 Enter the flag: </span><br><span class="line">		SCAN s</span><br><span class="line"></span><br><span class="line">		COPI 	S1, 0</span><br><span class="line">		COPI	MP, 0</span><br><span class="line">48: 	LOAD 	S2, [MP]</span><br><span class="line">		INCR 	MP</span><br><span class="line">		INCR	S1</span><br><span class="line">		PUSH 	S2</span><br><span class="line">		CMPR  	S1, S0</span><br><span class="line">87: 	JNZU  	39        ;48</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">92: 	COPI 	S7, 0</span><br><span class="line">100:	DECR	MP</span><br><span class="line">107:	LD_D	S1, [MP]</span><br><span class="line">115:	COPI	S2, 0</span><br><span class="line">123:	COPR	S3, S1</span><br><span class="line">133:	ANDI	S3, 1</span><br><span class="line">141:	PUSH	S3</span><br><span class="line">148:	SHRI	S1, 1</span><br><span class="line">156:	INCR	S2</span><br><span class="line">163:	CMPI	S2, 8</span><br><span class="line">171:	JNZU	48 			;123</span><br><span class="line">176:	INCR	S7</span><br><span class="line">183:	CMPR	S7, S0</span><br><span class="line">193:	JNZU	93  		;100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">198:	COPR 	S1, S0</span><br><span class="line">208:	DECR 	S1</span><br><span class="line">215:	COPI 	S2, 0</span><br><span class="line">223:	COPS	S3, [SP]</span><br><span class="line">231:	COPS	S4, [SP+8]</span><br><span class="line">239:	XORR	S3, S4</span><br><span class="line">249:	STOR 	S3</span><br><span class="line">256:	COPS	S3, [SP+1]</span><br><span class="line">264:	COPS	S4, [SP+9]</span><br><span class="line">272:	XORR	S3, S4</span><br><span class="line">282:	STOR 	S3</span><br><span class="line">289:	COPS	S3, [SP+2]</span><br><span class="line">297:	COPS	S4, [SP+10]</span><br><span class="line">305:	XORR	S3, S4</span><br><span class="line">315:	STOR 	S3</span><br><span class="line">322:	COPS	S3, [SP+1]</span><br><span class="line">330:	COPS	S4, [SP+8]</span><br><span class="line">338:	XORR	S3, S4</span><br><span class="line">348:	STOR 	S3</span><br><span class="line">355:	COPS	S3, [SP]</span><br><span class="line">363:	COPS	S4, [SP+9]</span><br><span class="line">371:	XORR	S3, S4</span><br><span class="line">381:	STOR 	S3</span><br><span class="line">388:	COPS	S3, [SP+2]</span><br><span class="line">396:	COPS	S4, [SP+9]</span><br><span class="line">404:	XORR	S3, S4</span><br><span class="line">414:	STOR 	S3</span><br><span class="line">421:	COPS	S3, [SP+1]</span><br><span class="line">429:	COPS	S4, [SP+10]</span><br><span class="line">437:	XORR	S3, S4</span><br><span class="line">447:	STOR 	S3</span><br><span class="line">454:	COPS	S3, [SP]</span><br><span class="line">462:	COPS	S4, [SP+2]</span><br><span class="line">470:	COPS 	S5, [SP+9]</span><br><span class="line">478:	XORR	S3, S4</span><br><span class="line">488:	XORR	S3, S5</span><br><span class="line">498:	STOR 	S3</span><br><span class="line">505:	POP		S5</span><br><span class="line">512:	INCR	S2</span><br><span class="line">519:	CMPI	S2, 6</span><br><span class="line">527:	JNZ 	223			</span><br><span class="line">532:	POP 	S5</span><br><span class="line">539:	POP		S5</span><br><span class="line">546:	DECR	S1</span><br><span class="line">553:	CMPI 	S1, 0</span><br><span class="line">561:	JNZ 	215			</span><br><span class="line">566:	CMPI	MP, 144</span><br><span class="line">574:	JNZD 	15        ;589</span><br><span class="line">579:	PRIM 5  Wrong</span><br><span class="line">589:	EXIT  </span><br></pre></td></tr></table></figure></div>

<br>

<p>Ciao !!</p>
<br>

<hr>
]]></content>
      <categories>
        <category>Katanaverse</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>bi0sCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Cyclechaser : Kalmar CTF 2023</title>
    <url>/2023/03/07/Cyclechaser-Kalmar-CTF-2023/</url>
    <content><![CDATA[<p>I played Kalmar CTF with Team Shakti last weekend and came across this amazing reversing challenge. This challenge utilises functions like <code>srand()</code> and <code>getrandom()</code>. </p>
<p>Let’s take a look how these functions play a role in this challenge and how I reversed the binary to clutch the flag. There were some calculated hunches that I had to make to reach the correct solution and pretty little pwntools script 🙂.</p>
<h3 id="Triage"><a href="#Triage" class="headerlink" title="Triage"></a>Triage</h3><p>Let’s first analyze the challenge <a href="/files/cyclechaser/cyclechaser">binary</a> statically.</p>
<p>The process generates a 4 byte number via the function <code>getrandom()</code> and this random number is then used as the seed for <code>srand()</code> function. </p>
<p>The <code>getrandom()</code> function is then used second time to generate 1024 random bytes.</p>
<p>Next there is an attempt to open flag.txt which is already present in the server and we aim to recover the contents of this file.</p>
<p>The content of flag.txt is checked against the flag format and the rest of the flag is stored.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser1.png"
                      alt="cyclechaser"
                ></p>
<p>Thereafter the program also takes our input which is 16393 bytes long.</p>
<br>

<h3 id="Initial-Approach"><a href="#Initial-Approach" class="headerlink" title="Initial Approach"></a>Initial Approach</h3><p>Since a lot of things are going on in this challenge, it was difficult to point out as to what approach would be best to take.</p>
<p>Executing the challenge prints out the seed used for srand function, this made me believe that whatever function or part of code is using <code>rand()</code> function might be of high importance.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser2.png"
                      alt="cyclechaser"
                ></p>
<p>In this section we have got a really large <code>for</code> loop which runs 131135 times.</p>
<p>The final output that we get is v17 which is changed according to the value of v5 variable, which is in turn being changed based on the condition <code>if ( j &gt; 0x1FFFF )</code></p>
<p>My initial approach was to extract all the rand() values based on the seed and then somehow try to get the flag bytes which are originally v15 in this section. </p>
<p>Let’s make the decompilation more clearer for better understanding.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser3.png"
                      alt="cyclechaser"
                ></p>
<p>The else part of the above conditional statement involves those random bytes which are generated via the <code>getrandom()</code> function, hence those can’t be predicted easily.</p>
<p>So that makes it kind of tedious to determine the output if the else section is executed.</p>
<h3 id="Right-Hunch"><a href="#Right-Hunch" class="headerlink" title="Right Hunch"></a>Right Hunch</h3><p>This made me realise that what if stopping the code flow from entering the <code>else</code> part is the primary task that I need to do ?</p>
<p>This is where the role of step function comes in.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser4.png"
                      alt="cyclechaser"
                ></p>
<p>Until now I haven’t checked out step function properly but just skimmed over.</p>
<p>Here v4 needs to be 1 in order to the function to return true, which is when the output will be changed based on the v5 calculated earlier in the previous loop.</p>
<p>In order to make v4 1 we need the first byte of our input to be an odd byte.</p>
<p>But our trouble doesn’t ends here, if we look further we could see that our input is being shifted.</p>
<p>That means for everytime the step function is called, the first byte of our input is different.</p>
<p>The shifting that is taking place here is left shift by one byte along with few more calculations which I actually didn’t bother to reverse right now.</p>
<p>So if we go back to the main function, I get a quick idea that if the step function returns 0 131072 times and then returns 1 for the rest of the iterations, we might get the flag bytes as it is printed out.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser5.png"
                      alt="cyclechaser"
                ></p>
<p>Since output is initialized to be zero and continues to remain zero until the iteration number reaches 131072, v5 is directly assigned with the flag bytes which are xorred with the output bytes itself hence giving out the flag itself.</p>
<p>But now we need to figure out what input will make this happen.</p>
<p>I tried analysing the output of the same function with different inputs to find any pattern if it exists.</p>
<p>The pattern that I observed was this -</p>
<div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">step</span><span class="params">(<span class="type">char</span> *a1, <span class="type">int</span> a2)</span> &#123;</span><br><span class="line">  <span class="type">char</span> v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4 ;</span><br><span class="line">  <span class="type">int</span> v8 = <span class="number">0</span>;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v9 = <span class="number">0</span>;</span><br><span class="line">  uint i;</span><br><span class="line">  <span class="type">int</span> j;</span><br><span class="line"></span><br><span class="line">    v4 = *a1 &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (v4) &#123;</span><br><span class="line">    v8 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; a2; ++i) &#123;</span><br><span class="line">      v9 = v8 + <span class="number">3</span> * a1[i];</span><br><span class="line">      v8 = v9 &gt;&gt; <span class="number">8</span>;</span><br><span class="line">      a1[i] = v9;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (v8) &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Error.&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">99</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (j = a2 - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">    <span class="type">char</span> v5 = a1[j] &amp; <span class="number">1</span>;</span><br><span class="line">    a1[j] &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    a1[j] |= v3 &lt;&lt; <span class="number">7</span>;</span><br><span class="line">    v3 = v5;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (v3)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;error\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> inp[] = <span class="string">&quot;\x00\x00\x00\x00\xaa\xaa\xaa\xaa&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">70</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, step(inp, <span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>This returns - </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser6.png"
                      alt="cyclechaser"
                ></p>
<p>For every null byte as in input, it returns ‘0’ 8 times and thus since I provided 4 null bytes, it gave me 32 zeros and then 1’s because of ‘\xaa’</p>
<p>So since we need to pass the step function 131072 times, which is perfectly divisible by 8, that is, 16384, we provide ‘16384’ null bytes and rest some non-null bytes.</p>
<h4 id="Solve-script"><a href="#Solve-script" class="headerlink" title="Solve script"></a>Solve script</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">yy = <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">zz= <span class="string">b&#x27;\xff&#x27;</span></span><br><span class="line">x = yy*<span class="number">16384</span>+zz*<span class="number">9</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;3.123.91.129&#x27;</span>,<span class="number">13339</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;seed&#x27;</span>, io.recvline())</span><br><span class="line">io.sendline(x)</span><br><span class="line"></span><br><span class="line">ret = io.recvline()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure></div>

<p>This returns - </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/cyclechaser/chaser7.png"
                      alt="cyclechaser"
                ></p>
<p>Which forms the flag - </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">f=<span class="string">&#x27;69 5F 73 74 69 6C 6C 5F 68 61 76 65 5F 74 6F 5F 63 6F 6E 73 74 72 75 63 74 5F 61 5F 66 6C 61 67 5F 6F 66 5F 63 6F 72 72 65 63 74 5F 6C 65 6E 67 74 68 5F 66 6F 72 5F 74 68 69 73 5F 63 68 61 6C&#x27;</span>.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i,<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<p><b>Output - </b><br>i_still_have_to_construct_a_flag_of_correct_length_for_this_chal</p>
<h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag -"></a>Flag -</h4><p><code>kalmar&#123;i_still_have_to_construct_a_flag_of_correct_length_for_this_chal&#125;</code></p>
<br>

<p>Ciao !!<br><br></p>
<hr>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>linux</tag>
        <tag>reversing</tag>
        <tag>kalmarCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Exploring Katanaverse Implementation</title>
    <url>/2024/02/02/Exploring-Katanaverse-Implementation/</url>
    <content><![CDATA[<p>In this detailed explanation, I will walk you through the process of constructing Katanaverse, the binary utilized as a bi0sCTF 2024 Challenge. This challenge falls within the domain of reverse engineering and requires participants to employ puzzle-solving skills. Katanaverse presents a unique blend of custom architecture and concepts from Quantum Computing.</p>
<p>In Katanaverse 0.0, participants tackled the Weighted Maxcut Problem, aiming to split connected dots on a graph into two groups to maximize the weight of lines between them. This demanded strategic thinking and experimentation. In Katanaverse 1.0, participants employed a straightforward but exhaustive approach, trying every possible solution until finding the best one.</p>
<p>Also you can find the source codes and binaries of both the challenges on my <a class="link"   href="https://github.com/k1n0r4/Katanaverse" >Github repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Overview-of-the-Challenge"><a href="#Overview-of-the-Challenge" class="headerlink" title="Overview of the Challenge"></a>Overview of the Challenge</h2><p>The entire challenge is divided into multiple parts</p>
<ul>
<li>VM which includes the bit manipulation and the creation of classified array</li>
<li>Generation of constants<ol>
<li>AES key generation via the known part of classified 2D array</li>
<li>srand seed generation using the input trigger and the known part of the classfied 2D array</li>
</ol>
</li>
<li>Constraint check for classified array using rand values</li>
<li>Generate 12 points for each group of classified array </li>
<li>Convert alpha beta notation of points into xyz coordinates</li>
<li>Apply Quantum Approximate Optimization Algorithm on those 12 points</li>
<li>The result of the algorithm is formatted and aes encrypted</li>
<li>The encrpted value is then compared against the encrypted bytes of the correct flag</li>
</ul>
<br/>

<h2 id="1-VM"><a href="#1-VM" class="headerlink" title="#1 VM"></a>#1 VM</h2><h3 id="Control-flow-of-the-VM"><a href="#Control-flow-of-the-VM" class="headerlink" title="Control flow of the VM"></a>Control flow of the VM</h3><ol>
<li>Prompt for Flag</li>
<li>Takes the input</li>
<li>Transforms the flag into its string encoded in base 64.</li>
<li>Register S0 stores the updated flag’s length.</li>
<li>Binary representations of flag bytes are created and placed on the stack.</li>
<li>As a result, each time a flag byte is converted, the byte is removed from memory.</li>
<li>Memory is discovered to be empty following the conversion.</li>
<li>A bit modification that is kept in memory is carried out using stored binary from the stack.</li>
<li>VM exits</li>
<li>It replicates its memory into a “classified” 2D array </li>
<li>It stores the altered input length from register S0 in a new variable for use in future applications.</li>
</ol>
<p>The classified array is a 2D array of size <code>(inp_len-1)*6 X 8</code><br>8 corresponds to each bit of the byte</p>
<p>For more details on the Chronos VM, you can refer to my blog post on <a class="link"   href="https://k1n0r4.github.io/post/chronos_vm/" >Chronos VM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h3 id="Bit-manipulation"><a href="#Bit-manipulation" class="headerlink" title="Bit manipulation"></a>Bit manipulation</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana/katana_1.jpeg"
                      alt="katanaverse"
                ></p>
<h2 id="2-Constant-Generation"><a href="#2-Constant-Generation" class="headerlink" title="#2 Constant Generation"></a>#2 Constant Generation</h2><p>Since the flag format is included in the creation of classified array, we know the initial few bytes of classified array</p>
<p>Those known bytes are used as aes_key</p>
<p>AES Key Generation</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint8_t aes_key[16];</span><br><span class="line"></span><br><span class="line">    for(int i =0;i&lt;16;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aes_key[i] = classified[i][7] * 1 + classified[i][6] * 2 + classified[i][5] * 4 + classified[i][4] * 8 + classified[i][3] * 16 + classified[i][2] * 32 + classified[i][1] * 64 + classified[i][0] * 128 ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>Similarly, seed for srand is also determined using these known classified bytes</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int seed_gen = 0;</span><br><span class="line">    for(int i =0;i&lt;8;i+=2)</span><br><span class="line">    &#123;</span><br><span class="line">        seed_gen+=classified[i][3]*1 +classified[i][2]*2 + classified[i][1]*4 + classified[i][0]*8;</span><br><span class="line">        seed_gen+=classified[i+1][7]*1 +classified[i+1][6]*2 + classified[i+1][5]*4 + classified[i+1][4]*8;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    char g[1];</span><br><span class="line">    printf(&quot;\nEnter the trigger: &quot;);</span><br><span class="line">    scanf(&quot;%c&quot;, &amp;g[0]);</span><br><span class="line"></span><br><span class="line">    if(g[0]==&#x27;r&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        srand(seed_gen^g[0]);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        printf(&quot;Wrong trigger\n&quot;);</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>An input trigger is also used in the seed generation</p>
<br>

<h2 id="3-Constraints"><a href="#3-Constraints" class="headerlink" title="#3 Constraints"></a>#3 Constraints</h2><p><code>rand()</code> function is used to generate 5 unique numbers within the range of 0 to 5</p>
<p>Hence for every 6 bytes, a constraint between the first and last bit for that byte is given<br>For example, if the numbers generated are 0,1,2,3,4 then first 5 bytes of that group of 6 is taken and constraint between the first and last bit is given as 0 or 1<br>0 means the bits are not same, they are either 0 and 1 or 1 and 0<br>1 means the bits are same, they are either 0 and 0 or 1 and 1</p>
<p>These constraints are provided to make bruting less tedious</p>
<p><code>conditions</code> array has those constraints</p>
<p>In katanaverse 0.0, the modified input length is 25<br>So the classified array (inp_len-1) X 6 is 144</p>
<p>Each 6 bytes correspond to the pair of bytes of our modified input</p>
<p>hence if we take first 6 bytes of classified array and given the constraints for 5 bytes given, there are only 8 possibilities</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int conditions[120] = &#123;1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1&#125;;</span><br><span class="line">    int p=0;</span><br><span class="line">    for(int j =0;j&lt;(inp_len-1)*6;j+=6)</span><br><span class="line">    &#123; </span><br><span class="line">        int rands[5];</span><br><span class="line">        rands[0] = rand()%4;</span><br><span class="line">        for(int i=1; i&lt;3; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int r = rand()%4;</span><br><span class="line">            while(r == rands[i-1] || r == rands[0])</span><br><span class="line">            &#123;</span><br><span class="line">                r = rand()%4;</span><br><span class="line">            &#125;</span><br><span class="line">            rands[i] = r;</span><br><span class="line">        &#125;</span><br><span class="line">        rands[3] = 4;</span><br><span class="line">        rands[4] = 5;</span><br><span class="line"></span><br><span class="line">        for(int k=0;k&lt;5;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            int g = (classified[j+rands[k]][0] == classified[j+rands[k]][7]);</span><br><span class="line">            if(g != conditions[p])</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;Wrong Input\n&quot;);</span><br><span class="line">                exit(0);</span><br><span class="line">            &#125;</span><br><span class="line">            p+=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<br>

<h2 id="4-Generation-of-12-points"><a href="#4-Generation-of-12-points" class="headerlink" title="#4  Generation of 12 points"></a>#4  Generation of 12 points</h2><p>Each time 6 bytes of classified array is taken and 6 X 8 bits are divided into 12 groups of 4 bits(nibble) each</p>
<p>These 4 bits (nibble) at a time determine which operation will be performed<br>There are 16 operations named as Blaze, Horizon, Nova, Quantum, Echo,…</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana/katana_2.jpeg"
                      alt="katanaverse"
                ></p>
<p>These are the combination of coordinate shift that will be performed on the given qubit along it’s x,y and z axis<br>This will change the position of the qubit</p>
<p>These operations can be visualised using the <a class="link"   href="https://bits-and-electrons.github.io/bloch-sphere-simulator/" >Bloch Sphere <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Initial qubit position is given by two variables alpha and beta as 1 + 0i , 0 + 0i</p>
<p>When an operation is performed on the qubit, it will undergo change in the alpha and beta values of the qubit</p>
<p>Hence, taking inital qubit state as given above we perform 12 such operations on the qubit and store the state of the qubit after every operation<br>Hence we have 12 combinations of alpha and beta at the end for each 6 bytes of the classified array<br>These alpha and beta are converted to their respective x,y,z coordinate form</p>
<p>The function <code>choice</code> is used to decide which operation will be performed based on the 4 bits</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(int i=0;i&lt;(inp_len-1)*6;i+=6)</span><br><span class="line">    &#123;</span><br><span class="line">        double complex alpha = 1 + 0*I;</span><br><span class="line">        double complex beta = 0 + 0*I;</span><br><span class="line">        double complex alts[12][2];</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;6;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            int com[2] = &#123;0,0&#125;;</span><br><span class="line">            com[0] = classified[i+j][0]*8 + classified[i+j][1]*4 + classified[i+j][2]*2 + classified[i+j][3]*1;</span><br><span class="line">            com[1] = classified[i+j][4]*1 + classified[i+j][5]*2 + classified[i+j][6]*4 + classified[i+j][7]*8;</span><br><span class="line">            choice(com[0], alpha, beta, &amp;alts[j*2][0], &amp;alts[j*2][1], subtract_key, xor_key); </span><br><span class="line">            choice(com[1], alts[j*2][0], alts[j*2][1], &amp;alts[j*2+1][0], &amp;alts[j*2+1][1], subtract_key, xor_key); </span><br><span class="line">            alpha = alts[j*2+1][0];</span><br><span class="line">            beta = alts[j*2+1][1];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int k=0;k&lt;12;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            alpha_beta_to_xyz(alts[k][0], alts[k][1], coordinates[i*2+k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>The functions Blaze, Horizon, Nova, Quantum, Echo … represent the operations and technically to perform these operation is called to “pass the qubit through the custom gates”</p>
<p>Within each function, there is an encrypted shellcode, which on decrypting is the qiskit code to implement that specific gate (operation&#x2F;coordinate shift in 3D cuz it is a sphere)</p>
<p>It will look something like this</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPENQASM 2.0;</span><br><span class="line">include &quot;qelib1.inc&quot;;</span><br><span class="line">gate disentangler_dg q0 &#123;  &#125;</span><br><span class="line">gate state_preparation(param0,param1) q0 &#123; disentangler_dg q0; &#125;</span><br><span class="line">gate initialize(param0,param1) q0 &#123; reset q0; state_preparation(alpha,beta) q0; &#125;</span><br><span class="line">qreg q2[1];</span><br><span class="line">creg c2[1];</span><br><span class="line">initialize(alpha,beta) q2[0];</span><br><span class="line">rx(pi/4) q2[0];</span><br><span class="line">ry(pi/3) q2[0];</span><br><span class="line">rz(pi/4) q2[0];</span><br><span class="line">measure q2[0] -&gt; c2[0]; </span><br></pre></td></tr></table></figure></div>

<p>Here the operation performed is, </p>
<ol>
<li>45 degree along x axis</li>
<li>60 degree along y axis</li>
<li>45 degree along z axis</li>
</ol>
<p>Likewise each function has different operations<br>This is where the given binary will cease to execute normally and throw a segmantation fault because you need a proper platform to execute this qiskit code</p>
<p>It can be done in <a class="link"   href="https://quantum.ibm.com/lab" >Quantum Lab provided by IBM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Although, conversion from alpha beta to xyz coordinates and vice versa can be done here</p>
<p>Hence at the end of this step we have 12 points for each group of 6 bytes of the classified array</p>
<p>We have 24 sets of 12 points</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note: For the encrypting the shellcode, the constants subtract_key and xor_key are determined using the known part of the classified array, the routine is a simple subtract and xor of each byte in the order</span><br></pre></td></tr></table></figure></div>

<br>

<h2 id="5-QAOA"><a href="#5-QAOA" class="headerlink" title="#5 QAOA"></a>#5 QAOA</h2><p>Quantum Approximate Optimization Algorithm is a way to divide the given set of points in a way that they are equally divided</p>
<p>QAOA is used to solve <a class="link"   href="https://qiskit-community.github.io/qiskit-optimization/tutorials/06_examples_max_cut_and_tsp.html" >max cut problem <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> here</p>
<p>The weights are the distances between the points</p>
<p>We make 41 such pairs and calculate distances between these pairs and assign them as their weights</p>
<p>So now we have a network of 12 points and 41 connections connecting them</p>
<p>Now QAOA is applied on this network and based on their weights each point will be assigned to one of the group, that is Group A or Group B<br>Group A say is represented by 0, so Group B is represented by 1</p>
<p>so the output of the QAOA applied on one network will be 12 bits</p>
<p>For example: 001111001010</p>
<p>Hence we can say that 1ast and second point is assigned to Group A, then next 4 points are assigned to Group B and it goes on</p>
<p>Thus, all the points are divided in 2 groups</p>
<p>In the binary, the function that is supposed to perform qaoa is broken, there are only encrypted bytes which give out a hint about using qaoa</p>
<p>This is the decrypted string part under qaoa for katanaverse 0.0</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oh no! Not only is this function flawed, it is nonexistent. Could you please solve this?</span><br><span class="line"></span><br><span class="line">**Static noise</span><br><span class="line"></span><br><span class="line">Agent, We happened to record a conversation between Martin and his subordinates. For your reference, here is the transcript of our conversation.</span><br><span class="line"></span><br><span class="line">Subordinate 1: Is it possible for an ordinary person to open the vault?</span><br><span class="line">Martin: No, definitely not. The vault needs to be slashed 12 times in order to divide those 12 points efficiently, and this needs to be done multiple times...</span><br><span class="line">Subordinate 2: However, I have heard that you are not required to use an &#x27;efficient method&#x27; to divide the points, but rather some other strange method?</span><br><span class="line">Martin: You are right, the key to this strange method is &#x27;Quantum&#x27;... Have you heard of Optimization?</span><br><span class="line"></span><br><span class="line">All we have is this. All the best in finding the correct replacement for the given function.</span><br><span class="line"></span><br><span class="line">**Static noise</span><br></pre></td></tr></table></figure></div>

<p>The encryption scheme used here is same as that used for the shellcodes above</p>
<p>Sample implementation of QAOA in qiskit is given as:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import networkx as nx</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line"># Number of nodes in the graph</span><br><span class="line">n = 12</span><br><span class="line"></span><br><span class="line">G = nx.Graph()</span><br><span class="line">G.add_nodes_from(np.arange(0, n, 1))</span><br><span class="line"></span><br><span class="line">elist = [[0, 2, 16.0], [0, 4, 20.0], [0, 6, 17.0], [0, 8, 16.0], [0, 10, 18.0], [1, 0, 13.0], [1, 3, 18.0], [1, 5, 12.0], [1, 7, 14.0], [1, 9, 17.0], [1, 11, 11.0], [2, 1, 20.0], [2, 4, 15.0], [2, 6, 13.0], [2, 8, 19.0], [2, 10, 11.0], [3, 2, 5.0], [3, 5, 13.0], [3, 7, 8.0], [3, 9, 10.0], [3, 11, 14.0], [4, 3, 12.0], [4, 6, 13.0], [4, 8, 8.0], [4, 10, 11.0], [5, 4, 17.0], [5, 7, 13.0], [5, 9, 8.0], [5, 11, 17.0], [6, 5, 6.0], [6, 8, 13.0], [6, 10, 3.0], [7, 6, 7.0], [7, 9, 15.0], [7, 11, 8.0], [8, 7, 10.0], [8, 10, 13.0], [9, 8, 19.0], [9, 11, 19.0], [10, 9, 11.0], [11, 10, 12.0]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Add weighted edges to the graph</span><br><span class="line">G.add_weighted_edges_from(elist)</span><br><span class="line"></span><br><span class="line"># Set node colors</span><br><span class="line">colors = [&quot;r&quot; for node in G.nodes()]</span><br><span class="line"></span><br><span class="line"># Calculate node positions using a spring layout</span><br><span class="line">pos = nx.spring_layout(G)</span><br><span class="line"></span><br><span class="line">def draw_graph(G, colors, pos):</span><br><span class="line">    default_axes = plt.axes(frameon=True)</span><br><span class="line">    nx.draw_networkx(G, node_color=colors, node_size=600, alpha=0.8, ax=default_axes, pos=pos)</span><br><span class="line">    edge_labels = nx.get_edge_attributes(G, &quot;weight&quot;)</span><br><span class="line">    nx.draw_networkx_edge_labels(G, pos=pos, edge_labels=edge_labels)</span><br><span class="line"></span><br><span class="line"># Draw the graph</span><br><span class="line">draw_graph(G, colors, pos)</span><br><span class="line"></span><br><span class="line"># Computing the weight matrix from the random graph</span><br><span class="line">w = np.zeros([n, n])</span><br><span class="line">for i in range(n):</span><br><span class="line">    for j in range(n):</span><br><span class="line">        temp = G.get_edge_data(i, j, default=0)</span><br><span class="line">        if temp != 0:</span><br><span class="line">            w[i, j] = temp[&quot;weight&quot;]</span><br><span class="line">print(w)</span><br><span class="line"></span><br><span class="line">max_cut = Maxcut(w)</span><br><span class="line">qp = max_cut.to_quadratic_program()</span><br><span class="line">print(qp.prettyprint())</span><br><span class="line"></span><br><span class="line">qubitOp, offset = qp.to_ising()</span><br><span class="line">print(&quot;Offset:&quot;, offset)</span><br><span class="line">print(&quot;Ising Hamiltonian:&quot;)</span><br><span class="line">print(str(qubitOp))</span><br><span class="line"></span><br><span class="line">algorithm_globals.random_seed = 123</span><br><span class="line">seed = 10598</span><br><span class="line"># construct SamplingVQE</span><br><span class="line">optimizer = SPSA(maxiter=300)</span><br><span class="line">ry = TwoLocal(qubitOp.num_qubits, &quot;ry&quot;, &quot;cz&quot;, reps=5, entanglement=&quot;linear&quot;)</span><br><span class="line">vqe = SamplingVQE(sampler=Sampler(), ansatz=ry, optimizer=optimizer)</span><br><span class="line"></span><br><span class="line"># run SamplingVQE</span><br><span class="line">result = vqe.compute_minimum_eigenvalue(qubitOp)</span><br><span class="line"></span><br><span class="line"># print results</span><br><span class="line">x = max_cut.sample_most_likely(result.eigenstate)</span><br><span class="line">print(&quot;energy:&quot;, result.eigenvalue.real)</span><br><span class="line">print(&quot;time:&quot;, result.optimizer_time)</span><br><span class="line">print(&quot;max-cut objective:&quot;, result.eigenvalue.real + offset)</span><br><span class="line">print(&quot;solution:&quot;, x)</span><br><span class="line">print(&quot;solution objective:&quot;, qp.objective.evaluate(x))</span><br><span class="line"></span><br><span class="line"># plot results</span><br><span class="line">colors = [&quot;r&quot; if x[i] == 0 else &quot;c&quot; for i in range(n)]</span><br><span class="line">draw_graph(G, colors, pos)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<p>Sample output:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">energy: -91.93458817618827</span><br><span class="line">time: 143.12175130844116</span><br><span class="line">max-cut objective: -359.4345881761883</span><br><span class="line">solution: [1 0 1 1 0 1 0 1 0 1 1 0]</span><br><span class="line">solution objective: 362.0</span><br></pre></td></tr></table></figure></div>

<p>Here the elist array is the array containing the 41 pairs of points and their associated weights</p>
<p>While calculating weights in our binary, we multiple each weight (distance between 2 points) with a constant value 10 and then round it off </p>
<p><code>solution: [1 0 1 1 0 1 0 1 0 1 1 0]</code> is the result, 12 bits</p>
<p>Similarly, for Katanaverse 1.0, the brute force method is utilised to divide the points.</p>
<br>

<h2 id="6-Formatting-the-result"><a href="#6-Formatting-the-result" class="headerlink" title="#6 Formatting the result"></a>#6 Formatting the result</h2><p>The result is then divided into 2 parts of 6 bits each</p>
<p>Each 6 bits is appended by a 01 (or addition of 64 in decimal to the given bits) at the start and made into a proper 8 bits, thus giving out 2 bytes for each solution</p>
<p>For Katanaverse 0.0, QAOA is performed 24 times and thus there are 24*2 bytes at the end</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">qaoa(elist, &amp;res_bits); </span><br><span class="line">        fin_val[i/6] =  64 + res_bits[0]*1 + res_bits[1]*2 + res_bits[2]*4 + res_bits[3]*8 + res_bits[4]*16 + res_bits[5]*32;</span><br><span class="line">        fin_val[i/6+1] =  64 + res_bits[6]*1 + res_bits[7]*2 + res_bits[8]*4 + res_bits[9]*8 + res_bits[10]*16 + res_bits[11]*32;</span><br></pre></td></tr></table></figure></div>

<p>fin_val holds the final 48 bytes</p>
<br>

<h2 id="7-AES-Encryption"><a href="#7-AES-Encryption" class="headerlink" title="#7 AES Encryption"></a>#7 AES Encryption</h2><p>These 48 bytes are then aes encrypted using the aes_key generated earlier and compared against the encrypted bytes obtained on performing the entire process with the correct flag as input</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">   uint16_t inputSize = sizeof(fin_val)/sizeof(fin_val[0]); // Calculate input size</span><br><span class="line">uint8_t padding = 16 - (inputSize % 16); // Calculate padding size</span><br><span class="line">   uint32_t paddedSize = inputSize + padding; // Calculate new size with padding</span><br><span class="line">   uint8_t *paddedIn = (uint8_t*)malloc(paddedSize); // Allocate memory for padded input</span><br><span class="line"></span><br><span class="line">   if (!paddedIn) &#123;</span><br><span class="line">       // Handle memory allocation failure</span><br><span class="line">       return 1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   memcpy(paddedIn, fin_val, inputSize); // Copy the original input to the new padded input array</span><br><span class="line"></span><br><span class="line">   // Apply PKCS#7 padding</span><br><span class="line">   memset(paddedIn + inputSize, padding, padding);</span><br><span class="line"></span><br><span class="line">   uint8_t out[32];</span><br><span class="line">   uint8_t *w; </span><br><span class="line"></span><br><span class="line">w = aes_init(sizeof(aes_key));</span><br><span class="line">   aes_key_expansion(aes_key, w);</span><br><span class="line"></span><br><span class="line">   aes_cipher_multiple_blocks(paddedIn, out , w, paddedSize);</span><br><span class="line"></span><br><span class="line">   for(int i = 0; i&lt;64;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       if(out[i] != unk_0[i])</span><br><span class="line">       &#123;</span><br><span class="line">           printf(&quot;Nope, that&#x27;s a wrong path&quot;);</span><br><span class="line">           exit(0);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   printf(&quot;That&#x27;s correct!&quot;);</span><br></pre></td></tr></table></figure></div>

<p>Also, note that the source code of the AES encryption can be found <a class="link"   href="https://github.com/dhuertas/AES" >here <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<br>

<p>Ciao !!<br><br></p>
<hr>
]]></content>
      <categories>
        <category>Katanaverse</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>bi0sCTF</tag>
        <tag>quantum</tag>
      </tags>
  </entry>
  <entry>
    <title>Fsvm : ecscCTF 2024</title>
    <url>/2024/04/01/Fsvm-ecscCTF-2024/</url>
    <content><![CDATA[<p>I recently participated in ecscCTF 2024, mainly to try out the reversing challenges from the CTF. Subsequently, a two-part VM challenge caught my attention, called fsvm and fsvm2. </p>
<p>These two use almost the same instruction set and different code dumps for emulation. The aim was to obtain the disassembly as soon as possible.</p>
<p>A huge shoutout to my teammate, <a class="link"   href="https://twitter.com/_retr0ds_" >retr0ds <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, who collaborated with me to solve fsvm by helping me construct the emulator for the task.</p>
<h3 id="Triage"><a href="#Triage" class="headerlink" title="Triage"></a>Triage</h3><p>When we run the <a href="/files/fsvm/vm">binary</a> along with the provided <a href="/files/fsvm/bytecode">bytecode</a>, we encounter a prompt asking for a flag.  </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm/fsvm_1.png"
                      alt="fsvm"
                ></p>
<p>To understand what’s happening under the binary, I turned to IDA Pro for decompilation.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm/fsvm_2.png"
                      alt="fsvm"
                ></p>
<p>The <code>interpret</code> function seems like the program’s heart, as it takes the <code>bytecode</code> file path as its argument. </p>
<p>Before <code>interpret</code> is called, a directory named <code>regs</code> is created to store the values of the VM’s registers and subsequenntly, this directory is deleted at the end of the program.</p>
<p>Within the <code>interpret</code> function lies a switch case structure, handling various opcodes and their corresponding operations. This is where the real magic happens</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm/fsvm_3.png"
                      alt="fsvm"
                ></p>
<p>The bytecode file utilizes only a few specific opcodes, as listed below:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;*&#x27;, &#x27;.&#x27;, &#x27;0&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;E&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;]</span><br></pre></td></tr></table></figure></div>


<h4 id="Some-important-opcodes-among-these-are"><a href="#Some-important-opcodes-among-these-are" class="headerlink" title="Some important opcodes among these are -"></a>Some important opcodes among these are -</h4><ul>
<li>Opcode “Q”: Adds values from two registers and stores the result in a third</li>
<li>Opcode “?”: Concatenates values from two registers and stores the result in a third</li>
<li>Opcode “&gt;”: Converts a register’s value to its character form</li>
<li>Opcode “T”: Negates the number in a specified register</li>
<li>Opcode “S”: Pops out the last character from a register’s value</li>
<li>Opcode “&#x3D;”: Extracts the last byte of a register’s value and stores it in another register </li>
<li>Opcode “*”: Compares values in two registers and jumps to a specific instruction based on the comparison result</li>
</ul>
<p>I explored two approaches to solve this challenge: building a complete VM emulator and utilizing a GDB script.</p>
<h3 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h3><p>This approach involved creating a custom emulator to replicate the behavior of the VM used in the challenge.<br>By examining the <code>interpret</code> function through decompilation, I discovered the presence of eight registers (reg0-reg7).</p>
<h4 id="Emulator"><a href="#Emulator" class="headerlink" title="Emulator"></a>Emulator</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">def main():</span><br><span class="line">    exit_flag = 0</span><br><span class="line">    compared = []</span><br><span class="line">    flag = []</span><br><span class="line">    while True: </span><br><span class="line">        if exit_flag == 1:</span><br><span class="line">            print(&quot;EXIT FLAG WAS SET. PROGRAM EXITED SUCCESSFULLY&quot;)</span><br><span class="line">        print(&quot;Enter 1 to print registers and 2 to run emluator and 3 to restart :&quot;)</span><br><span class="line">        choice = int(input())</span><br><span class="line">        if choice == 1:</span><br><span class="line">            print(&quot;Register 0: &quot;, reg[0])</span><br><span class="line">            print(&quot;Register 1: &quot;, reg[1])</span><br><span class="line">            print(&quot;Register 2: &quot;, reg[2])</span><br><span class="line">            print(&quot;Register 3: &quot;, reg[3])</span><br><span class="line">            print(&quot;Register 4: &quot;, reg[4])</span><br><span class="line">            print(&quot;Register 5: &quot;, reg[5])</span><br><span class="line">            print(&quot;Register 6: &quot;, reg[6])</span><br><span class="line">            print(&quot;Register 7: &quot;, reg[7])</span><br><span class="line">        elif choice == 2:</span><br><span class="line">            fp = open(&#x27;bytecode&#x27;,&#x27;rb&#x27;)</span><br><span class="line">            bytecode = fp.read()</span><br><span class="line">            n = len(bytecode)</span><br><span class="line">            i = 0</span><br><span class="line"></span><br><span class="line">            reg = [&quot;&quot;] * 8</span><br><span class="line">            print(bytecode.count(b&quot;=&quot;))</span><br><span class="line">            while i &lt; n:</span><br><span class="line">                opcode = bytecode[i]</span><br><span class="line"></span><br><span class="line">                match chr(opcode):</span><br><span class="line">                    case &quot;@&quot;:</span><br><span class="line">                        reg[0] = &quot;0&quot;</span><br><span class="line">                        print(&quot;CASE @ | reg[0] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;A&quot;:</span><br><span class="line">                        print(&quot;CASE A | reg[1] = 0&quot;)</span><br><span class="line">                        reg[1] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;B&quot;:</span><br><span class="line">                        print(&quot;CASE B | reg[2] = 0&quot;)</span><br><span class="line">                        reg[2] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line"></span><br><span class="line">                    case &quot;C&quot;:</span><br><span class="line">                        print(&quot;CASE C | reg[3] = 0&quot;)</span><br><span class="line">                        reg[3] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;D&quot;:</span><br><span class="line">                        print(&quot;CASE D | reg[4] = 0&quot;)</span><br><span class="line">                        reg[4] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;E&quot;:</span><br><span class="line">                        print(&quot;CASE E | reg[5] = 0&quot;)</span><br><span class="line">                        reg[5] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;F&quot;:</span><br><span class="line">                        print(&quot;CASE F | reg[6] = 0&quot;)</span><br><span class="line">                        reg[6] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;G&quot;:</span><br><span class="line">                        print(&quot;CASE G | reg[7] = 0&quot;)</span><br><span class="line">                        reg[7] = &quot;0&quot;</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;R&quot;:</span><br><span class="line">                        reg[bytecode[i+1]] = reg[bytecode[i+1]] + &quot;1&quot;</span><br><span class="line">                        print(f&quot;CASE R | reg[&#123;bytecode[i+1]&#125;] = reg[&#123;bytecode[i+1]&#125;] + 1 =========&gt; &#123;reg[bytecode[i+1]]&#125;&quot;)</span><br><span class="line">                        i+=2</span><br><span class="line"></span><br><span class="line">                    case &quot;Q&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        B = reg[bytecode[i+2]]</span><br><span class="line">                        result = int(A) + int(B)</span><br><span class="line">                        reg[bytecode[i+3]] = str(result)</span><br><span class="line">                        print(f&quot;CASE Q | reg[&#123;bytecode[i+3]&#125;] = reg[&#123;bytecode[i+1]&#125;] + reg[&#123;bytecode[i+2]&#125;] ==========&gt; reg[&#123;bytecode[i+3]&#125;] = &#123;A&#125; + &#123;B&#125; =======&gt; &#123;result&#125; &quot;)</span><br><span class="line">                        i+=4</span><br><span class="line">                    case &quot;?&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        B = reg[bytecode[i+2]]</span><br><span class="line"></span><br><span class="line">                        compared.append(B)</span><br><span class="line">                        result = str(A) + str(B)</span><br><span class="line">                        reg[bytecode[i+3]] = result</span><br><span class="line">                        print(f&quot;CASE ? | reg[&#123;bytecode[i+3]&#125;] = reg[&#123;bytecode[i+1]&#125;] + reg[&#123;bytecode[i+2]&#125;] ==========&gt; reg[&#123;bytecode[i+3]&#125;] = &#123;A&#125; + &#123;B&#125; =======&gt; &#123;result&#125; &quot;)</span><br><span class="line">                        i+=4</span><br><span class="line">                    case &quot;&gt;&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        reg[bytecode[i+2]] = chr(int(A))</span><br><span class="line">                        print(f&quot;CASE &gt; | reg[&#123;bytecode[i+2]&#125;] = chr(reg[&#123;bytecode[i+1]&#125;) ==========&gt; reg[&#123;bytecode[i+2]&#125;] = chr(&#123;A&#125;) =======&gt; &#123;chr(int(A))&#125; &quot;)</span><br><span class="line">                        i+=3</span><br><span class="line"></span><br><span class="line">                    case &quot;T&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        if &quot;-&quot; not in A:</span><br><span class="line">                            reg[bytecode[i+1]] = str(&quot;-&quot; + str(ord(A)))</span><br><span class="line">                            print(f&quot;CASE T | reg[&#123;bytecode[i+1]&#125;] = -reg[&#123;bytecode[i+1]&#125;] ==========&gt; reg[&#123;bytecode[i+1]&#125;] = - + &#123;A&#125;&quot;)</span><br><span class="line">                            i+=2</span><br><span class="line">                        else:</span><br><span class="line">                            print(f&quot;CASE T | reg[&#123;bytecode[i+1]&#125;] = -reg[&#123;bytecode[i+1]&#125;] ==========&gt; reg[&#123;bytecode[i+1]&#125;] = &#123;A&#125;&quot;)</span><br><span class="line">                            i += 2</span><br><span class="line"></span><br><span class="line">                    case &quot;U&quot;:</span><br><span class="line">                        A = reg[4]</span><br><span class="line">                        print(f&quot;CASE U | print reg[4] =============&gt; &quot;, A)</span><br><span class="line">                        i+=1</span><br><span class="line">                    </span><br><span class="line">                    case &quot;,&quot;:</span><br><span class="line">                        reg[0] = 0</span><br><span class="line">                        print(&quot;CASE , | reg[0] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;-&quot;:</span><br><span class="line">                        reg[1] = 0</span><br><span class="line">                        print(&quot;CASE - | reg[1] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;.&quot;:</span><br><span class="line">                        reg[2] = 0</span><br><span class="line">                        print(&quot;CASE . | reg[2] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;/&quot;:</span><br><span class="line">                        reg[3] = 0</span><br><span class="line">                        print(&quot;CASE / | reg[3] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;0&quot;:</span><br><span class="line">                        reg[4] = 0</span><br><span class="line">                        print(&quot;CASE 0 | reg[4] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;1&quot;:</span><br><span class="line">                        reg[5] = 0</span><br><span class="line">                        print(&quot;CASE 1 | reg[5] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;2&quot;:</span><br><span class="line">                        reg[6] = 0</span><br><span class="line">                        print(&quot;CASE 2 | reg[6] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;3&quot;:</span><br><span class="line">                        reg[7] = 0</span><br><span class="line">                        print(&quot;CASE 3 | reg[7] = 0&quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    </span><br><span class="line">                    case &quot;V&quot;:</span><br><span class="line">                        reg[0] = input(&quot;Case V | GET INPUT reg[0] =============&gt; &quot;)</span><br><span class="line">                        i+=1</span><br><span class="line">                    case &quot;W&quot;:</span><br><span class="line">                        exit_flag = 1</span><br><span class="line">                    case &quot;=&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        reg[bytecode[i+2]] = A[-1]</span><br><span class="line">                        print(f&quot;CASE = | reg[&#123;bytecode[i+2]&#125;] = reg[&#123;bytecode[i+1]&#125;][-1] ==========&gt; reg[&#123;bytecode[i+2]&#125;] = &#123;A&#125;[-1] =======&gt; &#123;A[-1]&#125; &quot;)</span><br><span class="line">                        flag.append(reg[1])</span><br><span class="line">                        i += 3  </span><br><span class="line">                    case &quot;S&quot;:</span><br><span class="line">                        A = reg[bytecode[i+1]]</span><br><span class="line">                        size_A = len(A)</span><br><span class="line">                        if size_A &gt; 0:</span><br><span class="line">                            A = list(A)</span><br><span class="line">                            A.pop()</span><br><span class="line">                            A = &quot;&quot;.join(A)</span><br><span class="line">                        reg[bytecode[i+1]] = A</span><br><span class="line">                        print(f&quot;CASE S | reg[&#123;bytecode[i+1]&#125;] = reg[&#123;bytecode[i+1]&#125;][:-1] ==========&gt; reg[&#123;bytecode[i+1]&#125;] = &#123;A&#125;[:-1] =======&gt; &#123;A&#125; &quot;)</span><br><span class="line">                        i += 2</span><br><span class="line">                    case &quot;*&quot;:</span><br><span class="line">                        A = reg[5]</span><br><span class="line">                        B = reg[6]</span><br><span class="line">                        C = reg[7]</span><br><span class="line">                        if B != C:</span><br><span class="line">                            i = int(A)</span><br><span class="line">                            print(f&quot;CASE * | i = reg[5] =============&gt; &quot;, i)</span><br><span class="line">                        else:</span><br><span class="line">                            i+=1</span><br><span class="line">                            print(f&quot;CASE * | i = i+1 =============&gt; &quot;, i)</span><br><span class="line"></span><br><span class="line">                    case _:</span><br><span class="line">                        print(&quot;DEFAULT CASE&quot;)</span><br><span class="line">                        print(flag)</span><br><span class="line">                        break</span><br><span class="line">        elif choice == 3:</span><br><span class="line">            exit(0)             </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></div>

<p>Analysis of the disassembled code revealed a byte-by-byte comparison taking place.<br>Basically, the program extracts the last character from your input and compares it against a dynamically generated value stored in reg1 each time the “&#x3D;” opcode is encountered.</p>
<p>To obtain the values that are being compared, we can simply store the value of <code>reg1</code> read at opcode “&#x3D;”. </p>
<p>Output:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEFAULT CASE</span><br><span class="line">[&#x27;125&#x27;, &#x27;-430&#x27;, &#x27;52&#x27;, &#x27;99&#x27;, &#x27;55&#x27;, &#x27;56&#x27;, &#x27;0101&#x27;, &#x27;52&#x27;, &#x27;99&#x27;, &#x27;109&#x27;, &#x27;0118&#x27;, &#x27;0121&#x27;, &#x27;0115&#x27;, &#x27;97&#x27;, &#x27;0101&#x27;, &#x27;0114&#x27;, &#x27;0101&#x27;, &#x27;0112&#x27;, &#x27;0117&#x27;, &#x27;0115&#x27;, &#x27;123&#x27;, &#x27;67&#x27;, &#x27;83&#x27;, &#x27;67&#x27;, &#x27;69&#x27;, &#x27;0110&#x27;, &#x27;0101&#x27;, &#x27;0112&#x27;, &#x27;-419&#x27;]</span><br></pre></td></tr></table></figure></div>

<p>The remaining characters make the flag, with the exception of the two that spit out an unprintable character. At this point, all I did to get the flag was estimate those two characters.</p>
<p>Flag: <code>openECSC&#123;supereasyvmc4e87c4d&#125;</code></p>
<h3 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h3><p>Since we know that on reading the value of <code>reg1</code> during the execution of opcode “&#x3D;” gives out the flag characters that are being checked, we can write a gdb script to set a breakpoint at that point and read the values straight from the <code>reg1</code> file under <code>regs</code> directory created by the binary itself.</p>
<p>This method we utilise the debugging capabilities of GDB to narrow down the computation required to obtain the solution. Our understanding from the previous parts was that the “&#x3D;” opcode extracts the last character from the flag input and compares it against a value stored in <code>reg1</code> which is the correct flag byte. </p>
<p>By crafting a GDB script, we could set a breakpoint at the “&#x3D;” opcode.  Upon reaching this breakpoint, the script would directly read the value stored in <code>reg1</code> within the <code>regs</code> directory created by the program itself.  </p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gdb</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">gdb.execute(&quot;set pagination off&quot;)</span><br><span class="line">gdb.execute(&quot;set disassembly-flavor intel&quot;)</span><br><span class="line">gdb.execute(&quot;file vm&quot;)</span><br><span class="line"></span><br><span class="line">address = 0x0000555555556ECA</span><br><span class="line">gdb.execute(f&quot;b *&#123;address&#125;&quot;)</span><br><span class="line"></span><br><span class="line">gdb.execute(&quot;run bytecode &lt; flag.txt&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(29):</span><br><span class="line">    x = open(r&#x27;regs/reg1&#x27;)</span><br><span class="line">    l = x.read()</span><br><span class="line">    flag += (chr(int(str(l))))</span><br><span class="line">    x.close()</span><br><span class="line">    gdb.execute(&#x27;c&#x27;)</span><br><span class="line"></span><br><span class="line">print(flag[::-1])</span><br><span class="line">print(&quot;Done&quot;)</span><br></pre></td></tr></table></figure></div>

<p>Output:</p>
<p><code>openECSC&#123;supereasyvmc4e87c4d&#125;</code></p>
<br>
Ciao !!

<br>

<hr>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>writeup</tag>
        <tag>linux</tag>
        <tag>reversing</tag>
        <tag>ecscCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Fsvm2 : ecscCTF 2024</title>
    <url>/2024/04/03/Fsvm2-ecscCTF-2024/</url>
    <content><![CDATA[<p>This is the second part of fsvm, if you haven’t checked out the writeup of fsvm yet, then I recommend you to give that a read before reading this. </p>
<p>In this challenge, a distinct set of VM <a href="/files/fsvm2/vm">binary</a> and <a href="/files/fsvm2/bytecode">bytecode</a> are provided with few changes in the instruction set of the VM.</p>
<h3 id="Initial-Triage"><a href="#Initial-Triage" class="headerlink" title="Initial Triage"></a>Initial Triage</h3><p>With the exception of a few opcodes being implemented, the decompilation of this binary appears almost identical.</p>
<p>16 registers are used by this virtual machine (reg0 - regf). </p>
<p>I was unable to properly disassemble the emulator after adding the additional opcodes since it appeared to be off by one or two opcodes. It is faster and more efficient to utilize gdb for disassembly since the bytecode is significantly bigger than the previous bytecode.</p>
<p>Let’s first see which opcodes are utilized in this instance.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;(&#x27;, &#x27;)&#x27;, &#x27;*&#x27;, &#x27;+&#x27;, &#x27;-&#x27;, &#x27;/&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;;&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;?&#x27;, &#x27;@&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;]</span><br></pre></td></tr></table></figure></div>

<h3 id="Opcodes-Resolution"><a href="#Opcodes-Resolution" class="headerlink" title="Opcodes Resolution"></a>Opcodes Resolution</h3><p>Some of the opcodes which are new or implemented for the first time in this bytecode are:</p>
<ul>
<li>Opcode “V”: It reads the flag from a file, and the filename is read from <code>reg0</code></li>
<li>Opcode “(“: Increments the value of PC by the value of <code>rega</code> (Equivalent to Jump instruction in x86)</li>
<li>Opcode “)”: Based on the outcome of the comparison, increases the PC by the value in <code>rega</code> by comparing the values of <code>regb</code> and <code>regc</code>. (Equivalent to JZ instruction in x86)</li>
<li>Opcode “+”: <code>regb</code> and <code>regc</code> undergo a less than operation, and the value of PC is increased in response to the comparison. (Equivalent to JLE instruction in x86)</li>
</ul>
<h3 id="Building-the-GDB-Script"><a href="#Building-the-GDB-Script" class="headerlink" title="Building the GDB Script"></a>Building the GDB Script</h3><p>Following some static and dynamic analysis, I used GDB to write a disassembler. Let’s analyse the <a class="link"   href="https://drive.google.com/file/d/1CPXO7833gePD_kqES89uriynDKYJSb9f/view?usp=drive_link" >disassembly <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> obtained from the first iteration of <a class="link"   href="https://drive.google.com/file/d/1BdP_moTU6WybM5tFzP_pLKAmfyEIcaRY/view?usp=drive_link" >gdb script <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>The beginning of the disassembly reveals that it constructs a filename to read the flag from, and the Opcode “V” reads this filename from <code>reg0</code>. Specifically, the generated filename is <code>flag.txt</code>.</p>
<p>Following this, the code calculates the length of our input flag and saves it in <code>reg1</code>.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_1.png"
                      alt="fsvm2"
                ></p>
<p>This part seems like the length check, because the length of the sample flag that I used in this instance is 48.<br>So now I know for the fact that the length of the flag should be 37.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_2.png"
                      alt="fsvm2"
                ></p>
<br>

<p>Now, let’s re-run the disassembler with the correct flag length.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_3.png"
                      alt="fsvm2"
                ></p>
<p>We can clearly see the difference between the sequence of instructions executed if the flag length is correct</p>
<p>On further analysis, we can observe the following things:</p>
<ul>
<li>A number is generated, here <code>74</code></li>
<li>Last character of the input is extracted and stored in <code>reg1</code></li>
<li>Rest of the flag is stored in <code>reg8</code></li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_4.png"
                      alt="fsvm2"
                ></p>
<ul>
<li>A loop runs for 74 times, and in each iteration it adds the value of the last character to <code>reg2</code></li>
<li>All that would need to be done is multiply the final character of the input by the number that is produced (74).</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_5.png"
                      alt="fsvm2"
                ></p>
<p>Later the entire sum after 74 iterations is stored in <code>reg4</code></p>
<p>The similar thing happens with all 37 characters of the flag.</p>
<p>At the end, the entire result of <code>reg4</code> is compared with a value.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_6.png"
                      alt="fsvm2"
                ></p>
<p>Hence, the First loop looks like this:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag[36]*74 + flag[35]*46 + flag[34]*70 + flag[33]*79 + flag[32]*58 + flag[31]*39 + flag[30]*41 + flag[29]*26 + flag[28]*46 + flag[27]*1 + flag[26]*79 + flag[25]*1 + flag[24]*27 + flag[23]*66 + flag[22]*34 + flag[21]*83 + flag[20]*97 + flag[19]*35 + flag[18]*94 + flag[17]*79 + flag[16]*37 + flag[15]*17 + flag[14]*76 + flag[13]*59 + flag[12]*97 + flag[11]*95 + flag[10]*1 + flag[9]*70 + flag[8]*26 + flag[7]*28 + flag[6]*99 + flag[5]*1 + flag[4]*95 + flag[3]*51 + flag[2]*10 + flag[1]*61 + flag[0]*44 == 172921</span><br></pre></td></tr></table></figure></div>



<p>Since the 2 numbers are not same, the control skips to the end of the program.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/fsvm2/fsvm2_7.png"
                      alt="fsvm2"
                ></p>
<p>Although I was unsure of the number of such comparisons that would occur, I could still bypass that check in order to retrieve all of the accompanying hardcoded integer values and conditions.</p>
<p>The disassembly in that case would look like <a class="link"   href="https://drive.google.com/file/d/101U_o-6jrJ61Nx9Cr6Sp41whsAY1e0wj/view?usp=drive_link" >this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>Additionally, since I am aware of the significance of each instruction, I may print only the cases that include the crucial constant values rather than the complete disassembly.</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">f = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_breakpoint</span>(<span class="params">brk_p</span>):</span><br><span class="line">    gdb.execute(<span class="string">f&quot;b *<span class="subst">&#123;brk_p&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_reg</span>(<span class="params">reg_name</span>):</span><br><span class="line">    x = <span class="built_in">open</span>(reg_name)</span><br><span class="line">    l = x.read()</span><br><span class="line">    x.close()</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gdb_init</span>():</span><br><span class="line">    gdb.execute(<span class="string">&quot;set pagination off&quot;</span>)</span><br><span class="line">    gdb.execute(<span class="string">&quot;set disassembly-flavor intel&quot;</span>)</span><br><span class="line">    gdb.execute(<span class="string">&quot;file vm&quot;</span>)</span><br><span class="line">    add_breakpoint(<span class="number">0x000055555555676F</span>)          <span class="comment">#  opcode address</span></span><br><span class="line">    add_breakpoint(<span class="number">0x0000555555557DAF</span>)          <span class="comment">#  S address</span></span><br><span class="line">    add_breakpoint(<span class="number">0x0000555555556A2A</span>)          <span class="comment">#  *2 address</span></span><br><span class="line">    add_breakpoint(<span class="number">0x0000555555556AD6</span>)          <span class="comment">#  + address</span></span><br><span class="line">    add_breakpoint(<span class="number">0x00005555555571B2</span>)          <span class="comment">#  = address</span></span><br><span class="line"></span><br><span class="line">    gdb.execute(<span class="string">&quot;run bytecode&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_init</span>():</span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;disas_he.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">        fi.write(<span class="string">&#x27;Disassembly:\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>():</span><br><span class="line">    gdb.execute(<span class="string">&#x27;continue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    file_init()</span><br><span class="line">    gdb_init()</span><br><span class="line">    </span><br><span class="line">    counter_s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        x = gdb.execute(<span class="string">&#x27;x/s $rbp-0x272&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">        opcode = x[x.rfind(<span class="string">&#x27;&quot;&#x27;</span>)-<span class="number">1</span>:-<span class="number">2</span>]</span><br><span class="line">        f.append(opcode)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;disas_fin.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">str</span>(opcode) == <span class="string">&#x27;S&#x27;</span>:  </span><br><span class="line">                c()</span><br><span class="line">                reg_2 = gdb.execute(<span class="string">&#x27;x/bx $rbp-0x272&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">                reg_name2 = reg_2[reg_2.rfind(<span class="string">&#x27;0x0&#x27;</span>)+<span class="number">3</span>:]</span><br><span class="line">                reg2 = read_reg(<span class="string">&#x27;regs/reg&#x27;</span>+reg_name2[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> reg2 == <span class="number">0</span>:</span><br><span class="line">                    reg2 = <span class="string">&#x27;0\n&#x27;</span></span><br><span class="line">                fi.write(<span class="string">f&quot;CASE S | reg<span class="subst">&#123;reg_name2[<span class="number">0</span>]&#125;</span> = <span class="subst">&#123;reg2&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">str</span>(opcode) == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                c()</span><br><span class="line">                reg_a = read_reg(<span class="string">&#x27;regs/rega&#x27;</span>)</span><br><span class="line">                reg_b = read_reg(<span class="string">&#x27;regs/regb&#x27;</span>)</span><br><span class="line">                reg_c = read_reg(<span class="string">&#x27;regs/regc&#x27;</span>)</span><br><span class="line">                al = gdb.execute(<span class="string">&#x27;print $al&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27; = 1&#x27;</span> <span class="keyword">in</span> al:</span><br><span class="line">                    counter_s += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> counter_s &gt; <span class="number">38</span>:</span><br><span class="line">                        gdb.execute(<span class="string">&#x27;set $al = 0&#x27;</span>)</span><br><span class="line">                fi.write(<span class="string">f&quot;CASE * | if <span class="subst">&#123;reg_c&#125;</span> != <span class="subst">&#123;reg_b&#125;</span> then PC += <span class="subst">&#123;reg_a&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">str</span>(opcode) == <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                c()</span><br><span class="line">                reg_a = read_reg(<span class="string">&#x27;regs/rega&#x27;</span>)</span><br><span class="line">                reg_b = read_reg(<span class="string">&#x27;regs/regb&#x27;</span>)</span><br><span class="line">                reg_c = read_reg(<span class="string">&#x27;regs/regc&#x27;</span>)</span><br><span class="line">                fi.write(<span class="string">f&quot;CASE + | if <span class="subst">&#123;reg_b.encode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span> &lt; <span class="subst">&#123;reg_c.encode(<span class="string">&#x27;utf-8&#x27;</span>)&#125;</span> then PC += <span class="subst">&#123;reg_a&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">str</span>(opcode) == <span class="string">&#x27;=&#x27;</span>:</span><br><span class="line">                c()</span><br><span class="line">                reg_2 = gdb.execute(<span class="string">&#x27;x/bx $rbp-0x272&#x27;</span>,to_string=<span class="literal">True</span>)</span><br><span class="line">                reg_name2 = reg_2[reg_2.rfind(<span class="string">&#x27;0x0&#x27;</span>)+<span class="number">3</span>:]</span><br><span class="line">                reg2 = read_reg(<span class="string">&#x27;regs/reg&#x27;</span>+reg_name2[<span class="number">0</span>])</span><br><span class="line">                fi.write(<span class="string">f&quot;CASE = | reg<span class="subst">&#123;reg_name2[<span class="number">0</span>]&#125;</span> = <span class="subst">&#123;reg2&#125;</span>\n&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">str</span>(opcode) == <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">                fi.write(<span class="string">&quot;CASE W | Exit\n&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        c() </span><br><span class="line">main()                 </span><br></pre></td></tr></table></figure></div>

<p>The final disassembly would look like <a class="link"   href="https://drive.google.com/file/d/1x7_KKXELLYq2uVMlKIvQ1rAMwmRN-BCL/view?usp=drive_link" >this <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<p>This shows the final number that each loop checks against, as well as all the constants that are multiplied by each character. There are 37 such checks, which aligns with the length of the flag.</p>
<h3 id="Parsing-the-constant-values"><a href="#Parsing-the-constant-values" class="headerlink" title="Parsing the constant values"></a>Parsing the constant values</h3><p>Let’s disassemble that and get all those values.</p>
<p>I eliminated the initial portion of the disassembly that calculates the input flag’s length in order to extract the constants.</p>
<p>Hence, we will perform the extraction on this modified <a class="link"   href="https://drive.google.com/file/d/11dxBl2rpXGscWrLyVBWN27fKplmzPoro/view?usp=drive_link" >file <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extracting the constants</span><br><span class="line"></span><br><span class="line">vals = []</span><br><span class="line">eqt_vals = []</span><br><span class="line"></span><br><span class="line">with open(&#x27;disas_fin.txt&#x27;, &#x27;r&#x27;) as f:</span><br><span class="line">    x = f.readlines()</span><br><span class="line">    for i in range(len(x)):</span><br><span class="line">        if &#x27;CASE S | reg8&#x27; in x[i]:</span><br><span class="line">            jit = x[i+1]</span><br><span class="line">            cons = jit[jit.rfind(&#x27;&lt; b&#x27;)+4:jit.rfind(&#x27;then&#x27;)-2]</span><br><span class="line">            vals.append(int(cons)+1)</span><br><span class="line">        elif &#x27;CASE * | if&#x27; in x[i]:</span><br><span class="line">            jit = x[i]</span><br><span class="line">            dd = jit[jit.rfind(&#x27;!= &#x27;)+3:jit.rfind(&#x27;then&#x27;)-1]</span><br><span class="line">            eqt_vals.append(int(dd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(vals)</span><br><span class="line">print(&quot;\n&quot;)</span><br><span class="line">print(eqt_vals)</span><br><span class="line">print(&quot; vals length:&quot;, len(vals))</span><br><span class="line">print(&quot; eqt_vals length: &quot;, len(eqt_vals))</span><br></pre></td></tr></table></figure></div>

<p>A constraint solver called z3 would be the best option to solve these contraints and obtain the flag.</p>
<p>So let’s format these values in the z3 script</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">vals = [<span class="number">74</span>, <span class="number">46</span>, <span class="number">70</span>, <span class="number">79</span>, <span class="number">58</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">26</span>, <span class="number">46</span>, <span class="number">1</span>, <span class="number">79</span>, <span class="number">1</span>, <span class="number">27</span>, <span class="number">66</span>, <span class="number">34</span>, <span class="number">83</span>, <span class="number">97</span>, <span class="number">35</span>, <span class="number">94</span>, <span class="number">79</span>, <span class="number">37</span>, <span class="number">17</span>, <span class="number">76</span>, <span class="number">59</span>, <span class="number">97</span>, <span class="number">95</span>, <span class="number">1</span>, <span class="number">70</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">95</span>, <span class="number">51</span>, <span class="number">10</span>, <span class="number">61</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">74</span>, <span class="number">4</span>, <span class="number">92</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">42</span>, <span class="number">94</span>, <span class="number">78</span>, <span class="number">44</span>, <span class="number">80</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">27</span>, <span class="number">80</span>, <span class="number">48</span>, <span class="number">38</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">92</span>, <span class="number">98</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">96</span>, <span class="number">71</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">94</span>, <span class="number">72</span>, <span class="number">60</span>, <span class="number">45</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">64</span>, <span class="number">75</span>, <span class="number">63</span>, <span class="number">9</span>, <span class="number">40</span>, <span class="number">87</span>, <span class="number">26</span>, <span class="number">72</span>, <span class="number">30</span>, <span class="number">23</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">66</span>, <span class="number">92</span>, <span class="number">23</span>, <span class="number">34</span>, <span class="number">42</span>, <span class="number">22</span>, <span class="number">7</span>, <span class="number">42</span>, <span class="number">12</span>, <span class="number">79</span>, <span class="number">5</span>, <span class="number">73</span>, <span class="number">27</span>, <span class="number">83</span>, <span class="number">88</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">37</span>, <span class="number">28</span>, <span class="number">65</span>, <span class="number">30</span>, <span class="number">65</span>, <span class="number">67</span>, <span class="number">42</span>, <span class="number">1</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">45</span>, <span class="number">73</span>, <span class="number">29</span>, <span class="number">53</span>, <span class="number">51</span>, <span class="number">90</span>, <span class="number">76</span>, <span class="number">37</span>, <span class="number">44</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">47</span>, <span class="number">85</span>, <span class="number">57</span>, <span class="number">84</span>, <span class="number">5</span>, <span class="number">63</span>, <span class="number">96</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">47</span>, <span class="number">36</span>, <span class="number">25</span>, <span class="number">55</span>, <span class="number">28</span>, <span class="number">92</span>, <span class="number">47</span>, <span class="number">92</span>, <span class="number">48</span>, <span class="number">19</span>, <span class="number">7</span>, <span class="number">29</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">52</span>, <span class="number">43</span>, <span class="number">57</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">70</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">49</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">67</span>, <span class="number">8</span>, <span class="number">87</span>, <span class="number">25</span>, <span class="number">62</span>, <span class="number">6</span>, <span class="number">90</span>, <span class="number">20</span>, <span class="number">92</span>, <span class="number">11</span>, <span class="number">99</span>, <span class="number">39</span>, <span class="number">61</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">31</span>, <span class="number">67</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">17</span>, <span class="number">91</span>, <span class="number">40</span>, <span class="number">70</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">58</span>, <span class="number">18</span>, <span class="number">1</span>, <span class="number">55</span>, <span class="number">22</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">86</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">15</span>, <span class="number">40</span>, <span class="number">65</span>, <span class="number">40</span>, <span class="number">36</span>, <span class="number">70</span>, <span class="number">23</span>, <span class="number">87</span>, <span class="number">32</span>, <span class="number">70</span>, <span class="number">32</span>, <span class="number">92</span>, <span class="number">79</span>, <span class="number">63</span>, <span class="number">99</span>, <span class="number">38</span>, <span class="number">38</span>, <span class="number">84</span>, <span class="number">80</span>, <span class="number">48</span>, <span class="number">100</span>, <span class="number">85</span>, <span class="number">71</span>, <span class="number">46</span>, <span class="number">73</span>, <span class="number">78</span>, <span class="number">96</span>, <span class="number">11</span>, <span class="number">49</span>, <span class="number">6</span>, <span class="number">32</span>, <span class="number">93</span>, <span class="number">74</span>, <span class="number">35</span>, <span class="number">6</span>, <span class="number">37</span>, <span class="number">83</span>, <span class="number">42</span>, <span class="number">86</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">26</span>, <span class="number">93</span>, <span class="number">57</span>, <span class="number">27</span>, <span class="number">55</span>, <span class="number">55</span>, <span class="number">76</span>, <span class="number">43</span>, <span class="number">52</span>, <span class="number">15</span>, <span class="number">41</span>, <span class="number">21</span>, <span class="number">83</span>, <span class="number">40</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">69</span>, <span class="number">73</span>, <span class="number">55</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">83</span>, <span class="number">15</span>, <span class="number">48</span>, <span class="number">22</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">25</span>, <span class="number">35</span>, <span class="number">63</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">39</span>, <span class="number">84</span>, <span class="number">38</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">1</span>, <span class="number">94</span>, <span class="number">62</span>, <span class="number">56</span>, <span class="number">91</span>, <span class="number">9</span>, <span class="number">96</span>, <span class="number">63</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">37</span>, <span class="number">31</span>, <span class="number">5</span>, <span class="number">90</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">77</span>, <span class="number">13</span>, <span class="number">58</span>, <span class="number">8</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">23</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">57</span>, <span class="number">98</span>, <span class="number">11</span>, <span class="number">48</span>, <span class="number">87</span>, <span class="number">87</span>, <span class="number">75</span>, <span class="number">43</span>, <span class="number">51</span>, <span class="number">34</span>, <span class="number">44</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">80</span>, <span class="number">75</span>, <span class="number">10</span>, <span class="number">63</span>, <span class="number">100</span>, <span class="number">44</span>, <span class="number">24</span>, <span class="number">79</span>, <span class="number">69</span>, <span class="number">98</span>, <span class="number">57</span>, <span class="number">48</span>, <span class="number">81</span>, <span class="number">53</span>, <span class="number">29</span>, <span class="number">43</span>, <span class="number">25</span>, <span class="number">14</span>, <span class="number">75</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">7</span>, <span class="number">24</span>, <span class="number">77</span>, <span class="number">52</span>, <span class="number">37</span>, <span class="number">64</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">85</span>, <span class="number">3</span>, <span class="number">73</span>, <span class="number">73</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">95</span>, <span class="number">76</span>, <span class="number">96</span>, <span class="number">42</span>, <span class="number">24</span>, <span class="number">91</span>, <span class="number">89</span>, <span class="number">59</span>, <span class="number">21</span>, <span class="number">65</span>, <span class="number">74</span>, <span class="number">79</span>, <span class="number">10</span>, <span class="number">77</span>, <span class="number">74</span>, <span class="number">58</span>, <span class="number">98</span>, <span class="number">84</span>, <span class="number">39</span>, <span class="number">36</span>, <span class="number">45</span>, <span class="number">86</span>, <span class="number">44</span>, <span class="number">39</span>, <span class="number">90</span>, <span class="number">81</span>, <span class="number">88</span>, <span class="number">33</span>, <span class="number">37</span>, <span class="number">52</span>, <span class="number">70</span>, <span class="number">42</span>, <span class="number">19</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">53</span>, <span class="number">70</span>, <span class="number">8</span>, <span class="number">38</span>, <span class="number">69</span>, <span class="number">58</span>, <span class="number">34</span>, <span class="number">10</span>, <span class="number">47</span>, <span class="number">100</span>, <span class="number">13</span>, <span class="number">90</span>, <span class="number">21</span>, <span class="number">69</span>, <span class="number">36</span>, <span class="number">80</span>, <span class="number">15</span>, <span class="number">31</span>, <span class="number">36</span>, <span class="number">6</span>, <span class="number">95</span>, <span class="number">46</span>, <span class="number">76</span>, <span class="number">35</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">38</span>, <span class="number">25</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">52</span>, <span class="number">94</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">54</span>, <span class="number">84</span>, <span class="number">18</span>, <span class="number">36</span>, <span class="number">23</span>, <span class="number">55</span>, <span class="number">34</span>, <span class="number">22</span>, <span class="number">37</span>, <span class="number">64</span>, <span class="number">50</span>, <span class="number">57</span>, <span class="number">76</span>, <span class="number">63</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">33</span>, <span class="number">92</span>, <span class="number">35</span>, <span class="number">57</span>, <span class="number">83</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">76</span>, <span class="number">79</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">20</span>, <span class="number">28</span>, <span class="number">8</span>, <span class="number">36</span>, <span class="number">70</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">21</span>, <span class="number">7</span>, <span class="number">63</span>, <span class="number">46</span>, <span class="number">5</span>, <span class="number">65</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">17</span>, <span class="number">99</span>, <span class="number">97</span>, <span class="number">22</span>, <span class="number">45</span>, <span class="number">43</span>, <span class="number">90</span>, <span class="number">55</span>, <span class="number">5</span>, <span class="number">95</span>, <span class="number">32</span>, <span class="number">12</span>, <span class="number">82</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">86</span>, <span class="number">77</span>, <span class="number">31</span>, <span class="number">79</span>, <span class="number">61</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">25</span>, <span class="number">37</span>, <span class="number">4</span>, <span class="number">17</span>, <span class="number">47</span>, <span class="number">81</span>, <span class="number">69</span>, <span class="number">94</span>, <span class="number">31</span>, <span class="number">59</span>, <span class="number">91</span>, <span class="number">60</span>, <span class="number">68</span>, <span class="number">30</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">64</span>, <span class="number">62</span>, <span class="number">78</span>, <span class="number">89</span>, <span class="number">34</span>, <span class="number">51</span>, <span class="number">8</span>, <span class="number">72</span>, <span class="number">90</span>, <span class="number">35</span>, <span class="number">62</span>, <span class="number">17</span>, <span class="number">86</span>, <span class="number">2</span>, <span class="number">51</span>, <span class="number">38</span>, <span class="number">61</span>, <span class="number">85</span>, <span class="number">95</span>, <span class="number">55</span>, <span class="number">87</span>, <span class="number">21</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">61</span>, <span class="number">72</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">33</span>, <span class="number">83</span>, <span class="number">9</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">40</span>, <span class="number">14</span>, <span class="number">100</span>, <span class="number">76</span>, <span class="number">54</span>, <span class="number">19</span>, <span class="number">6</span>, <span class="number">91</span>, <span class="number">43</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">38</span>, <span class="number">62</span>, <span class="number">76</span>, <span class="number">29</span>, <span class="number">64</span>, <span class="number">18</span>, <span class="number">51</span>, <span class="number">73</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">97</span>, <span class="number">70</span>, <span class="number">24</span>, <span class="number">56</span>, <span class="number">68</span>, <span class="number">62</span>, <span class="number">57</span>, <span class="number">19</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">67</span>, <span class="number">12</span>, <span class="number">97</span>, <span class="number">20</span>, <span class="number">51</span>, <span class="number">71</span>, <span class="number">83</span>, <span class="number">51</span>, <span class="number">42</span>, <span class="number">21</span>, <span class="number">91</span>, <span class="number">15</span>, <span class="number">81</span>, <span class="number">26</span>, <span class="number">87</span>, <span class="number">25</span>, <span class="number">61</span>, <span class="number">48</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">46</span>, <span class="number">26</span>, <span class="number">88</span>, <span class="number">61</span>, <span class="number">18</span>, <span class="number">52</span>, <span class="number">79</span>, <span class="number">50</span>, <span class="number">86</span>, <span class="number">97</span>, <span class="number">4</span>, <span class="number">76</span>, <span class="number">27</span>, <span class="number">40</span>, <span class="number">63</span>, <span class="number">32</span>, <span class="number">79</span>, <span class="number">45</span>, <span class="number">83</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">58</span>, <span class="number">57</span>, <span class="number">92</span>, <span class="number">47</span>, <span class="number">32</span>, <span class="number">7</span>, <span class="number">68</span>, <span class="number">78</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">98</span>, <span class="number">57</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">69</span>, <span class="number">27</span>, <span class="number">71</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">77</span>, <span class="number">13</span>, <span class="number">95</span>, <span class="number">54</span>, <span class="number">97</span>, <span class="number">52</span>, <span class="number">82</span>, <span class="number">42</span>, <span class="number">86</span>, <span class="number">42</span>, <span class="number">91</span>, <span class="number">87</span>, <span class="number">84</span>, <span class="number">41</span>, <span class="number">57</span>, <span class="number">43</span>, <span class="number">30</span>, <span class="number">98</span>, <span class="number">46</span>, <span class="number">74</span>, <span class="number">22</span>, <span class="number">31</span>, <span class="number">44</span>, <span class="number">28</span>, <span class="number">16</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">92</span>, <span class="number">36</span>, <span class="number">100</span>, <span class="number">98</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">49</span>, <span class="number">70</span>, <span class="number">26</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">35</span>, <span class="number">60</span>, <span class="number">6</span>, <span class="number">71</span>, <span class="number">82</span>, <span class="number">58</span>, <span class="number">80</span>, <span class="number">25</span>, <span class="number">86</span>, <span class="number">74</span>, <span class="number">70</span>, <span class="number">98</span>, <span class="number">12</span>, <span class="number">33</span>, <span class="number">97</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">56</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">52</span>, <span class="number">70</span>, <span class="number">93</span>, <span class="number">26</span>, <span class="number">83</span>, <span class="number">52</span>, <span class="number">5</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">48</span>, <span class="number">11</span>, <span class="number">58</span>, <span class="number">91</span>, <span class="number">57</span>, <span class="number">62</span>, <span class="number">49</span>, <span class="number">47</span>, <span class="number">76</span>, <span class="number">14</span>, <span class="number">71</span>, <span class="number">78</span>, <span class="number">97</span>, <span class="number">14</span>, <span class="number">80</span>, <span class="number">43</span>, <span class="number">98</span>, <span class="number">5</span>, <span class="number">13</span>, <span class="number">40</span>, <span class="number">27</span>, <span class="number">92</span>, <span class="number">82</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">29</span>, <span class="number">42</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">42</span>, <span class="number">42</span>, <span class="number">40</span>, <span class="number">92</span>, <span class="number">53</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">27</span>, <span class="number">62</span>, <span class="number">94</span>, <span class="number">39</span>, <span class="number">1</span>, <span class="number">21</span>, <span class="number">88</span>, <span class="number">39</span>, <span class="number">28</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">16</span>, <span class="number">91</span>, <span class="number">99</span>, <span class="number">66</span>, <span class="number">46</span>, <span class="number">63</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">68</span>, <span class="number">85</span>, <span class="number">62</span>, <span class="number">51</span>, <span class="number">25</span>, <span class="number">69</span>, <span class="number">12</span>, <span class="number">48</span>, <span class="number">30</span>, <span class="number">86</span>, <span class="number">43</span>, <span class="number">14</span>, <span class="number">99</span>, <span class="number">88</span>, <span class="number">94</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">37</span>, <span class="number">21</span>, <span class="number">5</span>, <span class="number">83</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">51</span>, <span class="number">11</span>, <span class="number">57</span>, <span class="number">57</span>, <span class="number">83</span>, <span class="number">69</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">41</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">37</span>, <span class="number">7</span>, <span class="number">99</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">94</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">81</span>, <span class="number">6</span>, <span class="number">35</span>, <span class="number">85</span>, <span class="number">100</span>, <span class="number">36</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">84</span>, <span class="number">63</span>, <span class="number">87</span>, <span class="number">6</span>, <span class="number">72</span>, <span class="number">85</span>, <span class="number">88</span>, <span class="number">33</span>, <span class="number">79</span>, <span class="number">2</span>, <span class="number">63</span>, <span class="number">12</span>, <span class="number">31</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">47</span>, <span class="number">45</span>, <span class="number">48</span>, <span class="number">28</span>, <span class="number">79</span>, <span class="number">9</span>, <span class="number">42</span>, <span class="number">68</span>, <span class="number">35</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">42</span>, <span class="number">15</span>, <span class="number">67</span>, <span class="number">66</span>, <span class="number">47</span>, <span class="number">13</span>, <span class="number">25</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">45</span>, <span class="number">28</span>, <span class="number">10</span>, <span class="number">98</span>, <span class="number">32</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">42</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">68</span>, <span class="number">54</span>, <span class="number">45</span>, <span class="number">62</span>, <span class="number">40</span>, <span class="number">34</span>, <span class="number">88</span>, <span class="number">60</span>, <span class="number">33</span>, <span class="number">16</span>, <span class="number">37</span>, <span class="number">79</span>, <span class="number">14</span>, <span class="number">68</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">10</span>, <span class="number">71</span>, <span class="number">45</span>, <span class="number">18</span>, <span class="number">2</span>, <span class="number">57</span>, <span class="number">72</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">63</span>, <span class="number">43</span>, <span class="number">64</span>, <span class="number">30</span>, <span class="number">92</span>, <span class="number">35</span>, <span class="number">59</span>, <span class="number">54</span>, <span class="number">1</span>, <span class="number">53</span>, <span class="number">38</span>, <span class="number">67</span>, <span class="number">17</span>, <span class="number">55</span>, <span class="number">59</span>, <span class="number">98</span>, <span class="number">41</span>, <span class="number">71</span>, <span class="number">96</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">4</span>, <span class="number">99</span>, <span class="number">7</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">94</span>, <span class="number">24</span>, <span class="number">66</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">89</span>, <span class="number">26</span>, <span class="number">65</span>, <span class="number">23</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">96</span>, <span class="number">63</span>, <span class="number">89</span>, <span class="number">100</span>, <span class="number">51</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">69</span>, <span class="number">65</span>, <span class="number">98</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">96</span>, <span class="number">54</span>, <span class="number">25</span>, <span class="number">97</span>, <span class="number">11</span>, <span class="number">69</span>, <span class="number">52</span>, <span class="number">86</span>, <span class="number">6</span>, <span class="number">69</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">73</span>, <span class="number">33</span>, <span class="number">72</span>, <span class="number">2</span>, <span class="number">87</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">8</span>, <span class="number">100</span>, <span class="number">7</span>, <span class="number">77</span>, <span class="number">48</span>, <span class="number">18</span>, <span class="number">15</span>, <span class="number">68</span>, <span class="number">96</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">100</span>, <span class="number">89</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">48</span>, <span class="number">41</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">55</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">62</span>, <span class="number">96</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">97</span>, <span class="number">18</span>, <span class="number">39</span>, <span class="number">8</span>, <span class="number">23</span>, <span class="number">81</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">77</span>, <span class="number">23</span>, <span class="number">81</span>, <span class="number">45</span>, <span class="number">95</span>, <span class="number">11</span>, <span class="number">45</span>, <span class="number">96</span>, <span class="number">77</span>, <span class="number">21</span>, <span class="number">73</span>, <span class="number">39</span>, <span class="number">64</span>, <span class="number">66</span>, <span class="number">57</span>, <span class="number">40</span>, <span class="number">23</span>, <span class="number">62</span>, <span class="number">46</span>, <span class="number">74</span>, <span class="number">61</span>, <span class="number">77</span>, <span class="number">73</span>, <span class="number">82</span>, <span class="number">30</span>, <span class="number">53</span>, <span class="number">14</span>, <span class="number">66</span>, <span class="number">11</span>, <span class="number">79</span>, <span class="number">99</span>, <span class="number">75</span>, <span class="number">31</span>, <span class="number">58</span>, <span class="number">56</span>, <span class="number">39</span>, <span class="number">34</span>, <span class="number">75</span>, <span class="number">25</span>, <span class="number">6</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">45</span>, <span class="number">35</span>, <span class="number">79</span>, <span class="number">75</span>, <span class="number">59</span>, <span class="number">21</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">58</span>, <span class="number">55</span>, <span class="number">78</span>, <span class="number">28</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">49</span>, <span class="number">37</span>, <span class="number">67</span>, <span class="number">13</span>, <span class="number">44</span>, <span class="number">29</span>, <span class="number">64</span>, <span class="number">97</span>, <span class="number">6</span>, <span class="number">34</span>, <span class="number">49</span>, <span class="number">63</span>, <span class="number">10</span>, <span class="number">32</span>, <span class="number">59</span>, <span class="number">12</span>, <span class="number">68</span>, <span class="number">29</span>, <span class="number">65</span>, <span class="number">52</span>, <span class="number">86</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">57</span>, <span class="number">17</span>, <span class="number">90</span>, <span class="number">98</span>, <span class="number">96</span>, <span class="number">41</span>, <span class="number">92</span>, <span class="number">80</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">41</span>, <span class="number">56</span>, <span class="number">88</span>, <span class="number">22</span>, <span class="number">54</span>, <span class="number">28</span>, <span class="number">26</span>, <span class="number">68</span>, <span class="number">47</span>, <span class="number">91</span>, <span class="number">48</span>, <span class="number">28</span>, <span class="number">3</span>, <span class="number">69</span>, <span class="number">49</span>, <span class="number">78</span>, <span class="number">42</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">34</span>, <span class="number">49</span>, <span class="number">11</span>, <span class="number">71</span>, <span class="number">25</span>, <span class="number">19</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">61</span>, <span class="number">29</span>, <span class="number">39</span>, <span class="number">77</span>, <span class="number">38</span>, <span class="number">99</span>, <span class="number">91</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">3</span>, <span class="number">77</span>, <span class="number">58</span>, <span class="number">65</span>, <span class="number">44</span>, <span class="number">7</span>, <span class="number">33</span>, <span class="number">79</span>, <span class="number">45</span>, <span class="number">51</span>, <span class="number">28</span>, <span class="number">39</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">24</span>, <span class="number">78</span>, <span class="number">10</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">3</span>, <span class="number">70</span>, <span class="number">33</span>, <span class="number">70</span>, <span class="number">25</span>, <span class="number">93</span>, <span class="number">66</span>, <span class="number">24</span>, <span class="number">83</span>, <span class="number">29</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">41</span>, <span class="number">45</span>, <span class="number">21</span>, <span class="number">56</span>, <span class="number">66</span>, <span class="number">14</span>, <span class="number">51</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">26</span>, <span class="number">23</span>, <span class="number">48</span>, <span class="number">2</span>, <span class="number">65</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">98</span>, <span class="number">7</span>, <span class="number">75</span>, <span class="number">85</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">68</span>, <span class="number">25</span>, <span class="number">20</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">27</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">98</span>, <span class="number">94</span>, <span class="number">42</span>, <span class="number">95</span>, <span class="number">80</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">17</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">66</span>, <span class="number">3</span>, <span class="number">31</span>, <span class="number">95</span>, <span class="number">6</span>, <span class="number">99</span>, <span class="number">99</span>, <span class="number">98</span>, <span class="number">85</span>, <span class="number">70</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">65</span>, <span class="number">37</span>, <span class="number">79</span>, <span class="number">44</span>, <span class="number">32</span>, <span class="number">55</span>, <span class="number">6</span>, <span class="number">93</span>, <span class="number">2</span>, <span class="number">39</span>, <span class="number">43</span>, <span class="number">60</span>, <span class="number">85</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">61</span>, <span class="number">36</span>, <span class="number">80</span>, <span class="number">26</span>, <span class="number">44</span>, <span class="number">29</span>, <span class="number">9</span>, <span class="number">82</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">36</span>, <span class="number">80</span>, <span class="number">36</span>, <span class="number">44</span>, <span class="number">24</span>, <span class="number">10</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">51</span>, <span class="number">86</span>, <span class="number">88</span>, <span class="number">95</span>, <span class="number">73</span>, <span class="number">96</span>, <span class="number">13</span>, <span class="number">85</span>, <span class="number">15</span>, <span class="number">87</span>, <span class="number">19</span>, <span class="number">100</span>, <span class="number">51</span>, <span class="number">96</span>, <span class="number">41</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">32</span>, <span class="number">92</span>, <span class="number">29</span>, <span class="number">96</span>, <span class="number">77</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">5</span>, <span class="number">72</span>, <span class="number">84</span>, <span class="number">11</span>, <span class="number">33</span>, <span class="number">87</span>, <span class="number">22</span>, <span class="number">93</span>, <span class="number">100</span>, <span class="number">59</span>, <span class="number">26</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">97</span>, <span class="number">10</span>, <span class="number">86</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">49</span>, <span class="number">59</span>, <span class="number">47</span>, <span class="number">25</span>, <span class="number">57</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">95</span>, <span class="number">29</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">80</span>, <span class="number">8</span>, <span class="number">98</span>, <span class="number">76</span>, <span class="number">90</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">18</span>, <span class="number">26</span>, <span class="number">84</span>, <span class="number">76</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">69</span>, <span class="number">21</span>, <span class="number">42</span>, <span class="number">65</span>, <span class="number">57</span>, <span class="number">71</span>, <span class="number">59</span>, <span class="number">15</span>, <span class="number">70</span>, <span class="number">15</span>, <span class="number">61</span>, <span class="number">73</span>, <span class="number">88</span>, <span class="number">76</span>, <span class="number">2</span>, <span class="number">61</span>, <span class="number">89</span>, <span class="number">47</span>, <span class="number">28</span>, <span class="number">47</span>, <span class="number">52</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">33</span>, <span class="number">28</span>]</span><br><span class="line">eqt_val = [<span class="number">172921</span>, <span class="number">165441</span>, <span class="number">154900</span>, <span class="number">154675</span>, <span class="number">164170</span>, <span class="number">140999</span>, <span class="number">181364</span>, <span class="number">176240</span>, <span class="number">153637</span>, <span class="number">168892</span>, <span class="number">199062</span>, <span class="number">158610</span>, <span class="number">170073</span>, <span class="number">157596</span>, <span class="number">168574</span>, <span class="number">152795</span>, <span class="number">162218</span>, <span class="number">198124</span>, <span class="number">175299</span>, <span class="number">179403</span>, <span class="number">145075</span>, <span class="number">168661</span>, <span class="number">161959</span>, <span class="number">134271</span>, <span class="number">155510</span>, <span class="number">182674</span>, <span class="number">169645</span>, <span class="number">162123</span>, <span class="number">188831</span>, <span class="number">151273</span>, <span class="number">149344</span>, <span class="number">145154</span>, <span class="number">167698</span>, <span class="number">172352</span>, <span class="number">187042</span>, <span class="number">155223</span>, <span class="number">164628</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;from z3 import *\nlength = 37\n\nflag = [BitVec(f&#x27;flag_&#123;i&#125;&#x27;, 8) for i in range(length)]\nsol = Solver()\nfor i in range(length):\n\tsol.add(flag[i] &gt; 30)\n\tsol.add(flag[i] &lt; 127)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sol.add(&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;flag[<span class="subst">&#123;<span class="number">37</span>-i-<span class="number">1</span>&#125;</span>]*<span class="subst">&#123;vals[k*<span class="number">37</span>+i]&#125;</span> + &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\b\b== <span class="subst">&#123;eqt_val[k]&#125;</span>)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;if sol.check()==sat:\n\tm = sol.model()\n\tf = [chr(int(str(m[flag[i]]))) for i in range(len(m))]\n\tprint(&#x27;&#x27;.join(f))\nelse:\n\tprint(&#x27;unsat&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="The-resultant-z3-script"><a href="#The-resultant-z3-script" class="headerlink" title="The resultant z3 script:"></a>The resultant z3 script:</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">length = <span class="number">37</span></span><br><span class="line"></span><br><span class="line">flag = [BitVec(<span class="string">f&#x27;flag_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length)]</span><br><span class="line">sol = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Printable range contraint</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">	sol.add(flag[i] &gt; <span class="number">30</span>)</span><br><span class="line">	sol.add(flag[i] &lt; <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">74</span> + flag[<span class="number">35</span>]*<span class="number">46</span> + flag[<span class="number">34</span>]*<span class="number">70</span> + flag[<span class="number">33</span>]*<span class="number">79</span> + flag[<span class="number">32</span>]*<span class="number">58</span> + flag[<span class="number">31</span>]*<span class="number">39</span> + flag[<span class="number">30</span>]*<span class="number">41</span> + flag[<span class="number">29</span>]*<span class="number">26</span> + flag[<span class="number">28</span>]*<span class="number">46</span> + flag[<span class="number">27</span>]*<span class="number">1</span> + flag[<span class="number">26</span>]*<span class="number">79</span> + flag[<span class="number">25</span>]*<span class="number">1</span> + flag[<span class="number">24</span>]*<span class="number">27</span> + flag[<span class="number">23</span>]*<span class="number">66</span> + flag[<span class="number">22</span>]*<span class="number">34</span> + flag[<span class="number">21</span>]*<span class="number">83</span> + flag[<span class="number">20</span>]*<span class="number">97</span> + flag[<span class="number">19</span>]*<span class="number">35</span> + flag[<span class="number">18</span>]*<span class="number">94</span> + flag[<span class="number">17</span>]*<span class="number">79</span> + flag[<span class="number">16</span>]*<span class="number">37</span> + flag[<span class="number">15</span>]*<span class="number">17</span> + flag[<span class="number">14</span>]*<span class="number">76</span> + flag[<span class="number">13</span>]*<span class="number">59</span> + flag[<span class="number">12</span>]*<span class="number">97</span> + flag[<span class="number">11</span>]*<span class="number">95</span> + flag[<span class="number">10</span>]*<span class="number">1</span> + flag[<span class="number">9</span>]*<span class="number">70</span> + flag[<span class="number">8</span>]*<span class="number">26</span> + flag[<span class="number">7</span>]*<span class="number">28</span> + flag[<span class="number">6</span>]*<span class="number">99</span> + flag[<span class="number">5</span>]*<span class="number">1</span> + flag[<span class="number">4</span>]*<span class="number">95</span> + flag[<span class="number">3</span>]*<span class="number">51</span> + flag[<span class="number">2</span>]*<span class="number">10</span> + flag[<span class="number">1</span>]*<span class="number">61</span> + flag[<span class="number">0</span>]*<span class="number">44</span> == <span class="number">172921</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">48</span> + flag[<span class="number">35</span>]*<span class="number">74</span> + flag[<span class="number">34</span>]*<span class="number">4</span> + flag[<span class="number">33</span>]*<span class="number">92</span> + flag[<span class="number">32</span>]*<span class="number">1</span> + flag[<span class="number">31</span>]*<span class="number">26</span> + flag[<span class="number">30</span>]*<span class="number">42</span> + flag[<span class="number">29</span>]*<span class="number">94</span> + flag[<span class="number">28</span>]*<span class="number">78</span> + flag[<span class="number">27</span>]*<span class="number">44</span> + flag[<span class="number">26</span>]*<span class="number">80</span> + flag[<span class="number">25</span>]*<span class="number">62</span> + flag[<span class="number">24</span>]*<span class="number">61</span> + flag[<span class="number">23</span>]*<span class="number">27</span> + flag[<span class="number">22</span>]*<span class="number">80</span> + flag[<span class="number">21</span>]*<span class="number">48</span> + flag[<span class="number">20</span>]*<span class="number">38</span> + flag[<span class="number">19</span>]*<span class="number">46</span> + flag[<span class="number">18</span>]*<span class="number">32</span> + flag[<span class="number">17</span>]*<span class="number">92</span> + flag[<span class="number">16</span>]*<span class="number">98</span> + flag[<span class="number">15</span>]*<span class="number">66</span> + flag[<span class="number">14</span>]*<span class="number">4</span> + flag[<span class="number">13</span>]*<span class="number">7</span> + flag[<span class="number">12</span>]*<span class="number">6</span> + flag[<span class="number">11</span>]*<span class="number">61</span> + flag[<span class="number">10</span>]*<span class="number">96</span> + flag[<span class="number">9</span>]*<span class="number">71</span> + flag[<span class="number">8</span>]*<span class="number">3</span> + flag[<span class="number">7</span>]*<span class="number">32</span> + flag[<span class="number">6</span>]*<span class="number">70</span> + flag[<span class="number">5</span>]*<span class="number">94</span> + flag[<span class="number">4</span>]*<span class="number">72</span> + flag[<span class="number">3</span>]*<span class="number">60</span> + flag[<span class="number">2</span>]*<span class="number">45</span> + flag[<span class="number">1</span>]*<span class="number">9</span> + flag[<span class="number">0</span>]*<span class="number">45</span> == <span class="number">165441</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">64</span> + flag[<span class="number">35</span>]*<span class="number">75</span> + flag[<span class="number">34</span>]*<span class="number">63</span> + flag[<span class="number">33</span>]*<span class="number">9</span> + flag[<span class="number">32</span>]*<span class="number">40</span> + flag[<span class="number">31</span>]*<span class="number">87</span> + flag[<span class="number">30</span>]*<span class="number">26</span> + flag[<span class="number">29</span>]*<span class="number">72</span> + flag[<span class="number">28</span>]*<span class="number">30</span> + flag[<span class="number">27</span>]*<span class="number">23</span> + flag[<span class="number">26</span>]*<span class="number">49</span> + flag[<span class="number">25</span>]*<span class="number">78</span> + flag[<span class="number">24</span>]*<span class="number">66</span> + flag[<span class="number">23</span>]*<span class="number">92</span> + flag[<span class="number">22</span>]*<span class="number">23</span> + flag[<span class="number">21</span>]*<span class="number">34</span> + flag[<span class="number">20</span>]*<span class="number">42</span> + flag[<span class="number">19</span>]*<span class="number">22</span> + flag[<span class="number">18</span>]*<span class="number">7</span> + flag[<span class="number">17</span>]*<span class="number">42</span> + flag[<span class="number">16</span>]*<span class="number">12</span> + flag[<span class="number">15</span>]*<span class="number">79</span> + flag[<span class="number">14</span>]*<span class="number">5</span> + flag[<span class="number">13</span>]*<span class="number">73</span> + flag[<span class="number">12</span>]*<span class="number">27</span> + flag[<span class="number">11</span>]*<span class="number">83</span> + flag[<span class="number">10</span>]*<span class="number">88</span> + flag[<span class="number">9</span>]*<span class="number">35</span> + flag[<span class="number">8</span>]*<span class="number">1</span> + flag[<span class="number">7</span>]*<span class="number">37</span> + flag[<span class="number">6</span>]*<span class="number">28</span> + flag[<span class="number">5</span>]*<span class="number">65</span> + flag[<span class="number">4</span>]*<span class="number">30</span> + flag[<span class="number">3</span>]*<span class="number">65</span> + flag[<span class="number">2</span>]*<span class="number">67</span> + flag[<span class="number">1</span>]*<span class="number">42</span> + flag[<span class="number">0</span>]*<span class="number">1</span> == <span class="number">154900</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">75</span> + flag[<span class="number">35</span>]*<span class="number">85</span> + flag[<span class="number">34</span>]*<span class="number">45</span> + flag[<span class="number">33</span>]*<span class="number">73</span> + flag[<span class="number">32</span>]*<span class="number">29</span> + flag[<span class="number">31</span>]*<span class="number">53</span> + flag[<span class="number">30</span>]*<span class="number">51</span> + flag[<span class="number">29</span>]*<span class="number">90</span> + flag[<span class="number">28</span>]*<span class="number">76</span> + flag[<span class="number">27</span>]*<span class="number">37</span> + flag[<span class="number">26</span>]*<span class="number">44</span> + flag[<span class="number">25</span>]*<span class="number">7</span> + flag[<span class="number">24</span>]*<span class="number">14</span> + flag[<span class="number">23</span>]*<span class="number">47</span> + flag[<span class="number">22</span>]*<span class="number">85</span> + flag[<span class="number">21</span>]*<span class="number">57</span> + flag[<span class="number">20</span>]*<span class="number">84</span> + flag[<span class="number">19</span>]*<span class="number">5</span> + flag[<span class="number">18</span>]*<span class="number">63</span> + flag[<span class="number">17</span>]*<span class="number">96</span> + flag[<span class="number">16</span>]*<span class="number">34</span> + flag[<span class="number">15</span>]*<span class="number">44</span> + flag[<span class="number">14</span>]*<span class="number">32</span> + flag[<span class="number">13</span>]*<span class="number">47</span> + flag[<span class="number">12</span>]*<span class="number">36</span> + flag[<span class="number">11</span>]*<span class="number">25</span> + flag[<span class="number">10</span>]*<span class="number">55</span> + flag[<span class="number">9</span>]*<span class="number">28</span> + flag[<span class="number">8</span>]*<span class="number">92</span> + flag[<span class="number">7</span>]*<span class="number">47</span> + flag[<span class="number">6</span>]*<span class="number">92</span> + flag[<span class="number">5</span>]*<span class="number">48</span> + flag[<span class="number">4</span>]*<span class="number">19</span> + flag[<span class="number">3</span>]*<span class="number">7</span> + flag[<span class="number">2</span>]*<span class="number">29</span> + flag[<span class="number">1</span>]*<span class="number">2</span> + flag[<span class="number">0</span>]*<span class="number">29</span> == <span class="number">154675</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">52</span> + flag[<span class="number">35</span>]*<span class="number">43</span> + flag[<span class="number">34</span>]*<span class="number">57</span> + flag[<span class="number">33</span>]*<span class="number">4</span> + flag[<span class="number">32</span>]*<span class="number">11</span> + flag[<span class="number">31</span>]*<span class="number">70</span> + flag[<span class="number">30</span>]*<span class="number">95</span> + flag[<span class="number">29</span>]*<span class="number">97</span> + flag[<span class="number">28</span>]*<span class="number">49</span> + flag[<span class="number">27</span>]*<span class="number">84</span> + flag[<span class="number">26</span>]*<span class="number">80</span> + flag[<span class="number">25</span>]*<span class="number">70</span> + flag[<span class="number">24</span>]*<span class="number">58</span> + flag[<span class="number">23</span>]*<span class="number">26</span> + flag[<span class="number">22</span>]*<span class="number">7</span> + flag[<span class="number">21</span>]*<span class="number">8</span> + flag[<span class="number">20</span>]*<span class="number">67</span> + flag[<span class="number">19</span>]*<span class="number">8</span> + flag[<span class="number">18</span>]*<span class="number">87</span> + flag[<span class="number">17</span>]*<span class="number">25</span> + flag[<span class="number">16</span>]*<span class="number">62</span> + flag[<span class="number">15</span>]*<span class="number">6</span> + flag[<span class="number">14</span>]*<span class="number">90</span> + flag[<span class="number">13</span>]*<span class="number">20</span> + flag[<span class="number">12</span>]*<span class="number">92</span> + flag[<span class="number">11</span>]*<span class="number">11</span> + flag[<span class="number">10</span>]*<span class="number">99</span> + flag[<span class="number">9</span>]*<span class="number">39</span> + flag[<span class="number">8</span>]*<span class="number">61</span> + flag[<span class="number">7</span>]*<span class="number">47</span> + flag[<span class="number">6</span>]*<span class="number">55</span> + flag[<span class="number">5</span>]*<span class="number">31</span> + flag[<span class="number">4</span>]*<span class="number">67</span> + flag[<span class="number">3</span>]*<span class="number">37</span> + flag[<span class="number">2</span>]*<span class="number">46</span> + flag[<span class="number">1</span>]*<span class="number">17</span> + flag[<span class="number">0</span>]*<span class="number">91</span> == <span class="number">164170</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">40</span> + flag[<span class="number">35</span>]*<span class="number">70</span> + flag[<span class="number">34</span>]*<span class="number">49</span> + flag[<span class="number">33</span>]*<span class="number">17</span> + flag[<span class="number">32</span>]*<span class="number">31</span> + flag[<span class="number">31</span>]*<span class="number">29</span> + flag[<span class="number">30</span>]*<span class="number">44</span> + flag[<span class="number">29</span>]*<span class="number">32</span> + flag[<span class="number">28</span>]*<span class="number">19</span> + flag[<span class="number">27</span>]*<span class="number">6</span> + flag[<span class="number">26</span>]*<span class="number">16</span> + flag[<span class="number">25</span>]*<span class="number">7</span> + flag[<span class="number">24</span>]*<span class="number">12</span> + flag[<span class="number">23</span>]*<span class="number">58</span> + flag[<span class="number">22</span>]*<span class="number">18</span> + flag[<span class="number">21</span>]*<span class="number">1</span> + flag[<span class="number">20</span>]*<span class="number">55</span> + flag[<span class="number">19</span>]*<span class="number">22</span> + flag[<span class="number">18</span>]*<span class="number">59</span> + flag[<span class="number">17</span>]*<span class="number">12</span> + flag[<span class="number">16</span>]*<span class="number">86</span> + flag[<span class="number">15</span>]*<span class="number">74</span> + flag[<span class="number">14</span>]*<span class="number">76</span> + flag[<span class="number">13</span>]*<span class="number">15</span> + flag[<span class="number">12</span>]*<span class="number">40</span> + flag[<span class="number">11</span>]*<span class="number">65</span> + flag[<span class="number">10</span>]*<span class="number">40</span> + flag[<span class="number">9</span>]*<span class="number">36</span> + flag[<span class="number">8</span>]*<span class="number">70</span> + flag[<span class="number">7</span>]*<span class="number">23</span> + flag[<span class="number">6</span>]*<span class="number">87</span> + flag[<span class="number">5</span>]*<span class="number">32</span> + flag[<span class="number">4</span>]*<span class="number">70</span> + flag[<span class="number">3</span>]*<span class="number">32</span> + flag[<span class="number">2</span>]*<span class="number">92</span> + flag[<span class="number">1</span>]*<span class="number">79</span> + flag[<span class="number">0</span>]*<span class="number">63</span> == <span class="number">140999</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">99</span> + flag[<span class="number">35</span>]*<span class="number">38</span> + flag[<span class="number">34</span>]*<span class="number">38</span> + flag[<span class="number">33</span>]*<span class="number">84</span> + flag[<span class="number">32</span>]*<span class="number">80</span> + flag[<span class="number">31</span>]*<span class="number">48</span> + flag[<span class="number">30</span>]*<span class="number">100</span> + flag[<span class="number">29</span>]*<span class="number">85</span> + flag[<span class="number">28</span>]*<span class="number">71</span> + flag[<span class="number">27</span>]*<span class="number">46</span> + flag[<span class="number">26</span>]*<span class="number">73</span> + flag[<span class="number">25</span>]*<span class="number">78</span> + flag[<span class="number">24</span>]*<span class="number">96</span> + flag[<span class="number">23</span>]*<span class="number">11</span> + flag[<span class="number">22</span>]*<span class="number">49</span> + flag[<span class="number">21</span>]*<span class="number">6</span> + flag[<span class="number">20</span>]*<span class="number">32</span> + flag[<span class="number">19</span>]*<span class="number">93</span> + flag[<span class="number">18</span>]*<span class="number">74</span> + flag[<span class="number">17</span>]*<span class="number">35</span> + flag[<span class="number">16</span>]*<span class="number">6</span> + flag[<span class="number">15</span>]*<span class="number">37</span> + flag[<span class="number">14</span>]*<span class="number">83</span> + flag[<span class="number">13</span>]*<span class="number">42</span> + flag[<span class="number">12</span>]*<span class="number">86</span> + flag[<span class="number">11</span>]*<span class="number">12</span> + flag[<span class="number">10</span>]*<span class="number">10</span> + flag[<span class="number">9</span>]*<span class="number">3</span> + flag[<span class="number">8</span>]*<span class="number">26</span> + flag[<span class="number">7</span>]*<span class="number">93</span> + flag[<span class="number">6</span>]*<span class="number">57</span> + flag[<span class="number">5</span>]*<span class="number">27</span> + flag[<span class="number">4</span>]*<span class="number">55</span> + flag[<span class="number">3</span>]*<span class="number">55</span> + flag[<span class="number">2</span>]*<span class="number">76</span> + flag[<span class="number">1</span>]*<span class="number">43</span> + flag[<span class="number">0</span>]*<span class="number">52</span> == <span class="number">181364</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">15</span> + flag[<span class="number">35</span>]*<span class="number">41</span> + flag[<span class="number">34</span>]*<span class="number">21</span> + flag[<span class="number">33</span>]*<span class="number">83</span> + flag[<span class="number">32</span>]*<span class="number">40</span> + flag[<span class="number">31</span>]*<span class="number">1</span> + flag[<span class="number">30</span>]*<span class="number">24</span> + flag[<span class="number">29</span>]*<span class="number">69</span> + flag[<span class="number">28</span>]*<span class="number">73</span> + flag[<span class="number">27</span>]*<span class="number">55</span> + flag[<span class="number">26</span>]*<span class="number">88</span> + flag[<span class="number">25</span>]*<span class="number">94</span> + flag[<span class="number">24</span>]*<span class="number">83</span> + flag[<span class="number">23</span>]*<span class="number">15</span> + flag[<span class="number">22</span>]*<span class="number">48</span> + flag[<span class="number">21</span>]*<span class="number">22</span> + flag[<span class="number">20</span>]*<span class="number">41</span> + flag[<span class="number">19</span>]*<span class="number">58</span> + flag[<span class="number">18</span>]*<span class="number">25</span> + flag[<span class="number">17</span>]*<span class="number">35</span> + flag[<span class="number">16</span>]*<span class="number">63</span> + flag[<span class="number">15</span>]*<span class="number">63</span> + flag[<span class="number">14</span>]*<span class="number">45</span> + flag[<span class="number">13</span>]*<span class="number">39</span> + flag[<span class="number">12</span>]*<span class="number">84</span> + flag[<span class="number">11</span>]*<span class="number">38</span> + flag[<span class="number">10</span>]*<span class="number">83</span> + flag[<span class="number">9</span>]*<span class="number">84</span> + flag[<span class="number">8</span>]*<span class="number">30</span> + flag[<span class="number">7</span>]*<span class="number">80</span> + flag[<span class="number">6</span>]*<span class="number">1</span> + flag[<span class="number">5</span>]*<span class="number">94</span> + flag[<span class="number">4</span>]*<span class="number">62</span> + flag[<span class="number">3</span>]*<span class="number">56</span> + flag[<span class="number">2</span>]*<span class="number">91</span> + flag[<span class="number">1</span>]*<span class="number">9</span> + flag[<span class="number">0</span>]*<span class="number">96</span> == <span class="number">176240</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">63</span> + flag[<span class="number">35</span>]*<span class="number">3</span> + flag[<span class="number">34</span>]*<span class="number">3</span> + flag[<span class="number">33</span>]*<span class="number">37</span> + flag[<span class="number">32</span>]*<span class="number">31</span> + flag[<span class="number">31</span>]*<span class="number">5</span> + flag[<span class="number">30</span>]*<span class="number">90</span> + flag[<span class="number">29</span>]*<span class="number">79</span> + flag[<span class="number">28</span>]*<span class="number">10</span> + flag[<span class="number">27</span>]*<span class="number">35</span> + flag[<span class="number">26</span>]*<span class="number">35</span> + flag[<span class="number">25</span>]*<span class="number">77</span> + flag[<span class="number">24</span>]*<span class="number">13</span> + flag[<span class="number">23</span>]*<span class="number">58</span> + flag[<span class="number">22</span>]*<span class="number">8</span> + flag[<span class="number">21</span>]*<span class="number">37</span> + flag[<span class="number">20</span>]*<span class="number">29</span> + flag[<span class="number">19</span>]*<span class="number">23</span> + flag[<span class="number">18</span>]*<span class="number">61</span> + flag[<span class="number">17</span>]*<span class="number">83</span> + flag[<span class="number">16</span>]*<span class="number">9</span> + flag[<span class="number">15</span>]*<span class="number">12</span> + flag[<span class="number">14</span>]*<span class="number">95</span> + flag[<span class="number">13</span>]*<span class="number">95</span> + flag[<span class="number">12</span>]*<span class="number">57</span> + flag[<span class="number">11</span>]*<span class="number">98</span> + flag[<span class="number">10</span>]*<span class="number">11</span> + flag[<span class="number">9</span>]*<span class="number">48</span> + flag[<span class="number">8</span>]*<span class="number">87</span> + flag[<span class="number">7</span>]*<span class="number">87</span> + flag[<span class="number">6</span>]*<span class="number">75</span> + flag[<span class="number">5</span>]*<span class="number">43</span> + flag[<span class="number">4</span>]*<span class="number">51</span> + flag[<span class="number">3</span>]*<span class="number">34</span> + flag[<span class="number">2</span>]*<span class="number">44</span> + flag[<span class="number">1</span>]*<span class="number">51</span> + flag[<span class="number">0</span>]*<span class="number">6</span> == <span class="number">153637</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">80</span> + flag[<span class="number">35</span>]*<span class="number">75</span> + flag[<span class="number">34</span>]*<span class="number">10</span> + flag[<span class="number">33</span>]*<span class="number">63</span> + flag[<span class="number">32</span>]*<span class="number">100</span> + flag[<span class="number">31</span>]*<span class="number">44</span> + flag[<span class="number">30</span>]*<span class="number">24</span> + flag[<span class="number">29</span>]*<span class="number">79</span> + flag[<span class="number">28</span>]*<span class="number">69</span> + flag[<span class="number">27</span>]*<span class="number">98</span> + flag[<span class="number">26</span>]*<span class="number">57</span> + flag[<span class="number">25</span>]*<span class="number">48</span> + flag[<span class="number">24</span>]*<span class="number">81</span> + flag[<span class="number">23</span>]*<span class="number">53</span> + flag[<span class="number">22</span>]*<span class="number">29</span> + flag[<span class="number">21</span>]*<span class="number">43</span> + flag[<span class="number">20</span>]*<span class="number">25</span> + flag[<span class="number">19</span>]*<span class="number">14</span> + flag[<span class="number">18</span>]*<span class="number">75</span> + flag[<span class="number">17</span>]*<span class="number">11</span> + flag[<span class="number">16</span>]*<span class="number">1</span> + flag[<span class="number">15</span>]*<span class="number">26</span> + flag[<span class="number">14</span>]*<span class="number">7</span> + flag[<span class="number">13</span>]*<span class="number">24</span> + flag[<span class="number">12</span>]*<span class="number">77</span> + flag[<span class="number">11</span>]*<span class="number">52</span> + flag[<span class="number">10</span>]*<span class="number">37</span> + flag[<span class="number">9</span>]*<span class="number">64</span> + flag[<span class="number">8</span>]*<span class="number">43</span> + flag[<span class="number">7</span>]*<span class="number">45</span> + flag[<span class="number">6</span>]*<span class="number">85</span> + flag[<span class="number">5</span>]*<span class="number">3</span> + flag[<span class="number">4</span>]*<span class="number">73</span> + flag[<span class="number">3</span>]*<span class="number">73</span> + flag[<span class="number">2</span>]*<span class="number">15</span> + flag[<span class="number">1</span>]*<span class="number">55</span> + flag[<span class="number">0</span>]*<span class="number">95</span> == <span class="number">168892</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">76</span> + flag[<span class="number">35</span>]*<span class="number">96</span> + flag[<span class="number">34</span>]*<span class="number">42</span> + flag[<span class="number">33</span>]*<span class="number">24</span> + flag[<span class="number">32</span>]*<span class="number">91</span> + flag[<span class="number">31</span>]*<span class="number">89</span> + flag[<span class="number">30</span>]*<span class="number">59</span> + flag[<span class="number">29</span>]*<span class="number">21</span> + flag[<span class="number">28</span>]*<span class="number">65</span> + flag[<span class="number">27</span>]*<span class="number">74</span> + flag[<span class="number">26</span>]*<span class="number">79</span> + flag[<span class="number">25</span>]*<span class="number">10</span> + flag[<span class="number">24</span>]*<span class="number">77</span> + flag[<span class="number">23</span>]*<span class="number">74</span> + flag[<span class="number">22</span>]*<span class="number">58</span> + flag[<span class="number">21</span>]*<span class="number">98</span> + flag[<span class="number">20</span>]*<span class="number">84</span> + flag[<span class="number">19</span>]*<span class="number">39</span> + flag[<span class="number">18</span>]*<span class="number">36</span> + flag[<span class="number">17</span>]*<span class="number">45</span> + flag[<span class="number">16</span>]*<span class="number">86</span> + flag[<span class="number">15</span>]*<span class="number">44</span> + flag[<span class="number">14</span>]*<span class="number">39</span> + flag[<span class="number">13</span>]*<span class="number">90</span> + flag[<span class="number">12</span>]*<span class="number">81</span> + flag[<span class="number">11</span>]*<span class="number">88</span> + flag[<span class="number">10</span>]*<span class="number">33</span> + flag[<span class="number">9</span>]*<span class="number">37</span> + flag[<span class="number">8</span>]*<span class="number">52</span> + flag[<span class="number">7</span>]*<span class="number">70</span> + flag[<span class="number">6</span>]*<span class="number">42</span> + flag[<span class="number">5</span>]*<span class="number">19</span> + flag[<span class="number">4</span>]*<span class="number">39</span> + flag[<span class="number">3</span>]*<span class="number">77</span> + flag[<span class="number">2</span>]*<span class="number">53</span> + flag[<span class="number">1</span>]*<span class="number">70</span> + flag[<span class="number">0</span>]*<span class="number">8</span> == <span class="number">199062</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">38</span> + flag[<span class="number">35</span>]*<span class="number">69</span> + flag[<span class="number">34</span>]*<span class="number">58</span> + flag[<span class="number">33</span>]*<span class="number">34</span> + flag[<span class="number">32</span>]*<span class="number">10</span> + flag[<span class="number">31</span>]*<span class="number">47</span> + flag[<span class="number">30</span>]*<span class="number">100</span> + flag[<span class="number">29</span>]*<span class="number">13</span> + flag[<span class="number">28</span>]*<span class="number">90</span> + flag[<span class="number">27</span>]*<span class="number">21</span> + flag[<span class="number">26</span>]*<span class="number">69</span> + flag[<span class="number">25</span>]*<span class="number">36</span> + flag[<span class="number">24</span>]*<span class="number">80</span> + flag[<span class="number">23</span>]*<span class="number">15</span> + flag[<span class="number">22</span>]*<span class="number">31</span> + flag[<span class="number">21</span>]*<span class="number">36</span> + flag[<span class="number">20</span>]*<span class="number">6</span> + flag[<span class="number">19</span>]*<span class="number">95</span> + flag[<span class="number">18</span>]*<span class="number">46</span> + flag[<span class="number">17</span>]*<span class="number">76</span> + flag[<span class="number">16</span>]*<span class="number">35</span> + flag[<span class="number">15</span>]*<span class="number">30</span> + flag[<span class="number">14</span>]*<span class="number">45</span> + flag[<span class="number">13</span>]*<span class="number">38</span> + flag[<span class="number">12</span>]*<span class="number">25</span> + flag[<span class="number">11</span>]*<span class="number">9</span> + flag[<span class="number">10</span>]*<span class="number">13</span> + flag[<span class="number">9</span>]*<span class="number">52</span> + flag[<span class="number">8</span>]*<span class="number">94</span> + flag[<span class="number">7</span>]*<span class="number">99</span> + flag[<span class="number">6</span>]*<span class="number">100</span> + flag[<span class="number">5</span>]*<span class="number">54</span> + flag[<span class="number">4</span>]*<span class="number">84</span> + flag[<span class="number">3</span>]*<span class="number">18</span> + flag[<span class="number">2</span>]*<span class="number">36</span> + flag[<span class="number">1</span>]*<span class="number">23</span> + flag[<span class="number">0</span>]*<span class="number">55</span> == <span class="number">158610</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">34</span> + flag[<span class="number">35</span>]*<span class="number">22</span> + flag[<span class="number">34</span>]*<span class="number">37</span> + flag[<span class="number">33</span>]*<span class="number">64</span> + flag[<span class="number">32</span>]*<span class="number">50</span> + flag[<span class="number">31</span>]*<span class="number">57</span> + flag[<span class="number">30</span>]*<span class="number">76</span> + flag[<span class="number">29</span>]*<span class="number">63</span> + flag[<span class="number">28</span>]*<span class="number">99</span> + flag[<span class="number">27</span>]*<span class="number">99</span> + flag[<span class="number">26</span>]*<span class="number">33</span> + flag[<span class="number">25</span>]*<span class="number">92</span> + flag[<span class="number">24</span>]*<span class="number">35</span> + flag[<span class="number">23</span>]*<span class="number">57</span> + flag[<span class="number">22</span>]*<span class="number">83</span> + flag[<span class="number">21</span>]*<span class="number">30</span> + flag[<span class="number">20</span>]*<span class="number">86</span> + flag[<span class="number">19</span>]*<span class="number">76</span> + flag[<span class="number">18</span>]*<span class="number">79</span> + flag[<span class="number">17</span>]*<span class="number">48</span> + flag[<span class="number">16</span>]*<span class="number">54</span> + flag[<span class="number">15</span>]*<span class="number">20</span> + flag[<span class="number">14</span>]*<span class="number">28</span> + flag[<span class="number">13</span>]*<span class="number">8</span> + flag[<span class="number">12</span>]*<span class="number">36</span> + flag[<span class="number">11</span>]*<span class="number">70</span> + flag[<span class="number">10</span>]*<span class="number">83</span> + flag[<span class="number">9</span>]*<span class="number">89</span> + flag[<span class="number">8</span>]*<span class="number">21</span> + flag[<span class="number">7</span>]*<span class="number">7</span> + flag[<span class="number">6</span>]*<span class="number">63</span> + flag[<span class="number">5</span>]*<span class="number">46</span> + flag[<span class="number">4</span>]*<span class="number">5</span> + flag[<span class="number">3</span>]*<span class="number">65</span> + flag[<span class="number">2</span>]*<span class="number">42</span> + flag[<span class="number">1</span>]*<span class="number">58</span> + flag[<span class="number">0</span>]*<span class="number">17</span> == <span class="number">170073</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">99</span> + flag[<span class="number">35</span>]*<span class="number">97</span> + flag[<span class="number">34</span>]*<span class="number">22</span> + flag[<span class="number">33</span>]*<span class="number">45</span> + flag[<span class="number">32</span>]*<span class="number">43</span> + flag[<span class="number">31</span>]*<span class="number">90</span> + flag[<span class="number">30</span>]*<span class="number">55</span> + flag[<span class="number">29</span>]*<span class="number">5</span> + flag[<span class="number">28</span>]*<span class="number">95</span> + flag[<span class="number">27</span>]*<span class="number">32</span> + flag[<span class="number">26</span>]*<span class="number">12</span> + flag[<span class="number">25</span>]*<span class="number">82</span> + flag[<span class="number">24</span>]*<span class="number">15</span> + flag[<span class="number">23</span>]*<span class="number">2</span> + flag[<span class="number">22</span>]*<span class="number">86</span> + flag[<span class="number">21</span>]*<span class="number">77</span> + flag[<span class="number">20</span>]*<span class="number">31</span> + flag[<span class="number">19</span>]*<span class="number">79</span> + flag[<span class="number">18</span>]*<span class="number">61</span> + flag[<span class="number">17</span>]*<span class="number">1</span> + flag[<span class="number">16</span>]*<span class="number">1</span> + flag[<span class="number">15</span>]*<span class="number">32</span> + flag[<span class="number">14</span>]*<span class="number">25</span> + flag[<span class="number">13</span>]*<span class="number">37</span> + flag[<span class="number">12</span>]*<span class="number">4</span> + flag[<span class="number">11</span>]*<span class="number">17</span> + flag[<span class="number">10</span>]*<span class="number">47</span> + flag[<span class="number">9</span>]*<span class="number">81</span> + flag[<span class="number">8</span>]*<span class="number">69</span> + flag[<span class="number">7</span>]*<span class="number">94</span> + flag[<span class="number">6</span>]*<span class="number">31</span> + flag[<span class="number">5</span>]*<span class="number">59</span> + flag[<span class="number">4</span>]*<span class="number">91</span> + flag[<span class="number">3</span>]*<span class="number">60</span> + flag[<span class="number">2</span>]*<span class="number">68</span> + flag[<span class="number">1</span>]*<span class="number">30</span> + flag[<span class="number">0</span>]*<span class="number">15</span> == <span class="number">157596</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">100</span> + flag[<span class="number">35</span>]*<span class="number">64</span> + flag[<span class="number">34</span>]*<span class="number">62</span> + flag[<span class="number">33</span>]*<span class="number">78</span> + flag[<span class="number">32</span>]*<span class="number">89</span> + flag[<span class="number">31</span>]*<span class="number">34</span> + flag[<span class="number">30</span>]*<span class="number">51</span> + flag[<span class="number">29</span>]*<span class="number">8</span> + flag[<span class="number">28</span>]*<span class="number">72</span> + flag[<span class="number">27</span>]*<span class="number">90</span> + flag[<span class="number">26</span>]*<span class="number">35</span> + flag[<span class="number">25</span>]*<span class="number">62</span> + flag[<span class="number">24</span>]*<span class="number">17</span> + flag[<span class="number">23</span>]*<span class="number">86</span> + flag[<span class="number">22</span>]*<span class="number">2</span> + flag[<span class="number">21</span>]*<span class="number">51</span> + flag[<span class="number">20</span>]*<span class="number">38</span> + flag[<span class="number">19</span>]*<span class="number">61</span> + flag[<span class="number">18</span>]*<span class="number">85</span> + flag[<span class="number">17</span>]*<span class="number">95</span> + flag[<span class="number">16</span>]*<span class="number">55</span> + flag[<span class="number">15</span>]*<span class="number">87</span> + flag[<span class="number">14</span>]*<span class="number">21</span> + flag[<span class="number">13</span>]*<span class="number">18</span> + flag[<span class="number">12</span>]*<span class="number">19</span> + flag[<span class="number">11</span>]*<span class="number">11</span> + flag[<span class="number">10</span>]*<span class="number">61</span> + flag[<span class="number">9</span>]*<span class="number">72</span> + flag[<span class="number">8</span>]*<span class="number">38</span> + flag[<span class="number">7</span>]*<span class="number">30</span> + flag[<span class="number">6</span>]*<span class="number">33</span> + flag[<span class="number">5</span>]*<span class="number">83</span> + flag[<span class="number">4</span>]*<span class="number">9</span> + flag[<span class="number">3</span>]*<span class="number">40</span> + flag[<span class="number">2</span>]*<span class="number">60</span> + flag[<span class="number">1</span>]*<span class="number">40</span> + flag[<span class="number">0</span>]*<span class="number">14</span> == <span class="number">168574</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">100</span> + flag[<span class="number">35</span>]*<span class="number">76</span> + flag[<span class="number">34</span>]*<span class="number">54</span> + flag[<span class="number">33</span>]*<span class="number">19</span> + flag[<span class="number">32</span>]*<span class="number">6</span> + flag[<span class="number">31</span>]*<span class="number">91</span> + flag[<span class="number">30</span>]*<span class="number">43</span> + flag[<span class="number">29</span>]*<span class="number">13</span> + flag[<span class="number">28</span>]*<span class="number">7</span> + flag[<span class="number">27</span>]*<span class="number">38</span> + flag[<span class="number">26</span>]*<span class="number">62</span> + flag[<span class="number">25</span>]*<span class="number">76</span> + flag[<span class="number">24</span>]*<span class="number">29</span> + flag[<span class="number">23</span>]*<span class="number">64</span> + flag[<span class="number">22</span>]*<span class="number">18</span> + flag[<span class="number">21</span>]*<span class="number">51</span> + flag[<span class="number">20</span>]*<span class="number">73</span> + flag[<span class="number">19</span>]*<span class="number">14</span> + flag[<span class="number">18</span>]*<span class="number">7</span> + flag[<span class="number">17</span>]*<span class="number">97</span> + flag[<span class="number">16</span>]*<span class="number">70</span> + flag[<span class="number">15</span>]*<span class="number">24</span> + flag[<span class="number">14</span>]*<span class="number">56</span> + flag[<span class="number">13</span>]*<span class="number">68</span> + flag[<span class="number">12</span>]*<span class="number">62</span> + flag[<span class="number">11</span>]*<span class="number">57</span> + flag[<span class="number">10</span>]*<span class="number">19</span> + flag[<span class="number">9</span>]*<span class="number">46</span> + flag[<span class="number">8</span>]*<span class="number">48</span> + flag[<span class="number">7</span>]*<span class="number">18</span> + flag[<span class="number">6</span>]*<span class="number">9</span> + flag[<span class="number">5</span>]*<span class="number">22</span> + flag[<span class="number">4</span>]*<span class="number">67</span> + flag[<span class="number">3</span>]*<span class="number">12</span> + flag[<span class="number">2</span>]*<span class="number">97</span> + flag[<span class="number">1</span>]*<span class="number">20</span> + flag[<span class="number">0</span>]*<span class="number">51</span> == <span class="number">152795</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">71</span> + flag[<span class="number">35</span>]*<span class="number">83</span> + flag[<span class="number">34</span>]*<span class="number">51</span> + flag[<span class="number">33</span>]*<span class="number">42</span> + flag[<span class="number">32</span>]*<span class="number">21</span> + flag[<span class="number">31</span>]*<span class="number">91</span> + flag[<span class="number">30</span>]*<span class="number">15</span> + flag[<span class="number">29</span>]*<span class="number">81</span> + flag[<span class="number">28</span>]*<span class="number">26</span> + flag[<span class="number">27</span>]*<span class="number">87</span> + flag[<span class="number">26</span>]*<span class="number">25</span> + flag[<span class="number">25</span>]*<span class="number">61</span> + flag[<span class="number">24</span>]*<span class="number">48</span> + flag[<span class="number">23</span>]*<span class="number">1</span> + flag[<span class="number">22</span>]*<span class="number">50</span> + flag[<span class="number">21</span>]*<span class="number">42</span> + flag[<span class="number">20</span>]*<span class="number">46</span> + flag[<span class="number">19</span>]*<span class="number">26</span> + flag[<span class="number">18</span>]*<span class="number">88</span> + flag[<span class="number">17</span>]*<span class="number">61</span> + flag[<span class="number">16</span>]*<span class="number">18</span> + flag[<span class="number">15</span>]*<span class="number">52</span> + flag[<span class="number">14</span>]*<span class="number">79</span> + flag[<span class="number">13</span>]*<span class="number">50</span> + flag[<span class="number">12</span>]*<span class="number">86</span> + flag[<span class="number">11</span>]*<span class="number">97</span> + flag[<span class="number">10</span>]*<span class="number">4</span> + flag[<span class="number">9</span>]*<span class="number">76</span> + flag[<span class="number">8</span>]*<span class="number">27</span> + flag[<span class="number">7</span>]*<span class="number">40</span> + flag[<span class="number">6</span>]*<span class="number">63</span> + flag[<span class="number">5</span>]*<span class="number">32</span> + flag[<span class="number">4</span>]*<span class="number">79</span> + flag[<span class="number">3</span>]*<span class="number">45</span> + flag[<span class="number">2</span>]*<span class="number">83</span> + flag[<span class="number">1</span>]*<span class="number">2</span> + flag[<span class="number">0</span>]*<span class="number">7</span> == <span class="number">162218</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">47</span> + flag[<span class="number">35</span>]*<span class="number">32</span> + flag[<span class="number">34</span>]*<span class="number">58</span> + flag[<span class="number">33</span>]*<span class="number">57</span> + flag[<span class="number">32</span>]*<span class="number">92</span> + flag[<span class="number">31</span>]*<span class="number">47</span> + flag[<span class="number">30</span>]*<span class="number">32</span> + flag[<span class="number">29</span>]*<span class="number">7</span> + flag[<span class="number">28</span>]*<span class="number">68</span> + flag[<span class="number">27</span>]*<span class="number">78</span> + flag[<span class="number">26</span>]*<span class="number">50</span> + flag[<span class="number">25</span>]*<span class="number">52</span> + flag[<span class="number">24</span>]*<span class="number">73</span> + flag[<span class="number">23</span>]*<span class="number">98</span> + flag[<span class="number">22</span>]*<span class="number">57</span> + flag[<span class="number">21</span>]*<span class="number">29</span> + flag[<span class="number">20</span>]*<span class="number">15</span> + flag[<span class="number">19</span>]*<span class="number">22</span> + flag[<span class="number">18</span>]*<span class="number">69</span> + flag[<span class="number">17</span>]*<span class="number">27</span> + flag[<span class="number">16</span>]*<span class="number">71</span> + flag[<span class="number">15</span>]*<span class="number">57</span> + flag[<span class="number">14</span>]*<span class="number">59</span> + flag[<span class="number">13</span>]*<span class="number">77</span> + flag[<span class="number">12</span>]*<span class="number">13</span> + flag[<span class="number">11</span>]*<span class="number">95</span> + flag[<span class="number">10</span>]*<span class="number">54</span> + flag[<span class="number">9</span>]*<span class="number">97</span> + flag[<span class="number">8</span>]*<span class="number">52</span> + flag[<span class="number">7</span>]*<span class="number">82</span> + flag[<span class="number">6</span>]*<span class="number">42</span> + flag[<span class="number">5</span>]*<span class="number">86</span> + flag[<span class="number">4</span>]*<span class="number">42</span> + flag[<span class="number">3</span>]*<span class="number">91</span> + flag[<span class="number">2</span>]*<span class="number">87</span> + flag[<span class="number">1</span>]*<span class="number">84</span> + flag[<span class="number">0</span>]*<span class="number">41</span> == <span class="number">198124</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">57</span> + flag[<span class="number">35</span>]*<span class="number">43</span> + flag[<span class="number">34</span>]*<span class="number">30</span> + flag[<span class="number">33</span>]*<span class="number">98</span> + flag[<span class="number">32</span>]*<span class="number">46</span> + flag[<span class="number">31</span>]*<span class="number">74</span> + flag[<span class="number">30</span>]*<span class="number">22</span> + flag[<span class="number">29</span>]*<span class="number">31</span> + flag[<span class="number">28</span>]*<span class="number">44</span> + flag[<span class="number">27</span>]*<span class="number">28</span> + flag[<span class="number">26</span>]*<span class="number">16</span> + flag[<span class="number">25</span>]*<span class="number">68</span> + flag[<span class="number">24</span>]*<span class="number">70</span> + flag[<span class="number">23</span>]*<span class="number">34</span> + flag[<span class="number">22</span>]*<span class="number">88</span> + flag[<span class="number">21</span>]*<span class="number">92</span> + flag[<span class="number">20</span>]*<span class="number">36</span> + flag[<span class="number">19</span>]*<span class="number">100</span> + flag[<span class="number">18</span>]*<span class="number">98</span> + flag[<span class="number">17</span>]*<span class="number">46</span> + flag[<span class="number">16</span>]*<span class="number">38</span> + flag[<span class="number">15</span>]*<span class="number">49</span> + flag[<span class="number">14</span>]*<span class="number">70</span> + flag[<span class="number">13</span>]*<span class="number">26</span> + flag[<span class="number">12</span>]*<span class="number">1</span> + flag[<span class="number">11</span>]*<span class="number">21</span> + flag[<span class="number">10</span>]*<span class="number">20</span> + flag[<span class="number">9</span>]*<span class="number">35</span> + flag[<span class="number">8</span>]*<span class="number">60</span> + flag[<span class="number">7</span>]*<span class="number">6</span> + flag[<span class="number">6</span>]*<span class="number">71</span> + flag[<span class="number">5</span>]*<span class="number">82</span> + flag[<span class="number">4</span>]*<span class="number">58</span> + flag[<span class="number">3</span>]*<span class="number">80</span> + flag[<span class="number">2</span>]*<span class="number">25</span> + flag[<span class="number">1</span>]*<span class="number">86</span> + flag[<span class="number">0</span>]*<span class="number">74</span> == <span class="number">175299</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">70</span> + flag[<span class="number">35</span>]*<span class="number">98</span> + flag[<span class="number">34</span>]*<span class="number">12</span> + flag[<span class="number">33</span>]*<span class="number">33</span> + flag[<span class="number">32</span>]*<span class="number">97</span> + flag[<span class="number">31</span>]*<span class="number">36</span> + flag[<span class="number">30</span>]*<span class="number">28</span> + flag[<span class="number">29</span>]*<span class="number">56</span> + flag[<span class="number">28</span>]*<span class="number">11</span> + flag[<span class="number">27</span>]*<span class="number">58</span> + flag[<span class="number">26</span>]*<span class="number">47</span> + flag[<span class="number">25</span>]*<span class="number">38</span> + flag[<span class="number">24</span>]*<span class="number">30</span> + flag[<span class="number">23</span>]*<span class="number">52</span> + flag[<span class="number">22</span>]*<span class="number">70</span> + flag[<span class="number">21</span>]*<span class="number">93</span> + flag[<span class="number">20</span>]*<span class="number">26</span> + flag[<span class="number">19</span>]*<span class="number">83</span> + flag[<span class="number">18</span>]*<span class="number">52</span> + flag[<span class="number">17</span>]*<span class="number">5</span> + flag[<span class="number">16</span>]*<span class="number">36</span> + flag[<span class="number">15</span>]*<span class="number">44</span> + flag[<span class="number">14</span>]*<span class="number">48</span> + flag[<span class="number">13</span>]*<span class="number">11</span> + flag[<span class="number">12</span>]*<span class="number">58</span> + flag[<span class="number">11</span>]*<span class="number">91</span> + flag[<span class="number">10</span>]*<span class="number">57</span> + flag[<span class="number">9</span>]*<span class="number">62</span> + flag[<span class="number">8</span>]*<span class="number">49</span> + flag[<span class="number">7</span>]*<span class="number">47</span> + flag[<span class="number">6</span>]*<span class="number">76</span> + flag[<span class="number">5</span>]*<span class="number">14</span> + flag[<span class="number">4</span>]*<span class="number">71</span> + flag[<span class="number">3</span>]*<span class="number">78</span> + flag[<span class="number">2</span>]*<span class="number">97</span> + flag[<span class="number">1</span>]*<span class="number">14</span> + flag[<span class="number">0</span>]*<span class="number">80</span> == <span class="number">179403</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">43</span> + flag[<span class="number">35</span>]*<span class="number">98</span> + flag[<span class="number">34</span>]*<span class="number">5</span> + flag[<span class="number">33</span>]*<span class="number">13</span> + flag[<span class="number">32</span>]*<span class="number">40</span> + flag[<span class="number">31</span>]*<span class="number">27</span> + flag[<span class="number">30</span>]*<span class="number">92</span> + flag[<span class="number">29</span>]*<span class="number">82</span> + flag[<span class="number">28</span>]*<span class="number">10</span> + flag[<span class="number">27</span>]*<span class="number">6</span> + flag[<span class="number">26</span>]*<span class="number">29</span> + flag[<span class="number">25</span>]*<span class="number">42</span> + flag[<span class="number">24</span>]*<span class="number">7</span> + flag[<span class="number">23</span>]*<span class="number">10</span> + flag[<span class="number">22</span>]*<span class="number">42</span> + flag[<span class="number">21</span>]*<span class="number">42</span> + flag[<span class="number">20</span>]*<span class="number">40</span> + flag[<span class="number">19</span>]*<span class="number">92</span> + flag[<span class="number">18</span>]*<span class="number">53</span> + flag[<span class="number">17</span>]*<span class="number">3</span> + flag[<span class="number">16</span>]*<span class="number">55</span> + flag[<span class="number">15</span>]*<span class="number">27</span> + flag[<span class="number">14</span>]*<span class="number">62</span> + flag[<span class="number">13</span>]*<span class="number">94</span> + flag[<span class="number">12</span>]*<span class="number">39</span> + flag[<span class="number">11</span>]*<span class="number">1</span> + flag[<span class="number">10</span>]*<span class="number">21</span> + flag[<span class="number">9</span>]*<span class="number">88</span> + flag[<span class="number">8</span>]*<span class="number">39</span> + flag[<span class="number">7</span>]*<span class="number">28</span> + flag[<span class="number">6</span>]*<span class="number">7</span> + flag[<span class="number">5</span>]*<span class="number">30</span> + flag[<span class="number">4</span>]*<span class="number">98</span> + flag[<span class="number">3</span>]*<span class="number">96</span> + flag[<span class="number">2</span>]*<span class="number">16</span> + flag[<span class="number">1</span>]*<span class="number">91</span> + flag[<span class="number">0</span>]*<span class="number">99</span> == <span class="number">145075</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">66</span> + flag[<span class="number">35</span>]*<span class="number">46</span> + flag[<span class="number">34</span>]*<span class="number">63</span> + flag[<span class="number">33</span>]*<span class="number">16</span> + flag[<span class="number">32</span>]*<span class="number">5</span> + flag[<span class="number">31</span>]*<span class="number">68</span> + flag[<span class="number">30</span>]*<span class="number">85</span> + flag[<span class="number">29</span>]*<span class="number">62</span> + flag[<span class="number">28</span>]*<span class="number">51</span> + flag[<span class="number">27</span>]*<span class="number">25</span> + flag[<span class="number">26</span>]*<span class="number">69</span> + flag[<span class="number">25</span>]*<span class="number">12</span> + flag[<span class="number">24</span>]*<span class="number">48</span> + flag[<span class="number">23</span>]*<span class="number">30</span> + flag[<span class="number">22</span>]*<span class="number">86</span> + flag[<span class="number">21</span>]*<span class="number">43</span> + flag[<span class="number">20</span>]*<span class="number">14</span> + flag[<span class="number">19</span>]*<span class="number">99</span> + flag[<span class="number">18</span>]*<span class="number">88</span> + flag[<span class="number">17</span>]*<span class="number">94</span> + flag[<span class="number">16</span>]*<span class="number">51</span> + flag[<span class="number">15</span>]*<span class="number">24</span> + flag[<span class="number">14</span>]*<span class="number">37</span> + flag[<span class="number">13</span>]*<span class="number">21</span> + flag[<span class="number">12</span>]*<span class="number">5</span> + flag[<span class="number">11</span>]*<span class="number">83</span> + flag[<span class="number">10</span>]*<span class="number">5</span> + flag[<span class="number">9</span>]*<span class="number">15</span> + flag[<span class="number">8</span>]*<span class="number">51</span> + flag[<span class="number">7</span>]*<span class="number">11</span> + flag[<span class="number">6</span>]*<span class="number">57</span> + flag[<span class="number">5</span>]*<span class="number">57</span> + flag[<span class="number">4</span>]*<span class="number">83</span> + flag[<span class="number">3</span>]*<span class="number">69</span> + flag[<span class="number">2</span>]*<span class="number">90</span> + flag[<span class="number">1</span>]*<span class="number">78</span> + flag[<span class="number">0</span>]*<span class="number">41</span> == <span class="number">168661</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">72</span> + flag[<span class="number">35</span>]*<span class="number">80</span> + flag[<span class="number">34</span>]*<span class="number">37</span> + flag[<span class="number">33</span>]*<span class="number">7</span> + flag[<span class="number">32</span>]*<span class="number">99</span> + flag[<span class="number">31</span>]*<span class="number">7</span> + flag[<span class="number">30</span>]*<span class="number">7</span> + flag[<span class="number">29</span>]*<span class="number">94</span> + flag[<span class="number">28</span>]*<span class="number">12</span> + flag[<span class="number">27</span>]*<span class="number">7</span> + flag[<span class="number">26</span>]*<span class="number">14</span> + flag[<span class="number">25</span>]*<span class="number">81</span> + flag[<span class="number">24</span>]*<span class="number">6</span> + flag[<span class="number">23</span>]*<span class="number">35</span> + flag[<span class="number">22</span>]*<span class="number">85</span> + flag[<span class="number">21</span>]*<span class="number">100</span> + flag[<span class="number">20</span>]*<span class="number">36</span> + flag[<span class="number">19</span>]*<span class="number">47</span> + flag[<span class="number">18</span>]*<span class="number">53</span> + flag[<span class="number">17</span>]*<span class="number">84</span> + flag[<span class="number">16</span>]*<span class="number">63</span> + flag[<span class="number">15</span>]*<span class="number">87</span> + flag[<span class="number">14</span>]*<span class="number">6</span> + flag[<span class="number">13</span>]*<span class="number">72</span> + flag[<span class="number">12</span>]*<span class="number">85</span> + flag[<span class="number">11</span>]*<span class="number">88</span> + flag[<span class="number">10</span>]*<span class="number">33</span> + flag[<span class="number">9</span>]*<span class="number">79</span> + flag[<span class="number">8</span>]*<span class="number">2</span> + flag[<span class="number">7</span>]*<span class="number">63</span> + flag[<span class="number">6</span>]*<span class="number">12</span> + flag[<span class="number">5</span>]*<span class="number">31</span> + flag[<span class="number">4</span>]*<span class="number">18</span> + flag[<span class="number">3</span>]*<span class="number">31</span> + flag[<span class="number">2</span>]*<span class="number">33</span> + flag[<span class="number">1</span>]*<span class="number">60</span> + flag[<span class="number">0</span>]*<span class="number">50</span> == <span class="number">161959</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">47</span> + flag[<span class="number">35</span>]*<span class="number">45</span> + flag[<span class="number">34</span>]*<span class="number">48</span> + flag[<span class="number">33</span>]*<span class="number">28</span> + flag[<span class="number">32</span>]*<span class="number">79</span> + flag[<span class="number">31</span>]*<span class="number">9</span> + flag[<span class="number">30</span>]*<span class="number">42</span> + flag[<span class="number">29</span>]*<span class="number">68</span> + flag[<span class="number">28</span>]*<span class="number">35</span> + flag[<span class="number">27</span>]*<span class="number">14</span> + flag[<span class="number">26</span>]*<span class="number">12</span> + flag[<span class="number">25</span>]*<span class="number">42</span> + flag[<span class="number">24</span>]*<span class="number">15</span> + flag[<span class="number">23</span>]*<span class="number">67</span> + flag[<span class="number">22</span>]*<span class="number">66</span> + flag[<span class="number">21</span>]*<span class="number">47</span> + flag[<span class="number">20</span>]*<span class="number">13</span> + flag[<span class="number">19</span>]*<span class="number">25</span> + flag[<span class="number">18</span>]*<span class="number">63</span> + flag[<span class="number">17</span>]*<span class="number">64</span> + flag[<span class="number">16</span>]*<span class="number">45</span> + flag[<span class="number">15</span>]*<span class="number">28</span> + flag[<span class="number">14</span>]*<span class="number">10</span> + flag[<span class="number">13</span>]*<span class="number">98</span> + flag[<span class="number">12</span>]*<span class="number">32</span> + flag[<span class="number">11</span>]*<span class="number">14</span> + flag[<span class="number">10</span>]*<span class="number">3</span> + flag[<span class="number">9</span>]*<span class="number">55</span> + flag[<span class="number">8</span>]*<span class="number">42</span> + flag[<span class="number">7</span>]*<span class="number">19</span> + flag[<span class="number">6</span>]*<span class="number">31</span> + flag[<span class="number">5</span>]*<span class="number">68</span> + flag[<span class="number">4</span>]*<span class="number">54</span> + flag[<span class="number">3</span>]*<span class="number">45</span> + flag[<span class="number">2</span>]*<span class="number">62</span> + flag[<span class="number">1</span>]*<span class="number">40</span> + flag[<span class="number">0</span>]*<span class="number">34</span> == <span class="number">134271</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">88</span> + flag[<span class="number">35</span>]*<span class="number">60</span> + flag[<span class="number">34</span>]*<span class="number">33</span> + flag[<span class="number">33</span>]*<span class="number">16</span> + flag[<span class="number">32</span>]*<span class="number">37</span> + flag[<span class="number">31</span>]*<span class="number">79</span> + flag[<span class="number">30</span>]*<span class="number">14</span> + flag[<span class="number">29</span>]*<span class="number">68</span> + flag[<span class="number">28</span>]*<span class="number">28</span> + flag[<span class="number">27</span>]*<span class="number">2</span> + flag[<span class="number">26</span>]*<span class="number">35</span> + flag[<span class="number">25</span>]*<span class="number">36</span> + flag[<span class="number">24</span>]*<span class="number">10</span> + flag[<span class="number">23</span>]*<span class="number">71</span> + flag[<span class="number">22</span>]*<span class="number">45</span> + flag[<span class="number">21</span>]*<span class="number">18</span> + flag[<span class="number">20</span>]*<span class="number">2</span> + flag[<span class="number">19</span>]*<span class="number">57</span> + flag[<span class="number">18</span>]*<span class="number">72</span> + flag[<span class="number">17</span>]*<span class="number">31</span> + flag[<span class="number">16</span>]*<span class="number">73</span> + flag[<span class="number">15</span>]*<span class="number">63</span> + flag[<span class="number">14</span>]*<span class="number">43</span> + flag[<span class="number">13</span>]*<span class="number">64</span> + flag[<span class="number">12</span>]*<span class="number">30</span> + flag[<span class="number">11</span>]*<span class="number">92</span> + flag[<span class="number">10</span>]*<span class="number">35</span> + flag[<span class="number">9</span>]*<span class="number">59</span> + flag[<span class="number">8</span>]*<span class="number">54</span> + flag[<span class="number">7</span>]*<span class="number">1</span> + flag[<span class="number">6</span>]*<span class="number">53</span> + flag[<span class="number">5</span>]*<span class="number">38</span> + flag[<span class="number">4</span>]*<span class="number">67</span> + flag[<span class="number">3</span>]*<span class="number">17</span> + flag[<span class="number">2</span>]*<span class="number">55</span> + flag[<span class="number">1</span>]*<span class="number">59</span> + flag[<span class="number">0</span>]*<span class="number">98</span> == <span class="number">155510</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">41</span> + flag[<span class="number">35</span>]*<span class="number">71</span> + flag[<span class="number">34</span>]*<span class="number">96</span> + flag[<span class="number">33</span>]*<span class="number">30</span> + flag[<span class="number">32</span>]*<span class="number">60</span> + flag[<span class="number">31</span>]*<span class="number">4</span> + flag[<span class="number">30</span>]*<span class="number">99</span> + flag[<span class="number">29</span>]*<span class="number">7</span> + flag[<span class="number">28</span>]*<span class="number">98</span> + flag[<span class="number">27</span>]*<span class="number">50</span> + flag[<span class="number">26</span>]*<span class="number">94</span> + flag[<span class="number">25</span>]*<span class="number">24</span> + flag[<span class="number">24</span>]*<span class="number">66</span> + flag[<span class="number">23</span>]*<span class="number">40</span> + flag[<span class="number">22</span>]*<span class="number">41</span> + flag[<span class="number">21</span>]*<span class="number">89</span> + flag[<span class="number">20</span>]*<span class="number">26</span> + flag[<span class="number">19</span>]*<span class="number">65</span> + flag[<span class="number">18</span>]*<span class="number">23</span> + flag[<span class="number">17</span>]*<span class="number">36</span> + flag[<span class="number">16</span>]*<span class="number">26</span> + flag[<span class="number">15</span>]*<span class="number">31</span> + flag[<span class="number">14</span>]*<span class="number">37</span> + flag[<span class="number">13</span>]*<span class="number">96</span> + flag[<span class="number">12</span>]*<span class="number">63</span> + flag[<span class="number">11</span>]*<span class="number">89</span> + flag[<span class="number">10</span>]*<span class="number">100</span> + flag[<span class="number">9</span>]*<span class="number">51</span> + flag[<span class="number">8</span>]*<span class="number">60</span> + flag[<span class="number">7</span>]*<span class="number">3</span> + flag[<span class="number">6</span>]*<span class="number">24</span> + flag[<span class="number">5</span>]*<span class="number">69</span> + flag[<span class="number">4</span>]*<span class="number">65</span> + flag[<span class="number">3</span>]*<span class="number">98</span> + flag[<span class="number">2</span>]*<span class="number">10</span> + flag[<span class="number">1</span>]*<span class="number">13</span> + flag[<span class="number">0</span>]*<span class="number">15</span> == <span class="number">182674</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">7</span> + flag[<span class="number">35</span>]*<span class="number">96</span> + flag[<span class="number">34</span>]*<span class="number">54</span> + flag[<span class="number">33</span>]*<span class="number">25</span> + flag[<span class="number">32</span>]*<span class="number">97</span> + flag[<span class="number">31</span>]*<span class="number">11</span> + flag[<span class="number">30</span>]*<span class="number">69</span> + flag[<span class="number">29</span>]*<span class="number">52</span> + flag[<span class="number">28</span>]*<span class="number">86</span> + flag[<span class="number">27</span>]*<span class="number">6</span> + flag[<span class="number">26</span>]*<span class="number">69</span> + flag[<span class="number">25</span>]*<span class="number">13</span> + flag[<span class="number">24</span>]*<span class="number">17</span> + flag[<span class="number">23</span>]*<span class="number">73</span> + flag[<span class="number">22</span>]*<span class="number">33</span> + flag[<span class="number">21</span>]*<span class="number">72</span> + flag[<span class="number">20</span>]*<span class="number">2</span> + flag[<span class="number">19</span>]*<span class="number">87</span> + flag[<span class="number">18</span>]*<span class="number">55</span> + flag[<span class="number">17</span>]*<span class="number">54</span> + flag[<span class="number">16</span>]*<span class="number">69</span> + flag[<span class="number">15</span>]*<span class="number">70</span> + flag[<span class="number">14</span>]*<span class="number">8</span> + flag[<span class="number">13</span>]*<span class="number">100</span> + flag[<span class="number">12</span>]*<span class="number">7</span> + flag[<span class="number">11</span>]*<span class="number">77</span> + flag[<span class="number">10</span>]*<span class="number">48</span> + flag[<span class="number">9</span>]*<span class="number">18</span> + flag[<span class="number">8</span>]*<span class="number">15</span> + flag[<span class="number">7</span>]*<span class="number">68</span> + flag[<span class="number">6</span>]*<span class="number">96</span> + flag[<span class="number">5</span>]*<span class="number">46</span> + flag[<span class="number">4</span>]*<span class="number">38</span> + flag[<span class="number">3</span>]*<span class="number">100</span> + flag[<span class="number">2</span>]*<span class="number">89</span> + flag[<span class="number">1</span>]*<span class="number">13</span> + flag[<span class="number">0</span>]*<span class="number">21</span> == <span class="number">169645</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">48</span> + flag[<span class="number">35</span>]*<span class="number">41</span> + flag[<span class="number">34</span>]*<span class="number">7</span> + flag[<span class="number">33</span>]*<span class="number">4</span> + flag[<span class="number">32</span>]*<span class="number">2</span> + flag[<span class="number">31</span>]*<span class="number">55</span> + flag[<span class="number">30</span>]*<span class="number">83</span> + flag[<span class="number">29</span>]*<span class="number">16</span> + flag[<span class="number">28</span>]*<span class="number">62</span> + flag[<span class="number">27</span>]*<span class="number">96</span> + flag[<span class="number">26</span>]*<span class="number">28</span> + flag[<span class="number">25</span>]*<span class="number">30</span> + flag[<span class="number">24</span>]*<span class="number">97</span> + flag[<span class="number">23</span>]*<span class="number">18</span> + flag[<span class="number">22</span>]*<span class="number">39</span> + flag[<span class="number">21</span>]*<span class="number">8</span> + flag[<span class="number">20</span>]*<span class="number">23</span> + flag[<span class="number">19</span>]*<span class="number">81</span> + flag[<span class="number">18</span>]*<span class="number">61</span> + flag[<span class="number">17</span>]*<span class="number">60</span> + flag[<span class="number">16</span>]*<span class="number">77</span> + flag[<span class="number">15</span>]*<span class="number">23</span> + flag[<span class="number">14</span>]*<span class="number">81</span> + flag[<span class="number">13</span>]*<span class="number">45</span> + flag[<span class="number">12</span>]*<span class="number">95</span> + flag[<span class="number">11</span>]*<span class="number">11</span> + flag[<span class="number">10</span>]*<span class="number">45</span> + flag[<span class="number">9</span>]*<span class="number">96</span> + flag[<span class="number">8</span>]*<span class="number">77</span> + flag[<span class="number">7</span>]*<span class="number">21</span> + flag[<span class="number">6</span>]*<span class="number">73</span> + flag[<span class="number">5</span>]*<span class="number">39</span> + flag[<span class="number">4</span>]*<span class="number">64</span> + flag[<span class="number">3</span>]*<span class="number">66</span> + flag[<span class="number">2</span>]*<span class="number">57</span> + flag[<span class="number">1</span>]*<span class="number">40</span> + flag[<span class="number">0</span>]*<span class="number">23</span> == <span class="number">162123</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">62</span> + flag[<span class="number">35</span>]*<span class="number">46</span> + flag[<span class="number">34</span>]*<span class="number">74</span> + flag[<span class="number">33</span>]*<span class="number">61</span> + flag[<span class="number">32</span>]*<span class="number">77</span> + flag[<span class="number">31</span>]*<span class="number">73</span> + flag[<span class="number">30</span>]*<span class="number">82</span> + flag[<span class="number">29</span>]*<span class="number">30</span> + flag[<span class="number">28</span>]*<span class="number">53</span> + flag[<span class="number">27</span>]*<span class="number">14</span> + flag[<span class="number">26</span>]*<span class="number">66</span> + flag[<span class="number">25</span>]*<span class="number">11</span> + flag[<span class="number">24</span>]*<span class="number">79</span> + flag[<span class="number">23</span>]*<span class="number">99</span> + flag[<span class="number">22</span>]*<span class="number">75</span> + flag[<span class="number">21</span>]*<span class="number">31</span> + flag[<span class="number">20</span>]*<span class="number">58</span> + flag[<span class="number">19</span>]*<span class="number">56</span> + flag[<span class="number">18</span>]*<span class="number">39</span> + flag[<span class="number">17</span>]*<span class="number">34</span> + flag[<span class="number">16</span>]*<span class="number">75</span> + flag[<span class="number">15</span>]*<span class="number">25</span> + flag[<span class="number">14</span>]*<span class="number">6</span> + flag[<span class="number">13</span>]*<span class="number">72</span> + flag[<span class="number">12</span>]*<span class="number">71</span> + flag[<span class="number">11</span>]*<span class="number">95</span> + flag[<span class="number">10</span>]*<span class="number">45</span> + flag[<span class="number">9</span>]*<span class="number">35</span> + flag[<span class="number">8</span>]*<span class="number">79</span> + flag[<span class="number">7</span>]*<span class="number">75</span> + flag[<span class="number">6</span>]*<span class="number">59</span> + flag[<span class="number">5</span>]*<span class="number">21</span> + flag[<span class="number">4</span>]*<span class="number">55</span> + flag[<span class="number">3</span>]*<span class="number">47</span> + flag[<span class="number">2</span>]*<span class="number">58</span> + flag[<span class="number">1</span>]*<span class="number">55</span> + flag[<span class="number">0</span>]*<span class="number">78</span> == <span class="number">188831</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">28</span> + flag[<span class="number">35</span>]*<span class="number">45</span> + flag[<span class="number">34</span>]*<span class="number">2</span> + flag[<span class="number">33</span>]*<span class="number">5</span> + flag[<span class="number">32</span>]*<span class="number">49</span> + flag[<span class="number">31</span>]*<span class="number">37</span> + flag[<span class="number">30</span>]*<span class="number">67</span> + flag[<span class="number">29</span>]*<span class="number">13</span> + flag[<span class="number">28</span>]*<span class="number">44</span> + flag[<span class="number">27</span>]*<span class="number">29</span> + flag[<span class="number">26</span>]*<span class="number">64</span> + flag[<span class="number">25</span>]*<span class="number">97</span> + flag[<span class="number">24</span>]*<span class="number">6</span> + flag[<span class="number">23</span>]*<span class="number">34</span> + flag[<span class="number">22</span>]*<span class="number">49</span> + flag[<span class="number">21</span>]*<span class="number">63</span> + flag[<span class="number">20</span>]*<span class="number">10</span> + flag[<span class="number">19</span>]*<span class="number">32</span> + flag[<span class="number">18</span>]*<span class="number">59</span> + flag[<span class="number">17</span>]*<span class="number">12</span> + flag[<span class="number">16</span>]*<span class="number">68</span> + flag[<span class="number">15</span>]*<span class="number">29</span> + flag[<span class="number">14</span>]*<span class="number">65</span> + flag[<span class="number">13</span>]*<span class="number">52</span> + flag[<span class="number">12</span>]*<span class="number">86</span> + flag[<span class="number">11</span>]*<span class="number">40</span> + flag[<span class="number">10</span>]*<span class="number">32</span> + flag[<span class="number">9</span>]*<span class="number">57</span> + flag[<span class="number">8</span>]*<span class="number">17</span> + flag[<span class="number">7</span>]*<span class="number">90</span> + flag[<span class="number">6</span>]*<span class="number">98</span> + flag[<span class="number">5</span>]*<span class="number">96</span> + flag[<span class="number">4</span>]*<span class="number">41</span> + flag[<span class="number">3</span>]*<span class="number">92</span> + flag[<span class="number">2</span>]*<span class="number">80</span> + flag[<span class="number">1</span>]*<span class="number">3</span> + flag[<span class="number">0</span>]*<span class="number">12</span> == <span class="number">151273</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">41</span> + flag[<span class="number">35</span>]*<span class="number">56</span> + flag[<span class="number">34</span>]*<span class="number">88</span> + flag[<span class="number">33</span>]*<span class="number">22</span> + flag[<span class="number">32</span>]*<span class="number">54</span> + flag[<span class="number">31</span>]*<span class="number">28</span> + flag[<span class="number">30</span>]*<span class="number">26</span> + flag[<span class="number">29</span>]*<span class="number">68</span> + flag[<span class="number">28</span>]*<span class="number">47</span> + flag[<span class="number">27</span>]*<span class="number">91</span> + flag[<span class="number">26</span>]*<span class="number">48</span> + flag[<span class="number">25</span>]*<span class="number">28</span> + flag[<span class="number">24</span>]*<span class="number">3</span> + flag[<span class="number">23</span>]*<span class="number">69</span> + flag[<span class="number">22</span>]*<span class="number">49</span> + flag[<span class="number">21</span>]*<span class="number">78</span> + flag[<span class="number">20</span>]*<span class="number">42</span> + flag[<span class="number">19</span>]*<span class="number">67</span> + flag[<span class="number">18</span>]*<span class="number">81</span> + flag[<span class="number">17</span>]*<span class="number">34</span> + flag[<span class="number">16</span>]*<span class="number">49</span> + flag[<span class="number">15</span>]*<span class="number">11</span> + flag[<span class="number">14</span>]*<span class="number">71</span> + flag[<span class="number">13</span>]*<span class="number">25</span> + flag[<span class="number">12</span>]*<span class="number">19</span> + flag[<span class="number">11</span>]*<span class="number">2</span> + flag[<span class="number">10</span>]*<span class="number">23</span> + flag[<span class="number">9</span>]*<span class="number">61</span> + flag[<span class="number">8</span>]*<span class="number">29</span> + flag[<span class="number">7</span>]*<span class="number">39</span> + flag[<span class="number">6</span>]*<span class="number">77</span> + flag[<span class="number">5</span>]*<span class="number">38</span> + flag[<span class="number">4</span>]*<span class="number">99</span> + flag[<span class="number">3</span>]*<span class="number">91</span> + flag[<span class="number">2</span>]*<span class="number">16</span> + flag[<span class="number">1</span>]*<span class="number">19</span> + flag[<span class="number">0</span>]*<span class="number">3</span> == <span class="number">149344</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">77</span> + flag[<span class="number">35</span>]*<span class="number">58</span> + flag[<span class="number">34</span>]*<span class="number">65</span> + flag[<span class="number">33</span>]*<span class="number">44</span> + flag[<span class="number">32</span>]*<span class="number">7</span> + flag[<span class="number">31</span>]*<span class="number">33</span> + flag[<span class="number">30</span>]*<span class="number">79</span> + flag[<span class="number">29</span>]*<span class="number">45</span> + flag[<span class="number">28</span>]*<span class="number">51</span> + flag[<span class="number">27</span>]*<span class="number">28</span> + flag[<span class="number">26</span>]*<span class="number">39</span> + flag[<span class="number">25</span>]*<span class="number">17</span> + flag[<span class="number">24</span>]*<span class="number">9</span> + flag[<span class="number">23</span>]*<span class="number">24</span> + flag[<span class="number">22</span>]*<span class="number">78</span> + flag[<span class="number">21</span>]*<span class="number">10</span> + flag[<span class="number">20</span>]*<span class="number">47</span> + flag[<span class="number">19</span>]*<span class="number">73</span> + flag[<span class="number">18</span>]*<span class="number">3</span> + flag[<span class="number">17</span>]*<span class="number">70</span> + flag[<span class="number">16</span>]*<span class="number">33</span> + flag[<span class="number">15</span>]*<span class="number">70</span> + flag[<span class="number">14</span>]*<span class="number">25</span> + flag[<span class="number">13</span>]*<span class="number">93</span> + flag[<span class="number">12</span>]*<span class="number">66</span> + flag[<span class="number">11</span>]*<span class="number">24</span> + flag[<span class="number">10</span>]*<span class="number">83</span> + flag[<span class="number">9</span>]*<span class="number">29</span> + flag[<span class="number">8</span>]*<span class="number">7</span> + flag[<span class="number">7</span>]*<span class="number">4</span> + flag[<span class="number">6</span>]*<span class="number">18</span> + flag[<span class="number">5</span>]*<span class="number">28</span> + flag[<span class="number">4</span>]*<span class="number">41</span> + flag[<span class="number">3</span>]*<span class="number">45</span> + flag[<span class="number">2</span>]*<span class="number">21</span> + flag[<span class="number">1</span>]*<span class="number">56</span> + flag[<span class="number">0</span>]*<span class="number">66</span> == <span class="number">145154</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">14</span> + flag[<span class="number">35</span>]*<span class="number">51</span> + flag[<span class="number">34</span>]*<span class="number">4</span> + flag[<span class="number">33</span>]*<span class="number">7</span> + flag[<span class="number">32</span>]*<span class="number">26</span> + flag[<span class="number">31</span>]*<span class="number">23</span> + flag[<span class="number">30</span>]*<span class="number">48</span> + flag[<span class="number">29</span>]*<span class="number">2</span> + flag[<span class="number">28</span>]*<span class="number">65</span> + flag[<span class="number">27</span>]*<span class="number">8</span> + flag[<span class="number">26</span>]*<span class="number">33</span> + flag[<span class="number">25</span>]*<span class="number">70</span> + flag[<span class="number">24</span>]*<span class="number">47</span> + flag[<span class="number">23</span>]*<span class="number">98</span> + flag[<span class="number">22</span>]*<span class="number">7</span> + flag[<span class="number">21</span>]*<span class="number">75</span> + flag[<span class="number">20</span>]*<span class="number">85</span> + flag[<span class="number">19</span>]*<span class="number">8</span> + flag[<span class="number">18</span>]*<span class="number">24</span> + flag[<span class="number">17</span>]*<span class="number">68</span> + flag[<span class="number">16</span>]*<span class="number">25</span> + flag[<span class="number">15</span>]*<span class="number">20</span> + flag[<span class="number">14</span>]*<span class="number">76</span> + flag[<span class="number">13</span>]*<span class="number">98</span> + flag[<span class="number">12</span>]*<span class="number">27</span> + flag[<span class="number">11</span>]*<span class="number">25</span> + flag[<span class="number">10</span>]*<span class="number">32</span> + flag[<span class="number">9</span>]*<span class="number">98</span> + flag[<span class="number">8</span>]*<span class="number">94</span> + flag[<span class="number">7</span>]*<span class="number">42</span> + flag[<span class="number">6</span>]*<span class="number">95</span> + flag[<span class="number">5</span>]*<span class="number">80</span> + flag[<span class="number">4</span>]*<span class="number">77</span> + flag[<span class="number">3</span>]*<span class="number">89</span> + flag[<span class="number">2</span>]*<span class="number">17</span> + flag[<span class="number">1</span>]*<span class="number">87</span> + flag[<span class="number">0</span>]*<span class="number">89</span> == <span class="number">167698</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">66</span> + flag[<span class="number">35</span>]*<span class="number">3</span> + flag[<span class="number">34</span>]*<span class="number">31</span> + flag[<span class="number">33</span>]*<span class="number">95</span> + flag[<span class="number">32</span>]*<span class="number">6</span> + flag[<span class="number">31</span>]*<span class="number">99</span> + flag[<span class="number">30</span>]*<span class="number">99</span> + flag[<span class="number">29</span>]*<span class="number">98</span> + flag[<span class="number">28</span>]*<span class="number">85</span> + flag[<span class="number">27</span>]*<span class="number">70</span> + flag[<span class="number">26</span>]*<span class="number">48</span> + flag[<span class="number">25</span>]*<span class="number">40</span> + flag[<span class="number">24</span>]*<span class="number">65</span> + flag[<span class="number">23</span>]*<span class="number">37</span> + flag[<span class="number">22</span>]*<span class="number">79</span> + flag[<span class="number">21</span>]*<span class="number">44</span> + flag[<span class="number">20</span>]*<span class="number">32</span> + flag[<span class="number">19</span>]*<span class="number">55</span> + flag[<span class="number">18</span>]*<span class="number">6</span> + flag[<span class="number">17</span>]*<span class="number">93</span> + flag[<span class="number">16</span>]*<span class="number">2</span> + flag[<span class="number">15</span>]*<span class="number">39</span> + flag[<span class="number">14</span>]*<span class="number">43</span> + flag[<span class="number">13</span>]*<span class="number">60</span> + flag[<span class="number">12</span>]*<span class="number">85</span> + flag[<span class="number">11</span>]*<span class="number">1</span> + flag[<span class="number">10</span>]*<span class="number">19</span> + flag[<span class="number">9</span>]*<span class="number">50</span> + flag[<span class="number">8</span>]*<span class="number">100</span> + flag[<span class="number">7</span>]*<span class="number">61</span> + flag[<span class="number">6</span>]*<span class="number">36</span> + flag[<span class="number">5</span>]*<span class="number">80</span> + flag[<span class="number">4</span>]*<span class="number">26</span> + flag[<span class="number">3</span>]*<span class="number">44</span> + flag[<span class="number">2</span>]*<span class="number">29</span> + flag[<span class="number">1</span>]*<span class="number">9</span> + flag[<span class="number">0</span>]*<span class="number">82</span> == <span class="number">172352</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">72</span> + flag[<span class="number">35</span>]*<span class="number">66</span> + flag[<span class="number">34</span>]*<span class="number">36</span> + flag[<span class="number">33</span>]*<span class="number">80</span> + flag[<span class="number">32</span>]*<span class="number">36</span> + flag[<span class="number">31</span>]*<span class="number">44</span> + flag[<span class="number">30</span>]*<span class="number">24</span> + flag[<span class="number">29</span>]*<span class="number">10</span> + flag[<span class="number">28</span>]*<span class="number">17</span> + flag[<span class="number">27</span>]*<span class="number">19</span> + flag[<span class="number">26</span>]*<span class="number">69</span> + flag[<span class="number">25</span>]*<span class="number">51</span> + flag[<span class="number">24</span>]*<span class="number">86</span> + flag[<span class="number">23</span>]*<span class="number">88</span> + flag[<span class="number">22</span>]*<span class="number">95</span> + flag[<span class="number">21</span>]*<span class="number">73</span> + flag[<span class="number">20</span>]*<span class="number">96</span> + flag[<span class="number">19</span>]*<span class="number">13</span> + flag[<span class="number">18</span>]*<span class="number">85</span> + flag[<span class="number">17</span>]*<span class="number">15</span> + flag[<span class="number">16</span>]*<span class="number">87</span> + flag[<span class="number">15</span>]*<span class="number">19</span> + flag[<span class="number">14</span>]*<span class="number">100</span> + flag[<span class="number">13</span>]*<span class="number">51</span> + flag[<span class="number">12</span>]*<span class="number">96</span> + flag[<span class="number">11</span>]*<span class="number">41</span> + flag[<span class="number">10</span>]*<span class="number">60</span> + flag[<span class="number">9</span>]*<span class="number">50</span> + flag[<span class="number">8</span>]*<span class="number">42</span> + flag[<span class="number">7</span>]*<span class="number">34</span> + flag[<span class="number">6</span>]*<span class="number">32</span> + flag[<span class="number">5</span>]*<span class="number">92</span> + flag[<span class="number">4</span>]*<span class="number">29</span> + flag[<span class="number">3</span>]*<span class="number">96</span> + flag[<span class="number">2</span>]*<span class="number">77</span> + flag[<span class="number">1</span>]*<span class="number">37</span> + flag[<span class="number">0</span>]*<span class="number">49</span> == <span class="number">187042</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">48</span> + flag[<span class="number">35</span>]*<span class="number">5</span> + flag[<span class="number">34</span>]*<span class="number">72</span> + flag[<span class="number">33</span>]*<span class="number">84</span> + flag[<span class="number">32</span>]*<span class="number">11</span> + flag[<span class="number">31</span>]*<span class="number">33</span> + flag[<span class="number">30</span>]*<span class="number">87</span> + flag[<span class="number">29</span>]*<span class="number">22</span> + flag[<span class="number">28</span>]*<span class="number">93</span> + flag[<span class="number">27</span>]*<span class="number">100</span> + flag[<span class="number">26</span>]*<span class="number">59</span> + flag[<span class="number">25</span>]*<span class="number">26</span> + flag[<span class="number">24</span>]*<span class="number">21</span> + flag[<span class="number">23</span>]*<span class="number">29</span> + flag[<span class="number">22</span>]*<span class="number">97</span> + flag[<span class="number">21</span>]*<span class="number">10</span> + flag[<span class="number">20</span>]*<span class="number">86</span> + flag[<span class="number">19</span>]*<span class="number">10</span> + flag[<span class="number">18</span>]*<span class="number">9</span> + flag[<span class="number">17</span>]*<span class="number">3</span> + flag[<span class="number">16</span>]*<span class="number">49</span> + flag[<span class="number">15</span>]*<span class="number">59</span> + flag[<span class="number">14</span>]*<span class="number">47</span> + flag[<span class="number">13</span>]*<span class="number">25</span> + flag[<span class="number">12</span>]*<span class="number">57</span> + flag[<span class="number">11</span>]*<span class="number">34</span> + flag[<span class="number">10</span>]*<span class="number">25</span> + flag[<span class="number">9</span>]*<span class="number">95</span> + flag[<span class="number">8</span>]*<span class="number">29</span> + flag[<span class="number">7</span>]*<span class="number">6</span> + flag[<span class="number">6</span>]*<span class="number">5</span> + flag[<span class="number">5</span>]*<span class="number">80</span> + flag[<span class="number">4</span>]*<span class="number">8</span> + flag[<span class="number">3</span>]*<span class="number">98</span> + flag[<span class="number">2</span>]*<span class="number">76</span> + flag[<span class="number">1</span>]*<span class="number">90</span> + flag[<span class="number">0</span>]*<span class="number">33</span> == <span class="number">155223</span>)</span><br><span class="line"></span><br><span class="line">sol.add(flag[<span class="number">36</span>]*<span class="number">34</span> + flag[<span class="number">35</span>]*<span class="number">18</span> + flag[<span class="number">34</span>]*<span class="number">26</span> + flag[<span class="number">33</span>]*<span class="number">84</span> + flag[<span class="number">32</span>]*<span class="number">76</span> + flag[<span class="number">31</span>]*<span class="number">99</span> + flag[<span class="number">30</span>]*<span class="number">1</span> + flag[<span class="number">29</span>]*<span class="number">86</span> + flag[<span class="number">28</span>]*<span class="number">87</span> + flag[<span class="number">27</span>]*<span class="number">69</span> + flag[<span class="number">26</span>]*<span class="number">21</span> + flag[<span class="number">25</span>]*<span class="number">42</span> + flag[<span class="number">24</span>]*<span class="number">65</span> + flag[<span class="number">23</span>]*<span class="number">57</span> + flag[<span class="number">22</span>]*<span class="number">71</span> + flag[<span class="number">21</span>]*<span class="number">59</span> + flag[<span class="number">20</span>]*<span class="number">15</span> + flag[<span class="number">19</span>]*<span class="number">70</span> + flag[<span class="number">18</span>]*<span class="number">15</span> + flag[<span class="number">17</span>]*<span class="number">61</span> + flag[<span class="number">16</span>]*<span class="number">73</span> + flag[<span class="number">15</span>]*<span class="number">88</span> + flag[<span class="number">14</span>]*<span class="number">76</span> + flag[<span class="number">13</span>]*<span class="number">2</span> + flag[<span class="number">12</span>]*<span class="number">61</span> + flag[<span class="number">11</span>]*<span class="number">89</span> + flag[<span class="number">10</span>]*<span class="number">47</span> + flag[<span class="number">9</span>]*<span class="number">28</span> + flag[<span class="number">8</span>]*<span class="number">47</span> + flag[<span class="number">7</span>]*<span class="number">52</span> + flag[<span class="number">6</span>]*<span class="number">33</span> + flag[<span class="number">5</span>]*<span class="number">39</span> + flag[<span class="number">4</span>]*<span class="number">13</span> + flag[<span class="number">3</span>]*<span class="number">15</span> + flag[<span class="number">2</span>]*<span class="number">5</span> + flag[<span class="number">1</span>]*<span class="number">33</span> + flag[<span class="number">0</span>]*<span class="number">28</span> == <span class="number">164628</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Constraints for flag format &quot;openECSC&#123;...&#125;&quot;</span></span><br><span class="line">sol.add(flag[<span class="number">0</span>] == <span class="number">111</span>)</span><br><span class="line">sol.add(flag[<span class="number">1</span>] == <span class="number">112</span>)</span><br><span class="line">sol.add(flag[<span class="number">2</span>] == <span class="number">101</span>)</span><br><span class="line">sol.add(flag[<span class="number">3</span>] == <span class="number">110</span>)</span><br><span class="line">sol.add(flag[<span class="number">4</span>] == <span class="number">69</span>)</span><br><span class="line">sol.add(flag[<span class="number">5</span>] == <span class="number">67</span>)</span><br><span class="line">sol.add(flag[<span class="number">6</span>] == <span class="number">83</span>)</span><br><span class="line">sol.add(flag[<span class="number">7</span>] == <span class="number">67</span>)</span><br><span class="line">sol.add(flag[<span class="number">8</span>] == <span class="number">123</span>)</span><br><span class="line">sol.add(flag[<span class="number">36</span>] == <span class="number">125</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sol.check()==sat:</span><br><span class="line">	m = sol.model()</span><br><span class="line">	f = [<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(m[flag[i]]))) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m))]</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(f))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;unsat&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p><code>openECSC&#123;1ts_jus7_4n0ther_vm_582e5a5&#125;</code></p>
<h3 id="Closing-Notes"><a href="#Closing-Notes" class="headerlink" title="Closing Notes"></a>Closing Notes</h3><p>I enjoyed how this VM was constructed and divided into two parts, each getting harder. This could be a good entry point into the world VM challenges.</p>
<br>

<p>Ciao !!<br><br></p>
<hr>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>writeup</tag>
        <tag>linux</tag>
        <tag>reversing</tag>
        <tag>ecscCTF</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC 2024</title>
    <url>/2024/05/05/GCC-2024/</url>
    <content><![CDATA[<p>Writing about the work trips is my favorite hobby 😉</p>
<p>So well, in february I got the opportunity to attend a camp at Thailand, the land of amazing cuisine 😋</p>
<p>I attended Global Cybersecurity Camp, which was a 5 days event from 19th Feb to 24th Feb, 2024.</p>
<p>Cybersecurity enthusiasts and experts from 11 different Asian Countries 🌎 joined on this venture. The participating countries were Japan, Vietnam, South Korea, Malayasia, Singapore, Indonesia, Taiwan, India, Thailand and Australia. Unfortunately Australia couldn’t make it onsite for the event.</p>
<p>This year marked India’s first participation in the camp !!!</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_1.png"
                      alt="GCC"
                ></p>
<p>From India we were 4 students and 2 staff members who participated in the onsite event.<br>We left on 17th Feb from different parts of India, and reached Thailand around early morning on 18th Feb 2024.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_2.png"
                      alt="GCC"
                ></p>
<p>After everyone arrived, we were picked up by one of the Thailand staff member, Gong, and they had arranged a private van for us. The journey from airport to the hotel was 2 hours and we stopped by on our way for breakfast.</p>
<p>That was my first time live seeing the street food of south eastern asian countries, and it was truly mesmerizing😋 </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_3.png"
                      alt="GCC"
                ></p>
<p>We had to exit the vehicle and walk when we got close to the hotel since there was a marathon going on. Later on, we found out that it was actually a triathlon with competitors from several nations.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_4.jpg"
                      alt="GCC"
                ></p>
<p>Team Japan was getting off their van just as we were coming out of ours.</p>
<p>We had a little chat with Team Japan after reaching the hotel and went out for lunch with them at a nearby restaurant.</p>
<p>We had authentic Thai food and specially the delicious Thai soups. </p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_5.jpg"
                      alt="GCC"
                ></p>
<p>After lunch, we all had an icebreaker session in the evening during which we introduced ourselves and our nations to one other. </p>
<p>The introductions was pretty cool and the ppts were very chill and casual. I was surprised and at the same time excite to see that people from some famous and top teams had joined us on this camp like Hitcon, hackerscrew and players who have participated in Defcon Finals onsite.<br>There were poeple who had a CVE on their name already.</p>
<p>Jumping on to Day 1</p>
<h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><p>The opening sessions were given by the organisers and everyone was sitting with their groupmates on a round table. I was in Team 9, and my teammates were from the countries, South Korea, Taiwan, Vietnam, Thailand and Malaysia.</p>
<p>We were also introduced to group projects and our Group porject was a CTF Battle against Group 4.</p>
<p>After a good ethics session we had lunch and then we were onto our workshops.</p>
<p>Our first session was <strong>Active Directory Attack Techniques</strong>. It was taken by <a class="link"   href="https://www.linkedin.com/in/marscheng93/" >Mars Cheng <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> and it was quite a detailed session with labs. It was honestly a lot to take in, in one time. </p>
<p>The dinner was followed by a house warming typa party at a hotel room. The people were very welcoming and we played some dares as well. </p>
<h3 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h3><p>Day 2 had 2 sessions.</p>
<p>First one was <strong>Handling Threat Intelligence</strong>: Techniques of consuming and creating threat intelligence by <a class="link"   href="https://www.linkedin.com/in/tomohisaishikawa/" >Tomohisa Ishikawa <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [JP]</p>
<p>This session involved identifying threats and malwares using different techniques, one of them being by writing YARA rules. After an intro session, we were provided with a lab where different malicious files were given to us, and we had to write YARA rules depending on the file hash and data that can be retrieved from sites like virustotal about the hash.</p>
<p>After lunch, second session was <strong>Fuzzing in the kernel world</strong> by <a class="link"   href="https://www.linkedin.com/in/yi-han-wang-299749208/" >Yi-Han Wang <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [TW]</p>
<p>This was an intro to Fuzzing and Virtualisation followed by the lab for both of these. This was a group work where each group was provided with a hosted VM which could be accessed by all the members of the team. This was a fun activity, and even though the set up took a lot of time, those breaks gave us some good time to talk and enjoy the snacks deployed outside the hall.</p>
<h3 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h3><p><strong>How (not) to build a vulnerable LLM web app</strong> by <a class="link"   href="https://www.linkedin.com/in/shota-shinogi/" >Shota Shinogi <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [JP] was held in morning, which was again a group work and had a competitive environment as to which team manages to build a vulnerable LLM web app first. We were not just taught how to build a vulnerable LLM web app but were also challenged to fix that vulnerablility and make a secure version of that app. At the end of the session, one of the teams was asked to present their app on the stage as well. Group 1 presented their app and they had built an undefeatable game.</p>
<p>My team built a code sanitiser meant for performing calculations only.</p>
<p>Second session of the day was a forensics session, <strong>Hunting with a dinosaur</strong> by <a class="link"   href="https://www.linkedin.com/in/andreasvanleeuwenflamino/" >Andreas van Leeuwen Flamino <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [NL], where we were introduced to a very powerful DFIR tool <a class="link"   href="https://www.rapid7.com/products/velociraptor/" >velociraptor <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>. We were given a storyline and a situation, along with some questions. We were supposed to perform the investigation using the tool and find answers to all the questions given. We learned about how to search different artefacts, filter them and extract necessary information  from them. It was a fun experience.</p>
<h3 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h3><p>Fourth entire day was dedicated to <strong>Hands-on Car Hacking</strong><br>By <a class="link"   href="https://www.linkedin.com/in/mohammad-kamel-ghali/" >Kamel Ghali <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [JP]. Kamel is incredibly helpful and has a really cool personality. In this group exercise, which was our first hardware-related workshop, we were given pre-made virtual machine images to use as workstations. We had to hack a Bluetooth device in order to get its contents before using the hacked device to send and receive data.</p>
<p>And that was only the start, as a speedometer and hacking into the speed, breaks, indicator lights, and other things were added later.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_6.jpg"
                      alt="GCC"
                ></p>
<h3 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h3><p>Last day, we only had one session, <strong>Practical Malware Analysis and .NET Reversing</strong> (Based on Real-World Cases) by <a class="link"   href="https://www.linkedin.com/in/oalieno/" >Wei-Chieh Chao <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [TW] and <a class="link"   href="https://www.linkedin.com/in/yi-hsien-chen-05b411138/" >Yi-Hsien Chen <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> [TW]. As a reverse engineer, I really liked the resources and materials they provided for this training. The resources were very well crafted with a perfect learning curve. A pre-built virtual machine image with all the necessary tools and malware was sent to us.<br>We were exposed to a variety of the most recent malwares, and there was a CTF hosted by them where we had to submit the answers to the questions posed to us during the malare session in a form of flag.</p>
<h3 id="After-work"><a href="#After-work" class="headerlink" title="After work"></a>After work</h3><p>The same venue where our workshops were conducted allowed us to continue working on our group projects until 10pm at night. This was the time were the entire team interacted and discussed with each other. I thought this was a great opportunity to learn about the work processes that individuals in many countries follow. </p>
<p>My group project was CTF Challenges, and we had our CTF platform (ctfd) setup on day 1 itself. In total we had 8 challenges in our CTF which was equal to the number of challenges that were provided to us during the battle phase. On thursday (Day 4), we exchanged our challenges and started working on those. It was a 24 hour CTF, and players from other teams were also given the oppotunity to try out the challenges. My team managed to solve all the challenges from Team 4 (our opponent). The CTF challenges made by us were diverse and included challenges from the fields like forensics, misc, cryptography, reverse engineering, web exploitation (which was based on the past CVE of one of my group member) and wifi hacking. We had a cool black wifi router sitting on our table for the same purpose throughtout the event.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_7.jpg"
                      alt="GCC"
                ></p>
<h3 id="Party"><a href="#Party" class="headerlink" title="Party"></a>Party</h3><p>South Eastern Asian countries appear to have a fairly prevalent tradition of parties where people socialize and drink after a long day. There used to be planned party like this every night, and it was a great opportunity to mingle with other students, speakers, and sponsors who had come along for the event. There were several locations for the parties: occasionally it was a little ramyeon party in a room, sometimes drinks by the pool, and occasionally it was a replica of a housewarming celebration in a room.</p>
<p>In Thailand, a well-known convenience store chain called “7 Eleven” is open around-the-clock. Our hotel was not far from one of these store. Every day when we had late work or ran out of snacks at the party, we would stop by to get some.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_8.jpg"
                      alt="GCC"
                ></p>
<h3 id="GSC-Glocal-Snack-Camp"><a href="#GSC-Glocal-Snack-Camp" class="headerlink" title="GSC - Glocal Snack Camp"></a>GSC - Glocal Snack Camp</h3><p>On 5th day, we officially named the camp as Global Snack Camp because of the amount of snacks we were given from different countries everyday 😂</p>
<p>Every country presented each other with souvenirs, stickers, badges and snacks.</p>
<p>We offered some Indian snacks to the crowd on the last day, and they were quite fond of the food’s explosion of flavor. Even though some Japanese people found it hot, they continued to eat and enjoy it. I discovered that parathas (An Indian Dish) are pretty common in Singapore.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_9.png"
                      alt="GCC"
                ></p>
<h3 id="Closing-ceremony"><a href="#Closing-ceremony" class="headerlink" title="Closing ceremony"></a>Closing ceremony</h3><p>Last day, after lunch we had a closing ceremony. We were awarded with certificates for participating in the event which was followed by group presentations on our projects.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_10.jpg"
                      alt="GCC"
                ></p>
<p>We were strictly provided only 5 minutes for the presentation and a panel of judges from different countries was present to rate us on our project. The presentation also demanded a demo.</p>
<p>All the presentations were very impressive, and I wonder if given more time, the result would have been phonemonen. There were total 4 project topics which were divided among 9 teams and winner in each topic was announced first. My team won in the CTF Challenge.</p>
<p>Later top 2 teams were selected which were awarded with off sec playground subscriptions for each member. In this, my team (team 9) clutched second position.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_11.jpg"
                      alt="GCC"
                ></p>
<h3 id="After-event"><a href="#After-event" class="headerlink" title="After event"></a>After event</h3><p>The formal GCC event came to an end at this point. Now that we had some spare time, we explored the nearby walkways and beach. Our meal was at a seaside restaurant that was ten minutes away. Every table had a different spicy dish that we dared each other to try.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_12.jpg"
                      alt="GCC"
                ></p>
<p>On the last day of the trip, everyone was dropped off at the airport and given a tour by the organizers. The event was really well-planned and executed throughout. We also made a shopping trip at a nearby market, where the main attraction was their well-known snack, dried sea food.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/seafoodsnacks.jpg"
                      alt="GCC"
                ></p>
<p>We came to a sightseeing spot at the end, took one more picture, and said each other farewell.</p>
<p>Overall, the entire trip was very heart-filling and I personally feel I got a very good exposure to the outside world, their work ethics, their mentalities and their perspective on different topics.</p>
<p>Technically and non-technically, I learned a lot from this trip, and look forward to meet these amazing people again soon!!</p>
<p>Until then, bye bye !!!</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/gcc/gcc_13.jpg"
                      alt="GCC"
                ></p>
<br>
Ciao !!

<br>

<hr>
]]></content>
      <categories>
        <category>Conference</category>
      </categories>
      <tags>
        <tag>GCC</tag>
      </tags>
  </entry>
  <entry>
    <title>Katanaverse 1.0 : bi0sCTF 2024</title>
    <url>/2024/03/29/Katanaverse-1-0-bi0sCTF-2024/</url>
    <content><![CDATA[<p><strong>tl;dr</strong></p>
<ul>
<li>Utilises a VM to receive an input and modify the input by performing bit manipulation</li>
<li>Quantum gates (quantum operations) are applied to the modified flag</li>
<li>A quantum algorithm for the decisive match</li>
</ul>
<span id="more"></span>

<p><strong>Challenge points</strong>: 1000<br><strong>No. of solves</strong>: 0</p>
<h2 id="Challenge-Description"><a href="#Challenge-Description" class="headerlink" title="Challenge Description"></a>Challenge Description</h2><p>Yes, that should work.</p>
<p><strong>MD5 Hash</strong>: </p>
<p>katanaverse1.0: <em>c86e0909a1f1d0296d58c059a02bbeed</em><br>1_dump.dmp: <em>de7024faaf03edc69c2e52ee9aa95f9f</em></p>
<p><strong>Author</strong></p>
<ul>
<li>Sejal Koshta: k1n0r4 | <a class="link"   href="https://twitter.com/k1n0r4" >k1n0r4 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<br>
<br>

<p>This challenge is a second part of Katanaverse 0.0 </p>
<h4 id="Two-phases-of-Challenge"><a href="#Two-phases-of-Challenge" class="headerlink" title="Two phases of Challenge:"></a><b>Two phases of Challenge:</b></h4><ol>
<li>VM involving Bit Manipulation</li>
<li>Quantum computation and algorithm</li>
</ol>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>This challenge’s binary is broken and unexecutable beyond a particular point in the code since it starts involving quantum operations, which are provided in Python. On Quantum servers, these procedures may be carried out via the Python qiskit module.</p>
<p>The challenge’s primary goal was to comprehend how the binary operates and re-implement any sections that cannot be performed or do not exist. To understand the suggestion provided to re-implement the non-existent function, you might also need to refer to the earlier section of this challenge, “Katanaverse 0.0”. You may find the necessary technique&#x2F;method by performing a simple Google search using the essential terms.</p>
<p>Visit this <a class="link"   href="https://hackmd.io/@tTGS5aCyRTmUgs-Pzciyhg/SJGufLosT" >page <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> to learn more about Katanaverse 0.0’s functionality. This comprises the challenge’s organizational notes.</p>
<h4 id="Q-How-will-I-know-that-it-makes-use-of-quantum-concepts"><a href="#Q-How-will-I-know-that-it-makes-use-of-quantum-concepts" class="headerlink" title="Q. How will I know that it makes use of quantum concepts?"></a>Q. How will I know that it makes use of quantum concepts?</h4><p>Indeed, you can observe the occurrence of alpha and beta in the shellcode itself, and the structure of the shellcode also suggests a quantum or Qiskit module.</p>
<br>


<h2 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h2><h3 id="Control-flow-of-the-VM"><a href="#Control-flow-of-the-VM" class="headerlink" title="Control flow of the VM"></a>Control flow of the VM</h3><ol>
<li>Prompt for Flag</li>
<li>Takes the input</li>
<li>Transforms the flag into its string encoded in base 64.</li>
<li>Register S0 stores the updated flag’s length.</li>
<li>Copying and storing flag bytes in “memory” and stack</li>
<li>Binary representations of flag bytes are created and placed on the stack.</li>
<li>As a result, each time a flag byte is converted, the byte is removed from memory.</li>
<li>Memory is discovered to be empty following the conversion.</li>
<li>A bit modification that is kept in memory is carried out using stored binary from the stack.</li>
<li>VM exits</li>
<li>It replicates its memory into a “classified” 2D array </li>
<li>It stores the altered input length from register S0 in a new variable for use in future applications.</li>
</ol>
<p>Here is more information on the <a class="link"   href="https://hackmd.io/@tTGS5aCyRTmUgs-Pzciyhg/ryTAKIsoa" >VM <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> used.</p>
<br>

<h2 id="Quantum"><a href="#Quantum" class="headerlink" title="Quantum"></a>Quantum</h2><p>Upon obtaining the bit-manipulated array, which I refer to as the “classified” array, the quantum operations commence.</p>
<h3 id="Runtime-Constant-generation"><a href="#Runtime-Constant-generation" class="headerlink" title="Runtime Constant generation"></a>Runtime Constant generation</h3><p>Prior to that, a few significant constants are created at runtime using the flag’s known portion, that is, it’s flag format.</p>
<p>Seed for the srand function - 89<br>Aes key - [24, 6, 59, 77, 181, 112, 85, 180, 113, 194, 137, 37, 74, 136, 6, 25]</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">uint8_t aes_key[16];</span><br><span class="line"></span><br><span class="line">for(int i =0;i&lt;16;i++)</span><br><span class="line">&#123;</span><br><span class="line">aes_key[i] = classified[i][7] * 1 + classified[i][6] * 2 + classified[i][5] * 4 + classified[i][4] * 8 + classified[i][3] * 16 + classified[i][2] * 32 + classified[i][1] * 64 + classified[i][0] * 128;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img1.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>The seed generation also involves a user character input, which is ‘r’</p>
<p>By taking two bytes of the modified flag at a time and creating six bytes for each such pair, the classified array is created. Therefore, a pair of flag bytes corresponds to each of these sets of six bytes. The last byte of the preceding pair is overlapped and used as the first byte to obtain the next pair of bytes.</p>
<p>The classified array then has certain constraints applied to it, where the produced random numbers decide which row satisfies each requirement. Three such constraints are given here for each group in the classified array.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img2.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>Five constraints were provided to each group in the preceding section of the challenge, “Katanaverse 0.0”, allowing any constraint solver to recover the flag (Ps. This was the unintended solution to the challenge).</p>
<p>Next in the line are 2 other constants, subtract_key and xor_key, which are again computed using the known part of the flag format</p>
<p>subtract_key &#x3D; 24<br>xor_key &#x3D; 181</p>
<br>

<h3 id="Determining-the-operations-performed"><a href="#Determining-the-operations-performed" class="headerlink" title="Determining the operations performed"></a>Determining the operations performed</h3><p>Each one group of the classififed array includes 12 nibbles which determine which 12 operations will be performed on the initial qubit.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img3.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>The given loop first initialises the qubit as<br>Alpha &#x3D; 1 + 0i<br>Beta &#x3D; 0 + 0i</p>
<p>and then 12 operations are performed on the qubit(<code>func_11</code>) one after the other. These 12 states of qubits are saved and later converted into their coordinate form via <code>func_13</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img4.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>These correspond to different operations performed on the qubit, one such function is <code>Blaze</code>.<br>There are in total 16 operations named as Blaze, Horizon, Nova, Quantum, Echo, Radiant, Zenith, Cipher, Nimbus, Pulse, Serene, Ember, Aurora, Lumina, Cascade and Kinetic.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img5.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>Within <code>func_10</code> under Blaze, we can see that it attempts at executing the shellcode given, but upon failure intends to displays “Well, I already said it’s broken.”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img6.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>Shellcode given unside the Blaze function looks like this</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">OPENQASM 2.0;</span><br><span class="line">include &quot;qelib1.inc&quot;;</span><br><span class="line">gate disentangler_dg q0 &#123;  &#125;</span><br><span class="line">gate state_preparation(param0,param1) q0 &#123; disentangler_dg q0; &#125;</span><br><span class="line">gate initialize(param0,param1) q0 &#123; reset q0; state_preparation(alpha,beta) q0; &#125;</span><br><span class="line">qreg q2[1];</span><br><span class="line">creg c2[1];</span><br><span class="line">initialize(alpha,beta) q2[0];</span><br><span class="line">rx(pi/4) q2[0];</span><br><span class="line">ry(pi/3) q2[0];</span><br><span class="line">rz(pi/4) q2[0];</span><br><span class="line">measure q2[0] -&gt; c2[0]; </span><br></pre></td></tr></table></figure></div>




<br>

<h3 id="Division-of-points"><a href="#Division-of-points" class="headerlink" title="Division of points"></a>Division of points</h3><p>The lines that are depicted between two spots are formed or determined by 41 pairs of numbers or integers. The distances between these locations multiplied by 10 (<code>func_8</code>) make up the weights of these points.</p>
<p>In this case, the two numbers point in the direction of two points that are connected by a line, as a result, a network made up of all 12 points is formed which are connected by those lines.</p>
<p>For each of the 41 pairings, the two points and their respective weights are kept in an array and sent to a function (<code>func_7</code>).</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img7.png"
                      alt="Katanaverse 1.0"
                ></p>
<br>

<h3 id="What-is-func-7"><a href="#What-is-func-7" class="headerlink" title="What is func_7 ?"></a>What is func_7 ?</h3><p>This is revealed by the shellcode or encrypted bytes within the function.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oh no! Not only is this function flawed, it is nonexistent. Could you please solve this?</span><br><span class="line"></span><br><span class="line">**Static noise</span><br><span class="line"></span><br><span class="line">Agent, We happened to record a conversation between Martin and his subordinates. For your reference, here is the transcript of our conversation.</span><br><span class="line"></span><br><span class="line">Subordinate 1: Is it possible for an ordinary person to open the vault?</span><br><span class="line">Martin: No, definitely not. The vault needs to be slashed 12 times in order to divide those 12 points efficiently, and this needs to be done multiple times...</span><br><span class="line">Subordinate 2: However, I have heard that you are required to use an &#x27;efficient method&#x27; to divide the points</span><br><span class="line">Martin: You are right, the key to this strange method is &#x27;Brute&#x27;</span><br><span class="line"></span><br><span class="line">All we have is this. All the best in finding the correct replacement for the given function.</span><br><span class="line"></span><br><span class="line">**Static noise</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Now let’s have a look at the shellcode given in Katanaverse 0.0 as well, because after all , this challenge is just an another part of 0.0</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oh no! Not only is this function flawed, it is nonexistent. Could you please solve this?</span><br><span class="line"></span><br><span class="line">**Static noise</span><br><span class="line"></span><br><span class="line">Agent, We happened to record a conversation between Martin and his subordinates. For your reference, here is the transcript of our conversation.</span><br><span class="line"></span><br><span class="line">Subordinate 1: Is it possible for an ordinary person to open the vault?</span><br><span class="line">Martin: No, definitely not. The vault needs to be slashed 12 times in order to divide those 12 points efficiently, and this needs to be done multiple times...</span><br><span class="line">Subordinate 2: However, I have heard that you are not required to use an &#x27;efficient method&#x27; to divide the points, but rather some other strange method?</span><br><span class="line">Martin: You are right, the key to this strange method is &#x27;Quantum&#x27;... Have you heard of Optimization?</span><br><span class="line"></span><br><span class="line">All we have is this. All the best in finding the correct replacement for the given function.</span><br><span class="line"></span><br><span class="line">**Static noise</span><br></pre></td></tr></table></figure></div>

<p>This clearly states few points - </p>
<ol>
<li>Quantum</li>
<li>Division of points</li>
<li>Optimization</li>
<li>Weighted (Because of the distance calculated between 2 points)</li>
<li>Brute</li>
</ol>
<p>Using these terms in a Google search provides us with the necessary response.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img8.png"
                      alt="Katanaverse 1.0"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img9.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>These searches hint at using a popular Quantum optimization technique used in efficient division of enities, that is, QAOA (Quantum Approximate Optimization Algorithm)</p>
<p>In Katanaverse 1.0, we only need the brute version of this algorithm, which can be again found on blog posts or can be attempted to write on your own.</p>
<p>Since here, the weights of the points are also given, that again can be used to find the technique</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img10.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>Official qiskit page itself gives us an easy script to implement the given problem <a class="link"   href="https://qiskit-community.github.io/qiskit-optimization/tutorials/06_examples_max_cut_and_tsp.html" >qiskit <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img11.png"
                      alt="Katanaverse 1.0"
                ></p>
<br>

<h3 id="Last-step"><a href="#Last-step" class="headerlink" title="Last step"></a>Last step</h3><p>After applying QAOA to every group in the classified array, 12 bits per group are obtained. These bits are then split in half to create two bytes. As a consequence, each group yields two final bytes, which are subsequently encrypted collectively using AES.</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img12.png"
                      alt="Katanaverse 1.0"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/katana_writeup/img13.png"
                      alt="Katanaverse 1.0"
                ></p>
<p>For comparison, the encrypted bytes of the right flag (after going through the full process) are provided.</p>
<br>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>So far we know what all is going on this challenge, therefore it’s time to consider how to get the flag back.</p>
<p>The constraints are given to make life easier.<br>We have the encrypted bytes of the result of the QAOA applied to the points. First, it is possible to decrypt the encrypted bytes and obtain all of the constants generated during runtime.</p>
<p>Since each group&#x2F;set of classified array is constructed from overlapped pairs of modified flag, we can make use of the flag format to obtain the flag byte by byte.</p>
<p>The approach being, make use of the last known character of the flag format, that is, ‘{‘. The characters of the flag after this character are unknown, hence we find all the possibilities of the next byte by using the constraints given. Since the number of constraints for the classified array group of ‘{‘ and the next byte of the flag is 3, we have 32 possibilites <code>(2^8[All possible 1 byte values] / 2^3[Branches narrowed down due to constraints given])</code></p>
<p>These 32 possibilites are passed through the entire process until the QAOA function and then the result is compared with the decrypted bytes from the binary.</p>
<p>Likewise, the discovered byte can be used to find the next byte in the order.</p>
<blockquote>
<p>Authors note:<br>These might lead to more than one possible character for the given scenario, but the branches can be eliminated by acquiring the subsequent iteration. There is a single path that leads to the last character ‘{‘. You receive the right flag if you continue down that path.</p>
</blockquote>
<br>


<h2 id="Final-Script"><a href="#Final-Script" class="headerlink" title="Final Script"></a>Final Script</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> networkx <span class="keyword">as</span> nx</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> pi, cos, sin, arccos, arctan2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_weight</span>(<span class="params">a, b</span>):       <span class="comment"># Distance between 2 points</span></span><br><span class="line">    sum_of_squares = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        diff = a[i] - b[i]</span><br><span class="line">        sum_of_squares += diff*diff</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(<span class="number">10</span>*np.sqrt(sum_of_squares))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">initial_coords, rotation_matrix</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(rotation_matrix, initial_coords)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xyz_to_alpha_beta</span>(<span class="params">xyz</span>):</span><br><span class="line">  xyz = np.asarray(xyz)</span><br><span class="line">  r = np.linalg.norm(xyz)</span><br><span class="line">  theta = arccos(xyz[<span class="number">2</span>] / r)</span><br><span class="line">  phi = arctan2(xyz[<span class="number">1</span>], xyz[<span class="number">0</span>])</span><br><span class="line">  alpha = cos(theta / <span class="number">2</span>)</span><br><span class="line">  beta = np.exp(<span class="number">1j</span> * phi) * sin(theta / <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">return</span> alpha, beta</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">alpha_beta_to_xyz</span>(<span class="params">alpha, beta</span>):</span><br><span class="line">  r = <span class="built_in">abs</span>(alpha)**<span class="number">2</span> + <span class="built_in">abs</span>(beta)**<span class="number">2</span></span><br><span class="line">  theta = <span class="number">2</span> * arccos(<span class="built_in">abs</span>(alpha) / np.sqrt(r))</span><br><span class="line">  phi = np.angle(beta / alpha)</span><br><span class="line">  x = r * sin(theta) * cos(phi)</span><br><span class="line">  y = r * sin(theta) * sin(phi)</span><br><span class="line">  z = r * cos(theta)</span><br><span class="line">  <span class="keyword">return</span> np.array([x, y, z])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zeroth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Blaze</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Horizon</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Nova</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">third</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Quantum</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fourth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Echo</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fifth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Radiant</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sixth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Zenith</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">seventh</span>(<span class="params">coords_xyz</span>):                      <span class="comment">#Cipher</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eigth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Nimbus</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ninth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Pulse</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tenth</span>(<span class="params">coords_xyz</span>):                        <span class="comment">#Serene</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eleventh</span>(<span class="params">coords_xyz</span>):                    <span class="comment">#Ember</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">twelfth</span>(<span class="params">coords_xyz</span>):                    <span class="comment">#Aurora</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">thirteenth</span>(<span class="params">coords_xyz</span>):                <span class="comment">#Lumina</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">2</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fourteenth</span>(<span class="params">coords_xyz</span>):                <span class="comment">#Cascade</span></span><br><span class="line">  a = rotate(coords_xyz, rx_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, ry_op(np.pi / <span class="number">3</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fifteenth</span>(<span class="params">coords_xyz</span>):                <span class="comment">#Kinetic</span></span><br><span class="line">  a = rotate(coords_xyz, ry_op(np.pi / <span class="number">4</span>))</span><br><span class="line">  a = rotate(a, rz_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a = rotate(a, rx_op(np.pi / <span class="number">6</span>))</span><br><span class="line">  a[<span class="number">0</span>] = <span class="built_in">round</span>(a[<span class="number">0</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">0</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">1</span>] = <span class="built_in">round</span>(a[<span class="number">1</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">1</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  a[<span class="number">2</span>] = <span class="built_in">round</span>(a[<span class="number">2</span>], <span class="number">5</span>) <span class="keyword">if</span> <span class="built_in">abs</span>(a[<span class="number">2</span>]) &gt; <span class="number">0.00001</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rx_op</span>(<span class="params">theta</span>):                <span class="comment">#Rotation along x axis</span></span><br><span class="line">    cos_a = np.cos(theta)</span><br><span class="line">    sin_a = np.sin(theta)</span><br><span class="line">    Rx = np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">0</span>, cos_a, -sin_a],</span><br><span class="line">                   [<span class="number">0</span>, sin_a, cos_a]])</span><br><span class="line">    <span class="keyword">return</span> Rx</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ry_op</span>(<span class="params">theta</span>):                <span class="comment">#Rotation along y axis</span></span><br><span class="line">    cos = np.cos(theta)</span><br><span class="line">    sin = np.sin(theta)</span><br><span class="line">    Ry = np.array([[cos, <span class="number">0</span>, sin],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">                   [-sin, <span class="number">0</span>, cos]])</span><br><span class="line">    <span class="keyword">return</span> Ry</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rz_op</span>(<span class="params">theta</span>):                <span class="comment">#Rotation along z axis</span></span><br><span class="line">    cos = np.cos(theta)</span><br><span class="line">    sin = np.sin(theta)</span><br><span class="line">    Rz = np.array([[cos, -sin, <span class="number">0</span>],</span><br><span class="line">                   [sin, cos, <span class="number">0</span>],</span><br><span class="line">                   [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    <span class="keyword">return</span> Rz</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">choi, points</span>):</span><br><span class="line">  <span class="keyword">if</span> choi == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> zeroth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> first(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> second(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">return</span> third(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> fourth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">return</span> fifth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">return</span> sixth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">return</span> seventh(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> eigth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">return</span> ninth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">return</span> tenth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">11</span>:</span><br><span class="line">    <span class="keyword">return</span> eleventh(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">return</span> twelfth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">13</span>:</span><br><span class="line">    <span class="keyword">return</span> thirteenth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">14</span>:</span><br><span class="line">    <span class="keyword">return</span> fourteenth(points)</span><br><span class="line">  <span class="keyword">elif</span> choi == <span class="number">15</span>:</span><br><span class="line">    <span class="keyword">return</span> fifteenth(points)</span><br><span class="line">  </span><br><span class="line">pairs = [[<span class="number">0</span>,<span class="number">2</span>], [<span class="number">0</span>,<span class="number">4</span>], [<span class="number">0</span>,<span class="number">6</span>], [<span class="number">0</span>,<span class="number">8</span>], [<span class="number">0</span>,<span class="number">10</span>], [<span class="number">1</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">3</span>], [<span class="number">1</span>,<span class="number">5</span>], [<span class="number">1</span>,<span class="number">7</span>], [<span class="number">1</span>,<span class="number">9</span>], [<span class="number">1</span>,<span class="number">11</span>], [<span class="number">2</span>,<span class="number">1</span>], [<span class="number">2</span>,<span class="number">4</span>], [<span class="number">2</span>,<span class="number">6</span>], [<span class="number">2</span>,<span class="number">8</span>], [<span class="number">2</span>,<span class="number">10</span>], [<span class="number">3</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">5</span>], [<span class="number">3</span>,<span class="number">7</span>], [<span class="number">3</span>,<span class="number">9</span>], [<span class="number">3</span>,<span class="number">11</span>], [<span class="number">4</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">6</span>], [<span class="number">4</span>,<span class="number">8</span>], [<span class="number">4</span>,<span class="number">10</span>], [<span class="number">5</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">7</span>], [<span class="number">5</span>,<span class="number">9</span>], [<span class="number">5</span>,<span class="number">11</span>], [<span class="number">6</span>,<span class="number">5</span>], [<span class="number">6</span>,<span class="number">8</span>], [<span class="number">6</span>,<span class="number">10</span>], [<span class="number">7</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">9</span>], [<span class="number">7</span>,<span class="number">11</span>], [<span class="number">8</span>,<span class="number">7</span>], [<span class="number">8</span>,<span class="number">10</span>], [<span class="number">9</span>,<span class="number">8</span>], [<span class="number">9</span>,<span class="number">11</span>], [<span class="number">10</span>,<span class="number">9</span>], [<span class="number">11</span>,<span class="number">10</span>]]</span><br><span class="line"></span><br><span class="line">rand_arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">cond_arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">dec_arr = [<span class="number">85</span>, <span class="number">74</span>, <span class="number">105</span>, <span class="number">82</span>, <span class="number">105</span>, <span class="number">102</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">101</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">106</span>, <span class="number">89</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">90</span>, <span class="number">85</span>, <span class="number">106</span>, <span class="number">90</span>, <span class="number">116</span>, <span class="number">116</span>, <span class="number">90</span>, <span class="number">117</span>, <span class="number">74</span>, <span class="number">102</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">106</span>, <span class="number">91</span>, <span class="number">82</span>, <span class="number">90</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">74</span>, <span class="number">86</span>, <span class="number">100</span>, <span class="number">86</span>, <span class="number">118</span>, <span class="number">85</span>, <span class="number">106</span>, <span class="number">84</span>, <span class="number">110</span>]</span><br><span class="line"></span><br><span class="line">new_sol = []</span><br><span class="line">new_sol.append([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])    <span class="comment">#Initial solution &#x27;&#123;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> bug <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line"></span><br><span class="line">    solutions = new_sol</span><br><span class="line">    new_sol=[]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFor &quot;</span>, bug)</span><br><span class="line">    <span class="keyword">for</span> hat <span class="keyword">in</span> solutions:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Trying...&quot;</span>, hat)</span><br><span class="line">        a = hat</span><br><span class="line">        cond = [cond_arr[bug*<span class="number">3</span>], cond_arr[bug*<span class="number">3</span>+<span class="number">1</span>], cond_arr[bug*<span class="number">3</span>+<span class="number">2</span>]]                </span><br><span class="line">        rand = [rand_arr[bug*<span class="number">3</span>], rand_arr[bug*<span class="number">3</span>+<span class="number">1</span>], rand_arr[bug*<span class="number">3</span>+<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        dec_bytes = [dec_arr[bug*<span class="number">2</span>], dec_arr[bug*<span class="number">2</span>+<span class="number">1</span>]]    <span class="comment">#AES decrypted bytes for each character</span></span><br><span class="line">        best = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        best_sol=[]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#Retrieveing the 12 bit form of the encrypted bytes</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            best += <span class="built_in">bin</span>(dec_bytes[i])[<span class="number">3</span>:]</span><br><span class="line">        best_sol = [<span class="built_in">int</span>(char) <span class="keyword">for</span> char <span class="keyword">in</span> best]    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                        <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                                <span class="keyword">for</span> u <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                                    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">                                        </span><br><span class="line">                                        <span class="comment">#Bruting the second character in the pair</span></span><br><span class="line">                                        b = q,w,e,r,t,y,u,i         </span><br><span class="line">                                        c = [[<span class="number">0</span>]*<span class="number">8</span>]*<span class="number">6</span></span><br><span class="line">                                        k=<span class="number">0</span></span><br><span class="line">                                        <span class="keyword">for</span> j <span class="keyword">in</span> rand:</span><br><span class="line">                                            c = [<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">                                            c[<span class="number">0</span>] = a[(j+<span class="number">0</span>)]^b[(j+<span class="number">0</span>)]</span><br><span class="line">                                            c[<span class="number">1</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                                            c[<span class="number">2</span>] = a[(<span class="number">2</span>+j)]^b[(<span class="number">2</span>+j)]</span><br><span class="line">                                            c[<span class="number">3</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">0</span>+j)]</span><br><span class="line">                                            c[<span class="number">4</span>] = a[(<span class="number">0</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                                            c[<span class="number">5</span>] = a[(<span class="number">2</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                                            c[<span class="number">6</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">2</span>+j)]</span><br><span class="line">                                            c[<span class="number">7</span>] = a[(<span class="number">0</span>+j)]^b[(<span class="number">1</span>+j)]^a[(<span class="number">2</span>+j)]</span><br><span class="line">                                            </span><br><span class="line">                                            <span class="comment">#Check for constraints</span></span><br><span class="line">                                            <span class="keyword">if</span> c[<span class="number">0</span>] ^ c[<span class="number">7</span>] != cond[k]:                </span><br><span class="line">                                                k+=<span class="number">1</span>  </span><br><span class="line">                                        <span class="keyword">if</span> k == <span class="number">3</span>:</span><br><span class="line">                                            res.append(b)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">            classified = []</span><br><span class="line">            final_res = res[i]</span><br><span class="line">            b = res[i]</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#Formation of the classified array for each possibilitity</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):                </span><br><span class="line">                c = [<span class="number">0</span>]*<span class="number">8</span></span><br><span class="line">                c[<span class="number">0</span>] = a[(j+<span class="number">0</span>)]^b[(j+<span class="number">0</span>)]        <span class="comment">#Bit manipulation</span></span><br><span class="line">                c[<span class="number">1</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                c[<span class="number">2</span>] = a[(<span class="number">2</span>+j)]^b[(<span class="number">2</span>+j)]</span><br><span class="line">                c[<span class="number">3</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">0</span>+j)]</span><br><span class="line">                c[<span class="number">4</span>] = a[(<span class="number">0</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                c[<span class="number">5</span>] = a[(<span class="number">2</span>+j)]^b[(<span class="number">1</span>+j)]</span><br><span class="line">                c[<span class="number">6</span>] = a[(<span class="number">1</span>+j)]^b[(<span class="number">2</span>+j)]</span><br><span class="line">                c[<span class="number">7</span>] = a[(<span class="number">0</span>+j)]^b[(<span class="number">1</span>+j)]^a[(<span class="number">2</span>+j)]</span><br><span class="line">                classified.append(c)</span><br><span class="line">            op_list = []</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#Obtaining the list of (12) operations based on the value of each nibble</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):                </span><br><span class="line">                op_list.append(classified[k][<span class="number">0</span>]*<span class="number">8</span>+classified[k][<span class="number">1</span>]*<span class="number">4</span>+classified[k][<span class="number">2</span>]*<span class="number">2</span>+classified[k][<span class="number">3</span>]*<span class="number">1</span>)</span><br><span class="line">                op_list.append(classified[k][<span class="number">4</span>]*<span class="number">1</span>+classified[k][<span class="number">5</span>]*<span class="number">2</span>+classified[k][<span class="number">6</span>]*<span class="number">4</span>+classified[k][<span class="number">7</span>]*<span class="number">8</span>)</span><br><span class="line">    </span><br><span class="line">            points = [[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="comment">#Inital QuBit Value in coordinate form</span></span><br><span class="line">            xyz_in = np.array([<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])        </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">                ant = op_list[j]</span><br><span class="line">                <span class="comment">#Performing the given operation on the QuBit</span></span><br><span class="line">                xyz_in = choice(ant, xyz_in)    </span><br><span class="line">                points[j] = xyz_in</span><br><span class="line"></span><br><span class="line">            elist = [[<span class="number">0</span>] * <span class="number">3</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>)] </span><br><span class="line"></span><br><span class="line">            <span class="comment">#Formation of elist array</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">41</span>):</span><br><span class="line">                elist[j][<span class="number">0</span>] = pairs[j][<span class="number">0</span>]</span><br><span class="line">                elist[j][<span class="number">1</span>] = pairs[j][<span class="number">1</span>]</span><br><span class="line">                elist[j][<span class="number">2</span>] = calc_weight(points[pairs[j][<span class="number">0</span>]], points[pairs[j][<span class="number">1</span>]])  </span><br><span class="line"></span><br><span class="line">            n = <span class="number">12</span>                          <span class="comment">#Number of points</span></span><br><span class="line">            G = nx.Graph()</span><br><span class="line">            G.add_nodes_from(np.arange(<span class="number">0</span>, n, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">            G.add_weighted_edges_from(elist)</span><br><span class="line">            </span><br><span class="line">            w = np.zeros([n, n])</span><br><span class="line">            <span class="keyword">for</span> iy <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    temp = G.get_edge_data(iy, j, default=<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">if</span> temp != <span class="number">0</span>:</span><br><span class="line">                        w[iy, j] = temp[<span class="string">&quot;weight&quot;</span>]</span><br><span class="line">                </span><br><span class="line">            <span class="comment">#Bruting the way to divide the points in 2 groups</span></span><br><span class="line">            best_cost_brute = <span class="number">0</span>                    </span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**n):</span><br><span class="line">                x = [<span class="built_in">int</span>(t) <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">list</span>(<span class="built_in">bin</span>(b)[<span class="number">2</span>:].zfill(n)))]</span><br><span class="line">                cost = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> iy <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                        cost = cost + w[iy, j] * x[iy] * (<span class="number">1</span> - x[j])</span><br><span class="line">                <span class="keyword">if</span> best_cost_brute &lt; cost:</span><br><span class="line">                    best_cost_brute = cost</span><br><span class="line">                    xbest_brute = x</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> xbest_brute == best_sol:</span><br><span class="line">                charac_s = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(bit) <span class="keyword">for</span> bit <span class="keyword">in</span> final_res)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">chr</span>(<span class="built_in">int</span>(charac_s, <span class="number">2</span>)) <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#125;&#123;&#x27;</span>:</span><br><span class="line">                    <span class="comment">#Eliminating duplicate solutions</span></span><br><span class="line">                    <span class="keyword">if</span> final_res <span class="keyword">not</span> <span class="keyword">in</span> new_sol:            </span><br><span class="line">                        new_sol.append(final_res)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Found: &quot;</span>, final_res, <span class="built_in">chr</span>(<span class="built_in">int</span>(charac_s, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">For  0</span><br><span class="line">Trying... [0, 1, 1, 1, 1, 0, 1, 1]</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 0) b</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line"></span><br><span class="line">For  1</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 0)</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 1, 1, 0) V</span><br><span class="line"></span><br><span class="line">For  2</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 1, 1, 0)</span><br><span class="line">Found:  (0, 0, 1, 1, 1, 0, 0, 0) 8</span><br><span class="line">Found:  (0, 0, 1, 1, 1, 0, 0, 1) 9</span><br><span class="line"></span><br><span class="line">For  3</span><br><span class="line">Trying... (0, 0, 1, 1, 1, 0, 0, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 0, 1, 0) j</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 0, 1, 1) k</span><br><span class="line">Trying... (0, 0, 1, 1, 1, 0, 0, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 0, 1, 0) j</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 0, 1, 1) k</span><br><span class="line"></span><br><span class="line">For  4</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 0, 1) a</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 0) b</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 0) d</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 0, 1) a</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 0) b</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 1) e</span><br><span class="line"></span><br><span class="line">For  5</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 0, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 0, 0, 1) Q</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 0, 1, 0) R</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 1, 0, 0)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 0, 1, 0) R</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 1, 0, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 0, 1, 1) S</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line"></span><br><span class="line">For  6</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 0, 0, 1)</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 0)</span><br><span class="line">Found:  (0, 1, 0, 0, 0, 0, 1, 0) B</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 1)</span><br><span class="line">Found:  (0, 1, 0, 0, 0, 0, 1, 1) C</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 0, 0, 0, 0, 1) A</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 0, 1, 0)</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 0, 1, 1)</span><br><span class="line"></span><br><span class="line">For  7</span><br><span class="line">Trying... (0, 1, 0, 0, 0, 0, 1, 0)</span><br><span class="line">Found:  (0, 0, 1, 1, 0, 0, 0, 0) 0</span><br><span class="line">Trying... (0, 1, 0, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 0, 1, 1, 0, 0, 0, 1) 1</span><br><span class="line">Trying... (0, 1, 0, 0, 0, 0, 0, 1)</span><br><span class="line"></span><br><span class="line">For  8</span><br><span class="line">Trying... (0, 0, 1, 1, 0, 0, 0, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 0, 1) a</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 0) b</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 0) d</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 1) e</span><br><span class="line">Trying... (0, 0, 1, 1, 0, 0, 0, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 0, 1) a</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 0) d</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 0, 1) e</span><br><span class="line"></span><br><span class="line">For  9</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 0, 1)</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 1, 0, 1) m</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 1, 1, 0) n</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 1, 0, 0)</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 1, 0, 1)</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 1, 0, 0) l</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 1, 1, 1) o</span><br><span class="line"></span><br><span class="line">For  10</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 1, 0, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 1, 1, 0)</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 1, 0, 0)</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 1, 1, 1)</span><br><span class="line"></span><br><span class="line">For  11</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 0) t</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 1) u</span><br><span class="line"></span><br><span class="line">For  12</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 1, 0, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 0, 1) a</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 1) c</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 1, 0, 1)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 0, 1, 0) b</span><br><span class="line"></span><br><span class="line">For  13</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 0, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 1)</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line"></span><br><span class="line">For  14</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 0)</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 1, 1, 0) N</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 1)</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 1, 0)</span><br><span class="line"></span><br><span class="line">For  15</span><br><span class="line">Trying... (0, 1, 0, 0, 1, 1, 1, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 0, 1, 1, 0) f</span><br><span class="line"></span><br><span class="line">For  16</span><br><span class="line">Trying... (0, 1, 1, 0, 0, 1, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 0) X</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 0, 1) Y</span><br><span class="line">Found:  (0, 1, 0, 1, 1, 0, 1, 0) Z</span><br><span class="line"></span><br><span class="line">For  17</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 0)</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 0, 1)</span><br><span class="line">Trying... (0, 1, 0, 1, 1, 0, 1, 0)</span><br><span class="line">Found:  (0, 1, 1, 0, 1, 1, 1, 0) n</span><br><span class="line"></span><br><span class="line">For  18</span><br><span class="line">Trying... (0, 1, 1, 0, 1, 1, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 1, 1, 0) V</span><br><span class="line">Found:  (0, 1, 0, 1, 0, 1, 1, 1) W</span><br><span class="line"></span><br><span class="line">For  19</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 1, 1, 0)</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 0, 1, 0) J</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 0, 1, 1) K</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 0, 1, 1) s</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 0) t</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 1) u</span><br><span class="line">Trying... (0, 1, 0, 1, 0, 1, 1, 1)</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 0, 0, 1) I</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 0, 1, 0) J</span><br><span class="line">Found:  (0, 1, 0, 0, 1, 0, 1, 1) K</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 0, 1, 0) r</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 0) t</span><br><span class="line">Found:  (0, 1, 1, 1, 0, 1, 0, 1) u</span><br><span class="line"></span><br><span class="line">For  20</span><br><span class="line">Trying... (0, 1, 0, 0, 1, 0, 1, 0)</span><br><span class="line">Trying... (0, 1, 0, 0, 1, 0, 1, 1)</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 0, 1, 1)</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 1, 0, 0)</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 1, 0, 1)</span><br><span class="line">Found:  (0, 1, 1, 1, 1, 1, 0, 1) &#125;</span><br><span class="line">Trying... (0, 1, 0, 0, 1, 0, 0, 1)</span><br><span class="line">Trying... (0, 1, 1, 1, 0, 0, 1, 0)</span><br></pre></td></tr></table></figure></div>

<p>Basically prune the branches which are not yielding any output in the next iteration and that narrows down the flag to</p>
<p><code>cV9jbXB0bmctaXNfZnVu</code></p>
<p>with a requirement of brute for few of the characters</p>
<p>Flag - bi0sctf{q_cmptng-is_fun}</p>
<br>

<h2 id="Katanaverse-0-0"><a href="#Katanaverse-0-0" class="headerlink" title="Katanaverse 0.0"></a>Katanaverse 0.0</h2><p>With the exception of the quantity of constraints and the technique for Dividing the points, this level is comparable to 1.0 in many ways. In contrast to the brute technique employed in 1.0, the appropriate quantum method is utilized in 0.0 to divide points more quickly. The same <a class="link"   href="https://qiskit-community.github.io/qiskit-optimization/tutorials/06_examples_max_cut_and_tsp.html" >URL <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> as previously has the code implementation for the same.</p>
<p>The platform that allows us to run our code on quantum computers, or the platform that supports the Qiskit module, is required to execute this. I think <a class="link"   href="https://lab.quantum.ibm.com/" >IBM’s Quantum laboratories <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> is the best platform to conduct this on.</p>
<p>Flag - bi0sCTF{QuBitJugglr}</p>
<h3 id="Closing-Notes"><a href="#Closing-Notes" class="headerlink" title="Closing Notes"></a>Closing Notes</h3><p>It is undoubtedly difficult to use the notion of quantum in a challenge, but I did my best to do so and do it right. </p>
<p>We appreciate everyone who tried their hand at the CTF challenge.<br>Please feel free to DM me on Discord if you have any questions or suggestions!</p>
<p><strong>Contact: k1n0r4</strong> | <a class="link"   href="https://twitter.com/k1n0r4" >twitter <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> | <a href="www.linkedin.com/in/sejal-koshta-">linkedin</a></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>VM</tag>
        <tag>bi0sCTF</tag>
        <tag>writeup</tag>
        <tag>linux</tag>
        <tag>reversing</tag>
        <tag>quantum</tag>
      </tags>
  </entry>
  <entry>
    <title>Required : hxpCTF 2023</title>
    <url>/2023/03/30/Required-hxpCTF-2023/</url>
    <content><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>I have written a super safe flag encryptor. I’m sure nobody can figure out what my original flag was:</p>
<p>0xd19ee193b461fd8d1452e7659acb1f47dc3ed445c8eb4ff191b1abfa7969</p>
<p><b>Points</b> - 182 points</p>
<p><b>Solves</b> - 46 solves</p>
<p><b>CTF</b> Rating - 100</p>
<hr>

<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Initial-Analysis"><a href="#Initial-Analysis" class="headerlink" title="Initial Analysis"></a>Initial Analysis</h3><p>A total of 300 javascript files are provided with a number of missing files.<br>In most cases, the files contain a variety of constraints that our original flag bytes must navigate to produce the output mentioned in the description.</p>
<p>Additional to these files is another javascript file named <code>required.js</code>.</p>
<p>As can be seen from this file, it reads a flag file first, and then uses a require() function to <b>import modules</b>, which are the javascript files above. These javascript files are imported with three parameters.</p>
<h3 id="Working-of-the-challenge"><a href="#Working-of-the-challenge" class="headerlink" title="Working of the challenge"></a>Working of the challenge</h3><p>By observation we were able to point out few files which were imported repetatively in <code>required.js</code>.<br>Those files are : “555.js”, “157.js”, “28.js”, “299.js”, “394.js” and “736.js”.</p>
<p>We examined each file one by one.</p>
<p>For example, if we look into <code>736.js</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],o=&#123;&#125;,<span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="built_in">require</span>(<span class="string">&#x27;./289&#x27;</span>)(j,i)).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[K,V]</span>)=&gt;</span><span class="title class_">Object</span>.<span class="title function_">entries</span>(V).<span class="title function_">forEach</span>(<span class="function">(<span class="params">[k,v]</span>)=&gt;</span>(o[K]=o[K]||&#123;&#125;,o[K][k]=v))),<span class="built_in">require</span>(<span class="string">`./<span class="subst">$&#123;j&#125;</span>`</span>))</span><br></pre></td></tr></table></figure></div>

<p>This, in turn, calls another module <code>289.js</code> and the second (j%30) and first (i%30) parameters are passed through (in the same order) as the parameters for <code>289.js</code>.</p>
<p><code>Because the flag length is presumably 30, the original 3 parameters i,j and k undergo an operation &quot;%=30&quot; - we will see in the next part of this article why we consider the flag length.</code> </p>
<p>Let’s see what’s inside <code>289.js</code></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">`&#123;&quot;__proto__&quot;:&#123;&quot;data&quot;:&#123;&quot;name&quot;:&quot;./<span class="subst">$&#123;i&#125;</span>&quot;,&quot;exports&quot;:&#123;&quot;.&quot;: &quot;./<span class="subst">$&#123;j&#125;</span>.js&quot;&#125;&#125;,&quot;path&quot;: &quot;./&quot;&#125;&#125;`</span>))</span><br></pre></td></tr></table></figure></div>

<p>It simply indicates that the second parameter is executed instead of the first parameter when the first parameter is called. So that’s basically one file is being mapped to another file. This mapping is saved in some sorts of cache.</p>
<p>Hence, going through all those 6 repetitive files, we find the correct mappings.</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;555&quot;: (2,3)</span><br><span class="line">&quot;157&quot;: (1,3)</span><br><span class="line">&quot;28&quot;:  (1,2)</span><br><span class="line">&quot;299&quot;: (3,2)</span><br><span class="line">&quot;394&quot;: (3,1)</span><br><span class="line">&quot;736&quot;: (2,1)</span><br></pre></td></tr></table></figure></div>

<p>There are a few more special files, like <code>37.js</code> which is imported at the end with 0 parameters. </p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 37.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;./314&#x27;</span>)(i)))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 314.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],s=<span class="string">&#x27;0x&#x27;</span>,i.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">b</span>=&gt;</span>(s+=(<span class="string">&#x27;0&#x27;</span>+(b-<span class="number">0</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">slice</span>(-<span class="number">2</span>))),s)</span><br></pre></td></tr></table></figure></div>

<p>It’s clearly visible that <code>37.js</code> imports <code>314.js</code> which prints out a hex value. This looks similar to the output hex string provided to us in the Description.</p>
<p>Apart from that, there is a module that clears out the current cache.</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 556.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],<span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="built_in">require</span>.<span class="property">cache</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">i</span>=&gt;</span>&#123;<span class="keyword">delete</span> <span class="built_in">require</span>.<span class="property">cache</span>[i]&#125;))</span><br></pre></td></tr></table></figure></div>

<p>Rest of the files apply constraints like</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 490.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=<span class="function">(<span class="params">i,j,t</span>)=&gt;</span>(i%=<span class="number">30</span>,j%=<span class="number">30</span>,t%=<span class="number">30</span>,i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).<span class="title function_">split</span>(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],f[i]/=f[<span class="number">29</span>],f[i]&amp;=<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure></div>

<p><code>f[i]/=f[29],f[i]&amp;=0xff)</code> are the constraints where i is being replaced by the first parameter(i) % 30.<br>since our flag bytes are read in array name ‘f’, the indices of ‘f’ are limited to 30 (i%30) which seems to be the length of the flag.</p>
<p>Our next step is to find out which constraints are manipulating the flag bytes.</p>
<h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h3><p>To obtain those constraints, we use a simple yet smart approach.Except for some special files mentioned above, all other files are executed directly, which seems to have just the required constraints</p>
<p>In an attempt to print these constraints, a ‘console.log’ was appended to each file that contained constraints, skipping special files or files not present. Also, to get the correct index numbers in the constraint, we replace those variables with the actual values by appending another line <code>replaceAll</code>.</p>
<h3 id="Extracting-the-constraints"><a href="#Extracting-the-constraints" class="headerlink" title="Extracting the constraints"></a>Extracting the constraints</h3><h4 id="Script-1"><a href="#Script-1" class="headerlink" title="Script #1"></a>Script #1</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">some_dict = &#123;</span><br><span class="line">    <span class="string">&quot;555&quot;</span>: (<span class="number">2</span>,<span class="number">3</span>),</span><br><span class="line">    <span class="string">&quot;157&quot;</span>: (<span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">    <span class="string">&quot;28&quot;</span>:  (<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="string">&quot;299&quot;</span>: (<span class="number">3</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="string">&quot;394&quot;</span>: (<span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line">    <span class="string">&quot;736&quot;</span>: (<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addcons</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(i) <span class="keyword">in</span> some_dict <span class="keyword">or</span> i == <span class="number">37</span> <span class="keyword">or</span> i == <span class="number">314</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;JSON&quot;</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;delete&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            eqn = data[<span class="number">77</span>:-<span class="number">1</span>]</span><br><span class="line">            data = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            data = data[:<span class="built_in">len</span>(data)-<span class="number">1</span>] + [<span class="string">f&#x27;console.log(&quot;<span class="subst">&#123;eqn&#125;</span>&quot;.replaceAll(&quot;i&quot;, i).replaceAll(&quot;j&quot;, j).replaceAll(&quot;t&quot;, t))&#x27;</span>] + [data[-<span class="number">1</span>]]</span><br><span class="line">            data = <span class="string">&quot;,&quot;</span>.join(data) </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span>.js&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    addcons()</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<br>

<p>This results in</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 490.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span>=(i,j,t)=&gt;(i%=<span class="number">30</span>,j%=<span class="number">30</span>,t%=<span class="number">30</span>,i+=[],j+<span class="string">&quot;&quot;</span>,t=(t+&#123;&#125;).split(<span class="string">&quot;[&quot;</span>)[<span class="number">0</span>],f[i]/=f[<span class="number">29</span>],console.log(<span class="string">&quot;f[i]/=f[29],f[i]&amp;=0xff&quot;</span>.replaceAll(<span class="string">&quot;i&quot;</span>, i).replaceAll(<span class="string">&quot;j&quot;</span>, j).replaceAll(<span class="string">&quot;t&quot;</span>, t)),f[i]&amp;=<span class="number">0xff</span>)</span><br></pre></td></tr></table></figure></div>

<p>Once the javascript files have been updated, the required.js file is run with a sample flag. When required.js is invoked, it prints out the constraints due to the presence of the console.log file.</p>
<h3 id="Final-Step"><a href="#Final-Step" class="headerlink" title="Final Step"></a>Final Step</h3><p>Hereafter, we utilize z3 in order to solve the constraints and calculate the original flag bytes.</p>
<h4 id="Script-2"><a href="#Script-2" class="headerlink" title="Script #2"></a>Script #2</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = [BitVec(<span class="string">f&#x27;flag_<span class="subst">&#123;i&#125;</span>&#x27;</span>, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>)]</span><br><span class="line"></span><br><span class="line">sol = Solver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sol.add(f[<span class="number">0</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line">sol.add(f[<span class="number">1</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;x&#x27;</span>))</span><br><span class="line">sol.add(f[<span class="number">2</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;p&#x27;</span>))</span><br><span class="line">sol.add(f[<span class="number">3</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#123;&#x27;</span>))</span><br><span class="line">sol.add(f[<span class="number">29</span>] == <span class="built_in">ord</span>(<span class="string">&#x27;&#125;&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    sol.add(f[i] &gt; <span class="number">32</span>, f[i] &lt; <span class="number">127</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f[<span class="number">17</span>]+=f[<span class="number">5</span>]</span><br><span class="line">f[<span class="number">17</span>]&amp;=<span class="number">0xff</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">f[<span class="number">15</span>]-=f[<span class="number">17</span>]</span><br><span class="line">f[<span class="number">15</span>]&amp;=<span class="number">0xff</span></span><br><span class="line">f[<span class="number">0</span>]=~f[<span class="number">0</span>]&amp;<span class="number">0xff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">final = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;d19ee193b461fd8d1452e7659acb1f47dc3ed445c8eb4ff191b1abfa7969&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    sol.add(f[i] == final[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sol.check())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sol.check()==sat:</span><br><span class="line">    m = sol.model()</span><br><span class="line"></span><br><span class="line">    res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(m):</span><br><span class="line">        res[<span class="built_in">str</span>(i)]=<span class="built_in">int</span>(<span class="built_in">str</span>(m[i]))</span><br><span class="line">    rkey = <span class="built_in">list</span>(res.keys())</span><br><span class="line">    rkey.sort()</span><br><span class="line">    sres = &#123;i: res[i] <span class="keyword">for</span> i <span class="keyword">in</span> rkey&#125;</span><br><span class="line">    flag = [sres[i] <span class="keyword">for</span> i <span class="keyword">in</span> sres]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i&amp;<span class="number">0xff</span>) <span class="keyword">for</span> i <span class="keyword">in</span> flag]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;unsat&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Find the complete script <a href="/files/required/final_script.py">here</a></p>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Using a simple trick saves us from emulating or understanding the entire functionality of required.js. </p>
<h4 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h4><p><b><code>hxp&#123;Cann0t_f1nd_m0dule_&#39;fl4g&#39;&#125;</code></b></p>
<br>

<p>Ciao !!<br><br></p>
<hr>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>writeup</tag>
        <tag>reversing</tag>
        <tag>hxpCTF</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Scam Hunting by Lena Yu</title>
    <url>/2024/03/01/Scam-Hunting-by-Lena-Yu/</url>
    <content><![CDATA[<p>At the recent GCC (Global Cybersecurity Camp) event, I had the opportunity to attend an unofficial workshop led by <a class="link"   href="https://www.linkedin.com/in/lenaaaa" >Lena Yu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> titled “How to Hunt Undiscovered Scams”. Despite not being part of the official program, the session proved to be highly informative and engaging.</p>
<p>So, picture this: a group of us huddled around a laptop, led by Lena Yu, diving into the depths of the internet to hunt down undiscovered scams. Lena, with her savvy insights, guided us through the process with ease.</p>
<p>First up, we delved into the world of open source intelligence (OSINT). We used all sorts of tools to sift through the digital noise and uncover potential scams lurking in the shadows.</p>
<p>Once we had our suspects lined up, it was time for phase two: analyzing those sus links. We meticulously examined each link, checking for signs of malicious activity.</p>
<p>Throughout the session, Lena shared invaluable advice on how to stay safe in the online jungle. It’s a wild world out there, folks, and knowing how to navigate it safely is key. I couldn’t help but feel grateful for Lena’s expertise and willingness to share it with us.</p>
<p>In the end, it was both eye-opening and strangely satisfying to uncover these hidden dangers lurking in the digital underbelly. </p>
<p>This is a brief summary of the session’s events.</p>
<br />

<h4 id="Phase-One-Finding-Scams"><a href="#Phase-One-Finding-Scams" class="headerlink" title="Phase One: Finding Scams"></a>Phase One: Finding Scams</h4><p>
  We searched through some common scam links sites, here are the ones we found
</p>

<h4 id="1-Temporary-Phone-numbers-📎"><a href="#1-Temporary-Phone-numbers-📎" class="headerlink" title="1. Temporary Phone numbers 📎"></a>1. Temporary Phone numbers <a class="link"   href="https://receive-smss.com/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>These are the burner&#x2F;public phones, which are utilized in a manner similar to how we occasionally get around the authentication procedure by obtaining OTPs via temporary mail ids.</li>
<li>These are public numbers, therefore scam connections are frequently visible.</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting1.png"
                      alt="Scam Hunting"
                ></p>
<ul>
<li>These are quite susceptible to scams and a prime location for them to operate.</li>
</ul>
<br>

<h4 id="2-Twitter-📎"><a href="#2-Twitter-📎" class="headerlink" title="2. Twitter 📎"></a>2. Twitter <a class="link"   href="https://twitter.com/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>Easiest way is to search for hashtags like #Fraud, #scam, #phishing, #scamalert, #SCAM</li>
<li>Look for screenshots from users containing scam links</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting2.png"
                      alt="Scam Hunting"
                ></p>
<ul>
<li>You have the option to search in many languages. We tried searching in Japanese, and the results show numerous screenshots of frauds that include links.</li>
<li>You may also conduct a search by entering the name of a business or agency, such as a bank or a telecom provider, as they are more likely to be scammed.</li>
</ul>
<br />

<h4 id="3-Other-Ways"><a href="#3-Other-Ways" class="headerlink" title="3. Other Ways"></a>3. Other Ways</h4><ul>
<li>Other ways could be to look into different sites or forums where you can find the scams which are not discovered yet</li>
<li>For the ones which are already discovered you can check the database on <a class="link"   href="https://openphish.com/phishing_database.html" >OpenPhish <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ul>
<br/>

<h3 id="Phase-Two-Analysing-the-links"><a href="#Phase-Two-Analysing-the-links" class="headerlink" title="Phase Two: Analysing the links"></a>Phase Two: Analysing the links</h3><hr />

<br />

<h4 id="1-Virustotal-📎"><a href="#1-Virustotal-📎" class="headerlink" title="1. Virustotal 📎"></a>1. Virustotal <a class="link"   href="https://www.virustotal.com/gui/home/url" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>VirusTotal can be used to analyze URLs and websites to determine if they host any malicious content, such as phishing pages or malware distribution sites. </li>
<li>Users can enter a website’s URL into VirusTotal for scanning.</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting3.png"
                      alt="Scam Hunting"
                ></p>
<blockquote>
<p>Note: No malicious activities does not mean it is not suspicious. </p>
</blockquote>
<br />

<h4 id="2-UrlScan-📎"><a href="#2-UrlScan-📎" class="headerlink" title="2. UrlScan 📎"></a>2. UrlScan <a class="link"   href="https://urlscan.io/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>Public scans can be performed on the suspected link</li>
<li>As a result, you can also view the interface of the suspected link and interact with it</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting4.png"
                      alt="Scam Hunting"
                ></p>
<br />

<h4 id="3-Browserling-📎"><a href="#3-Browserling-📎" class="headerlink" title="3. Browserling 📎"></a>3. Browserling <a class="link"   href="https://www.browserling.com/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>Once more, this facilitates using the connection in a sandbox and seeing how it behaves in real time. </li>
<li>However, it allows you to engage with the sandbox in addition to just watching. </li>
<li>For instance, you can click on any link that the scam link displays and proceed to see what occurs.</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting5.png"
                      alt="Scam Hunting"
                ></p>
<h4 id="4-ANY-RUN-📎"><a href="#4-ANY-RUN-📎" class="headerlink" title="4. ANY.RUN 📎"></a>4. ANY.RUN <a class="link"   href="https://any.run/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>One important feature of this site is that you can run the instance of the scam link in a sandbox and observe the behaviour live</li>
<li>You can also capture the network traffic sent or recieved by the link.</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting6.png"
                      alt="Scam Hunting"
                ></p>
<h4 id="5-Redirect-Checker-📎"><a href="#5-Redirect-Checker-📎" class="headerlink" title="5. Redirect Checker 📎"></a>5. Redirect Checker <a class="link"   href="https://www.redirect-checker.org/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>Checks if the link redirect you to some other site which might be the real malicious site</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/scam_hunting/scam_hunting7.png"
                      alt="Scam Hunting"
                ></p>
<h4 id="6-Link-Unshortener-📎"><a href="#6-Link-Unshortener-📎" class="headerlink" title="6. Link Unshortener 📎"></a>6. Link Unshortener <a class="link"   href="https://unshorten.it/" >📎 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h4><ul>
<li>Some sites shorten the link to hide the real intention behind the links, so we can use this site to unshorten the link. </li>
<li>It also provides you with the title and description tags of the target web page, a screenshot of the target website, safety ratings provided by Web of Trust and will alert you if the website is found in the HPHosts blacklist.</li>
</ul>
<blockquote>
<p>One can use virustotal to search for the link’s             relatives or similar sites, because the current link         might have been deactivated but it’s redirected link or     the link from it’s family might still be active and that     can we used to analyse the behaviour of the given link.</p>
</blockquote>
<br />

<h4 id="Reverse-Engineering-the-Code"><a href="#Reverse-Engineering-the-Code" class="headerlink" title="Reverse Engineering the Code"></a>Reverse Engineering the Code</h4><br />

<p>The source code of the suspected link can be analysed and reverse engineered to find out the traces of malicious activities. Few things to keep in mind while analysing the source are: </p>
<ul>
<li>If it is highly obfuscated</li>
<li>If it restricts any keyboard shortcut like Ctrl+C or Ctrl+V for copy and paste</li>
<li>Check if it restricts you from right clicking on the website, that is to avoid you from accessing the inspect page although the keyboard shortcuts exist.</li>
<li>If it redirects you to some other link</li>
</ul>
<h4 id="Further-References"><a href="#Further-References" class="headerlink" title="Further References"></a>Further References</h4><br />

<ol>
<li><a class="link"   href="https://darktrace.com/blog/the-rise-of-ipfs-phishing-darktraces-detection-of-an-evasive-and-dynamic-credential-harvester" >Reverse Engineering the site <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
<li>Tool - <a class="link"   href="https://github.com/LambdaMamba/grim-scraper" >GrimScraper <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li>
</ol>
<br>
Ciao !!
<br>

<hr>
]]></content>
      <categories>
        <category>GCC</category>
      </categories>
      <tags>
        <tag>GCC</tag>
        <tag>scam</tag>
        <tag>osint</tag>
      </tags>
  </entry>
</search>
